/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * DashboardFilter
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class DashboardFilter {
  @SerializedName("id")
  private String id = null;

  @SerializedName("dashboard_id")
  private String dashboardId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("default_value")
  private String defaultValue = null;

  @SerializedName("model")
  private String model = null;

  @SerializedName("explore")
  private String explore = null;

  @SerializedName("dimension")
  private String dimension = null;

  @SerializedName("field")
  private Map<String, String> field = null;

  @SerializedName("row")
  private Long row = null;

  @SerializedName("listens_to_filters")
  private List<String> listensToFilters = null;

  @SerializedName("allow_multiple_values")
  private Boolean allowMultipleValues = null;

  @SerializedName("required")
  private Boolean required = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Unique Id
   * @return id
  **/
  @ApiModelProperty(value = "Unique Id")
  public String getId() {
    return id;
  }

   /**
   * Id of Dashboard
   * @return dashboardId
  **/
  @ApiModelProperty(value = "Id of Dashboard")
  public String getDashboardId() {
    return dashboardId;
  }

  public DashboardFilter name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of filter
   * @return name
  **/
  @ApiModelProperty(value = "Name of filter")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DashboardFilter title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of filter
   * @return title
  **/
  @ApiModelProperty(value = "Title of filter")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public DashboardFilter type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type of filter: one of date, number, string, or field
   * @return type
  **/
  @ApiModelProperty(value = "Type of filter: one of date, number, string, or field")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public DashboardFilter defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * Default value of filter
   * @return defaultValue
  **/
  @ApiModelProperty(value = "Default value of filter")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public DashboardFilter model(String model) {
    this.model = model;
    return this;
  }

   /**
   * Model of filter (required if type &#x3D; field)
   * @return model
  **/
  @ApiModelProperty(value = "Model of filter (required if type = field)")
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }

  public DashboardFilter explore(String explore) {
    this.explore = explore;
    return this;
  }

   /**
   * Explore of filter (required if type &#x3D; field)
   * @return explore
  **/
  @ApiModelProperty(value = "Explore of filter (required if type = field)")
  public String getExplore() {
    return explore;
  }

  public void setExplore(String explore) {
    this.explore = explore;
  }

  public DashboardFilter dimension(String dimension) {
    this.dimension = dimension;
    return this;
  }

   /**
   * Dimension of filter (required if type &#x3D; field)
   * @return dimension
  **/
  @ApiModelProperty(value = "Dimension of filter (required if type = field)")
  public String getDimension() {
    return dimension;
  }

  public void setDimension(String dimension) {
    this.dimension = dimension;
  }

  public DashboardFilter field(Map<String, String> field) {
    this.field = field;
    return this;
  }

  public DashboardFilter putFieldItem(String key, String fieldItem) {
    if (this.field == null) {
      this.field = new HashMap<String, String>();
    }
    this.field.put(key, fieldItem);
    return this;
  }

   /**
   * Field information
   * @return field
  **/
  @ApiModelProperty(value = "Field information")
  public Map<String, String> getField() {
    return field;
  }

  public void setField(Map<String, String> field) {
    this.field = field;
  }

   /**
   * Position of filter when displaying
   * @return row
  **/
  @ApiModelProperty(value = "Position of filter when displaying")
  public Long getRow() {
    return row;
  }

  public DashboardFilter listensToFilters(List<String> listensToFilters) {
    this.listensToFilters = listensToFilters;
    return this;
  }

  public DashboardFilter addListensToFiltersItem(String listensToFiltersItem) {
    if (this.listensToFilters == null) {
      this.listensToFilters = new ArrayList<String>();
    }
    this.listensToFilters.add(listensToFiltersItem);
    return this;
  }

   /**
   * Array of listeners for faceted filters
   * @return listensToFilters
  **/
  @ApiModelProperty(value = "Array of listeners for faceted filters")
  public List<String> getListensToFilters() {
    return listensToFilters;
  }

  public void setListensToFilters(List<String> listensToFilters) {
    this.listensToFilters = listensToFilters;
  }

  public DashboardFilter allowMultipleValues(Boolean allowMultipleValues) {
    this.allowMultipleValues = allowMultipleValues;
    return this;
  }

   /**
   * Whether the filter allows multiple filter values
   * @return allowMultipleValues
  **/
  @ApiModelProperty(value = "Whether the filter allows multiple filter values")
  public Boolean isAllowMultipleValues() {
    return allowMultipleValues;
  }

  public void setAllowMultipleValues(Boolean allowMultipleValues) {
    this.allowMultipleValues = allowMultipleValues;
  }

  public DashboardFilter required(Boolean required) {
    this.required = required;
    return this;
  }

   /**
   * Whether the filter requires a value to run the dashboard
   * @return required
  **/
  @ApiModelProperty(value = "Whether the filter requires a value to run the dashboard")
  public Boolean isRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }

  public DashboardFilter can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public DashboardFilter putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardFilter dashboardFilter = (DashboardFilter) o;
    return Objects.equals(this.id, dashboardFilter.id) &&
        Objects.equals(this.dashboardId, dashboardFilter.dashboardId) &&
        Objects.equals(this.name, dashboardFilter.name) &&
        Objects.equals(this.title, dashboardFilter.title) &&
        Objects.equals(this.type, dashboardFilter.type) &&
        Objects.equals(this.defaultValue, dashboardFilter.defaultValue) &&
        Objects.equals(this.model, dashboardFilter.model) &&
        Objects.equals(this.explore, dashboardFilter.explore) &&
        Objects.equals(this.dimension, dashboardFilter.dimension) &&
        Objects.equals(this.field, dashboardFilter.field) &&
        Objects.equals(this.row, dashboardFilter.row) &&
        Objects.equals(this.listensToFilters, dashboardFilter.listensToFilters) &&
        Objects.equals(this.allowMultipleValues, dashboardFilter.allowMultipleValues) &&
        Objects.equals(this.required, dashboardFilter.required) &&
        Objects.equals(this.can, dashboardFilter.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, dashboardId, name, title, type, defaultValue, model, explore, dimension, field, row, listensToFilters, allowMultipleValues, required, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardFilter {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dashboardId: ").append(toIndentedString(dashboardId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    explore: ").append(toIndentedString(explore)).append("\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    row: ").append(toIndentedString(row)).append("\n");
    sb.append("    listensToFilters: ").append(toIndentedString(listensToFilters)).append("\n");
    sb.append("    allowMultipleValues: ").append(toIndentedString(allowMultipleValues)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

