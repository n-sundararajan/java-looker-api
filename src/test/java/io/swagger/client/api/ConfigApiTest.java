/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ApiVersion;
import io.swagger.client.model.BackupConfiguration;
import io.swagger.client.model.Error;
import io.swagger.client.model.LegacyFeature;
import io.swagger.client.model.Timezone;
import io.swagger.client.model.ValidationError;
import io.swagger.client.model.Whitelabel;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConfigApi
 */
@Ignore
public class ConfigApiTest {

    private final ConfigApi api = new ConfigApi();

    
    /**
     * Get All Legacy Features
     *
     * ### Get all legacy features. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allLegacyFeaturesTest() throws ApiException {
        List<LegacyFeature> response = api.allLegacyFeatures();

        // TODO: test validations
    }
    
    /**
     * Get All Timezones
     *
     * ### Get a list of timezones that Looker supports (e.g. useful for scheduling tasks). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allTimezonesTest() throws ApiException {
        List<Timezone> response = api.allTimezones();

        // TODO: test validations
    }
    
    /**
     * Get Backup Configuration
     *
     * ### Get the current Looker internal database backup configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void backupConfigurationTest() throws ApiException {
        BackupConfiguration response = api.backupConfiguration();

        // TODO: test validations
    }
    
    /**
     * Get Legacy Feature
     *
     * ### Get information about the legacy feature with a specific id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void legacyFeatureTest() throws ApiException {
        Long legacyFeatureId = null;
        LegacyFeature response = api.legacyFeature(legacyFeatureId);

        // TODO: test validations
    }
    
    /**
     * Update Backup Configuration
     *
     * ### Update the Looker internal database backup configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBackupConfigurationTest() throws ApiException {
        BackupConfiguration body = null;
        BackupConfiguration response = api.updateBackupConfiguration(body);

        // TODO: test validations
    }
    
    /**
     * Update Legacy Feature
     *
     * ### Update information about the legacy feature with a specific id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLegacyFeatureTest() throws ApiException {
        Long legacyFeatureId = null;
        LegacyFeature body = null;
        LegacyFeature response = api.updateLegacyFeature(legacyFeatureId, body);

        // TODO: test validations
    }
    
    /**
     * Update Whitelabel configuration
     *
     * ### Update the whitelabel configuration 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWhitelabelConfigurationTest() throws ApiException {
        Whitelabel body = null;
        Whitelabel response = api.updateWhitelabelConfiguration(body);

        // TODO: test validations
    }
    
    /**
     * Get ApiVersion
     *
     * ### Get information about all API versions supported by this Looker instance. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void versionsTest() throws ApiException {
        String fields = null;
        ApiVersion response = api.versions(fields);

        // TODO: test validations
    }
    
    /**
     * Get Whitelabel configuration
     *
     * ### This feature is enabled only by special license. ### Gets the whitelabel configuration, which includes hiding documentation links, custom favicon uploading, etc. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void whitelabelConfigurationTest() throws ApiException {
        String fields = null;
        Whitelabel response = api.whitelabelConfiguration(fields);

        // TODO: test validations
    }
    
}
