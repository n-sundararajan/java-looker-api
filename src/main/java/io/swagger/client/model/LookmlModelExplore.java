/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.LookmlModelExploreAccessFilter;
import io.swagger.client.model.LookmlModelExploreAlias;
import io.swagger.client.model.LookmlModelExploreAlwaysFilter;
import io.swagger.client.model.LookmlModelExploreConditionallyFilter;
import io.swagger.client.model.LookmlModelExploreError;
import io.swagger.client.model.LookmlModelExploreFieldset;
import io.swagger.client.model.LookmlModelExploreJoins;
import io.swagger.client.model.LookmlModelExploreSet;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * LookmlModelExplore
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class LookmlModelExplore {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("scopes")
  private List<String> scopes = null;

  @SerializedName("can_total")
  private Boolean canTotal = null;

  @SerializedName("can_save")
  private Boolean canSave = null;

  @SerializedName("can_explain")
  private Boolean canExplain = null;

  @SerializedName("can_pivot_in_db")
  private Boolean canPivotInDb = null;

  @SerializedName("has_timezone_support")
  private Boolean hasTimezoneSupport = null;

  @SerializedName("supports_cost_estimate")
  private Boolean supportsCostEstimate = null;

  @SerializedName("connection_name")
  private String connectionName = null;

  @SerializedName("null_sort_treatment")
  private String nullSortTreatment = null;

  @SerializedName("files")
  private List<String> files = null;

  @SerializedName("source_file")
  private String sourceFile = null;

  @SerializedName("project_name")
  private String projectName = null;

  @SerializedName("model_name")
  private String modelName = null;

  @SerializedName("view_name")
  private String viewName = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("sql_table_name")
  private String sqlTableName = null;

  @SerializedName("access_filter_fields")
  private List<String> accessFilterFields = null;

  @SerializedName("access_filters")
  private List<LookmlModelExploreAccessFilter> accessFilters = null;

  @SerializedName("aliases")
  private List<LookmlModelExploreAlias> aliases = null;

  @SerializedName("always_filter")
  private List<LookmlModelExploreAlwaysFilter> alwaysFilter = null;

  @SerializedName("conditionally_filter")
  private List<LookmlModelExploreConditionallyFilter> conditionallyFilter = null;

  @SerializedName("index_fields")
  private List<String> indexFields = null;

  @SerializedName("sets")
  private List<LookmlModelExploreSet> sets = null;

  @SerializedName("errors")
  private List<LookmlModelExploreError> errors = null;

  @SerializedName("fields")
  private LookmlModelExploreFieldset fields = null;

  @SerializedName("joins")
  private List<LookmlModelExploreJoins> joins = null;

  @SerializedName("group_label")
  private String groupLabel = null;

   /**
   * Fully qualified name model plus explore name
   * @return id
  **/
  @ApiModelProperty(value = "Fully qualified name model plus explore name")
  public String getId() {
    return id;
  }

   /**
   * Explore name
   * @return name
  **/
  @ApiModelProperty(value = "Explore name")
  public String getName() {
    return name;
  }

   /**
   * Description
   * @return description
  **/
  @ApiModelProperty(value = "Description")
  public String getDescription() {
    return description;
  }

   /**
   * Label
   * @return label
  **/
  @ApiModelProperty(value = "Label")
  public String getLabel() {
    return label;
  }

  public LookmlModelExplore scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public LookmlModelExplore addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<String>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * Scopes
   * @return scopes
  **/
  @ApiModelProperty(value = "Scopes")
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }

   /**
   * Can Total
   * @return canTotal
  **/
  @ApiModelProperty(value = "Can Total")
  public Boolean isCanTotal() {
    return canTotal;
  }

   /**
   * Can Save
   * @return canSave
  **/
  @ApiModelProperty(value = "Can Save")
  public Boolean isCanSave() {
    return canSave;
  }

   /**
   * Can Explain
   * @return canExplain
  **/
  @ApiModelProperty(value = "Can Explain")
  public Boolean isCanExplain() {
    return canExplain;
  }

   /**
   * Can pivot in the DB
   * @return canPivotInDb
  **/
  @ApiModelProperty(value = "Can pivot in the DB")
  public Boolean isCanPivotInDb() {
    return canPivotInDb;
  }

   /**
   * Has timezone support
   * @return hasTimezoneSupport
  **/
  @ApiModelProperty(value = "Has timezone support")
  public Boolean isHasTimezoneSupport() {
    return hasTimezoneSupport;
  }

   /**
   * Cost estimates supported
   * @return supportsCostEstimate
  **/
  @ApiModelProperty(value = "Cost estimates supported")
  public Boolean isSupportsCostEstimate() {
    return supportsCostEstimate;
  }

   /**
   * Connection name
   * @return connectionName
  **/
  @ApiModelProperty(value = "Connection name")
  public String getConnectionName() {
    return connectionName;
  }

   /**
   * How nulls are sorted, possible values are \&quot;low\&quot;, \&quot;high\&quot;, \&quot;first\&quot; and \&quot;last\&quot;
   * @return nullSortTreatment
  **/
  @ApiModelProperty(value = "How nulls are sorted, possible values are \"low\", \"high\", \"first\" and \"last\"")
  public String getNullSortTreatment() {
    return nullSortTreatment;
  }

  public LookmlModelExplore files(List<String> files) {
    this.files = files;
    return this;
  }

  public LookmlModelExplore addFilesItem(String filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<String>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * List of model source files
   * @return files
  **/
  @ApiModelProperty(value = "List of model source files")
  public List<String> getFiles() {
    return files;
  }

  public void setFiles(List<String> files) {
    this.files = files;
  }

   /**
   * Primary source_file file
   * @return sourceFile
  **/
  @ApiModelProperty(value = "Primary source_file file")
  public String getSourceFile() {
    return sourceFile;
  }

   /**
   * Name of project
   * @return projectName
  **/
  @ApiModelProperty(value = "Name of project")
  public String getProjectName() {
    return projectName;
  }

   /**
   * Name of model
   * @return modelName
  **/
  @ApiModelProperty(value = "Name of model")
  public String getModelName() {
    return modelName;
  }

   /**
   * Name of view
   * @return viewName
  **/
  @ApiModelProperty(value = "Name of view")
  public String getViewName() {
    return viewName;
  }

   /**
   * Is hidden
   * @return hidden
  **/
  @ApiModelProperty(value = "Is hidden")
  public Boolean isHidden() {
    return hidden;
  }

   /**
   * A sql_table_name expression that defines what sql table the view/explore maps onto. Example: \&quot;prod_orders2 AS orders\&quot; in a view named orders.
   * @return sqlTableName
  **/
  @ApiModelProperty(value = "A sql_table_name expression that defines what sql table the view/explore maps onto. Example: \"prod_orders2 AS orders\" in a view named orders.")
  public String getSqlTableName() {
    return sqlTableName;
  }

  public LookmlModelExplore accessFilterFields(List<String> accessFilterFields) {
    this.accessFilterFields = accessFilterFields;
    return this;
  }

  public LookmlModelExplore addAccessFilterFieldsItem(String accessFilterFieldsItem) {
    if (this.accessFilterFields == null) {
      this.accessFilterFields = new ArrayList<String>();
    }
    this.accessFilterFields.add(accessFilterFieldsItem);
    return this;
  }

   /**
   * (DEPRECATED) Array of access filter field names
   * @return accessFilterFields
  **/
  @ApiModelProperty(value = "(DEPRECATED) Array of access filter field names")
  public List<String> getAccessFilterFields() {
    return accessFilterFields;
  }

  public void setAccessFilterFields(List<String> accessFilterFields) {
    this.accessFilterFields = accessFilterFields;
  }

  public LookmlModelExplore accessFilters(List<LookmlModelExploreAccessFilter> accessFilters) {
    this.accessFilters = accessFilters;
    return this;
  }

  public LookmlModelExplore addAccessFiltersItem(LookmlModelExploreAccessFilter accessFiltersItem) {
    if (this.accessFilters == null) {
      this.accessFilters = new ArrayList<LookmlModelExploreAccessFilter>();
    }
    this.accessFilters.add(accessFiltersItem);
    return this;
  }

   /**
   * Access filters
   * @return accessFilters
  **/
  @ApiModelProperty(value = "Access filters")
  public List<LookmlModelExploreAccessFilter> getAccessFilters() {
    return accessFilters;
  }

  public void setAccessFilters(List<LookmlModelExploreAccessFilter> accessFilters) {
    this.accessFilters = accessFilters;
  }

  public LookmlModelExplore aliases(List<LookmlModelExploreAlias> aliases) {
    this.aliases = aliases;
    return this;
  }

  public LookmlModelExplore addAliasesItem(LookmlModelExploreAlias aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<LookmlModelExploreAlias>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * Aliases
   * @return aliases
  **/
  @ApiModelProperty(value = "Aliases")
  public List<LookmlModelExploreAlias> getAliases() {
    return aliases;
  }

  public void setAliases(List<LookmlModelExploreAlias> aliases) {
    this.aliases = aliases;
  }

  public LookmlModelExplore alwaysFilter(List<LookmlModelExploreAlwaysFilter> alwaysFilter) {
    this.alwaysFilter = alwaysFilter;
    return this;
  }

  public LookmlModelExplore addAlwaysFilterItem(LookmlModelExploreAlwaysFilter alwaysFilterItem) {
    if (this.alwaysFilter == null) {
      this.alwaysFilter = new ArrayList<LookmlModelExploreAlwaysFilter>();
    }
    this.alwaysFilter.add(alwaysFilterItem);
    return this;
  }

   /**
   * Always filter
   * @return alwaysFilter
  **/
  @ApiModelProperty(value = "Always filter")
  public List<LookmlModelExploreAlwaysFilter> getAlwaysFilter() {
    return alwaysFilter;
  }

  public void setAlwaysFilter(List<LookmlModelExploreAlwaysFilter> alwaysFilter) {
    this.alwaysFilter = alwaysFilter;
  }

  public LookmlModelExplore conditionallyFilter(List<LookmlModelExploreConditionallyFilter> conditionallyFilter) {
    this.conditionallyFilter = conditionallyFilter;
    return this;
  }

  public LookmlModelExplore addConditionallyFilterItem(LookmlModelExploreConditionallyFilter conditionallyFilterItem) {
    if (this.conditionallyFilter == null) {
      this.conditionallyFilter = new ArrayList<LookmlModelExploreConditionallyFilter>();
    }
    this.conditionallyFilter.add(conditionallyFilterItem);
    return this;
  }

   /**
   * Conditionally filter
   * @return conditionallyFilter
  **/
  @ApiModelProperty(value = "Conditionally filter")
  public List<LookmlModelExploreConditionallyFilter> getConditionallyFilter() {
    return conditionallyFilter;
  }

  public void setConditionallyFilter(List<LookmlModelExploreConditionallyFilter> conditionallyFilter) {
    this.conditionallyFilter = conditionallyFilter;
  }

  public LookmlModelExplore indexFields(List<String> indexFields) {
    this.indexFields = indexFields;
    return this;
  }

  public LookmlModelExplore addIndexFieldsItem(String indexFieldsItem) {
    if (this.indexFields == null) {
      this.indexFields = new ArrayList<String>();
    }
    this.indexFields.add(indexFieldsItem);
    return this;
  }

   /**
   * Array of index fields
   * @return indexFields
  **/
  @ApiModelProperty(value = "Array of index fields")
  public List<String> getIndexFields() {
    return indexFields;
  }

  public void setIndexFields(List<String> indexFields) {
    this.indexFields = indexFields;
  }

  public LookmlModelExplore sets(List<LookmlModelExploreSet> sets) {
    this.sets = sets;
    return this;
  }

  public LookmlModelExplore addSetsItem(LookmlModelExploreSet setsItem) {
    if (this.sets == null) {
      this.sets = new ArrayList<LookmlModelExploreSet>();
    }
    this.sets.add(setsItem);
    return this;
  }

   /**
   * Sets
   * @return sets
  **/
  @ApiModelProperty(value = "Sets")
  public List<LookmlModelExploreSet> getSets() {
    return sets;
  }

  public void setSets(List<LookmlModelExploreSet> sets) {
    this.sets = sets;
  }

  public LookmlModelExplore errors(List<LookmlModelExploreError> errors) {
    this.errors = errors;
    return this;
  }

  public LookmlModelExplore addErrorsItem(LookmlModelExploreError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<LookmlModelExploreError>();
    }
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Errors
   * @return errors
  **/
  @ApiModelProperty(value = "Errors")
  public List<LookmlModelExploreError> getErrors() {
    return errors;
  }

  public void setErrors(List<LookmlModelExploreError> errors) {
    this.errors = errors;
  }

  public LookmlModelExplore fields(LookmlModelExploreFieldset fields) {
    this.fields = fields;
    return this;
  }

   /**
   * Fields
   * @return fields
  **/
  @ApiModelProperty(value = "Fields")
  public LookmlModelExploreFieldset getFields() {
    return fields;
  }

  public void setFields(LookmlModelExploreFieldset fields) {
    this.fields = fields;
  }

  public LookmlModelExplore joins(List<LookmlModelExploreJoins> joins) {
    this.joins = joins;
    return this;
  }

  public LookmlModelExplore addJoinsItem(LookmlModelExploreJoins joinsItem) {
    if (this.joins == null) {
      this.joins = new ArrayList<LookmlModelExploreJoins>();
    }
    this.joins.add(joinsItem);
    return this;
  }

   /**
   * Views joined into this explore
   * @return joins
  **/
  @ApiModelProperty(value = "Views joined into this explore")
  public List<LookmlModelExploreJoins> getJoins() {
    return joins;
  }

  public void setJoins(List<LookmlModelExploreJoins> joins) {
    this.joins = joins;
  }

   /**
   * Label used to group explores in the navigation menus
   * @return groupLabel
  **/
  @ApiModelProperty(value = "Label used to group explores in the navigation menus")
  public String getGroupLabel() {
    return groupLabel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookmlModelExplore lookmlModelExplore = (LookmlModelExplore) o;
    return Objects.equals(this.id, lookmlModelExplore.id) &&
        Objects.equals(this.name, lookmlModelExplore.name) &&
        Objects.equals(this.description, lookmlModelExplore.description) &&
        Objects.equals(this.label, lookmlModelExplore.label) &&
        Objects.equals(this.scopes, lookmlModelExplore.scopes) &&
        Objects.equals(this.canTotal, lookmlModelExplore.canTotal) &&
        Objects.equals(this.canSave, lookmlModelExplore.canSave) &&
        Objects.equals(this.canExplain, lookmlModelExplore.canExplain) &&
        Objects.equals(this.canPivotInDb, lookmlModelExplore.canPivotInDb) &&
        Objects.equals(this.hasTimezoneSupport, lookmlModelExplore.hasTimezoneSupport) &&
        Objects.equals(this.supportsCostEstimate, lookmlModelExplore.supportsCostEstimate) &&
        Objects.equals(this.connectionName, lookmlModelExplore.connectionName) &&
        Objects.equals(this.nullSortTreatment, lookmlModelExplore.nullSortTreatment) &&
        Objects.equals(this.files, lookmlModelExplore.files) &&
        Objects.equals(this.sourceFile, lookmlModelExplore.sourceFile) &&
        Objects.equals(this.projectName, lookmlModelExplore.projectName) &&
        Objects.equals(this.modelName, lookmlModelExplore.modelName) &&
        Objects.equals(this.viewName, lookmlModelExplore.viewName) &&
        Objects.equals(this.hidden, lookmlModelExplore.hidden) &&
        Objects.equals(this.sqlTableName, lookmlModelExplore.sqlTableName) &&
        Objects.equals(this.accessFilterFields, lookmlModelExplore.accessFilterFields) &&
        Objects.equals(this.accessFilters, lookmlModelExplore.accessFilters) &&
        Objects.equals(this.aliases, lookmlModelExplore.aliases) &&
        Objects.equals(this.alwaysFilter, lookmlModelExplore.alwaysFilter) &&
        Objects.equals(this.conditionallyFilter, lookmlModelExplore.conditionallyFilter) &&
        Objects.equals(this.indexFields, lookmlModelExplore.indexFields) &&
        Objects.equals(this.sets, lookmlModelExplore.sets) &&
        Objects.equals(this.errors, lookmlModelExplore.errors) &&
        Objects.equals(this.fields, lookmlModelExplore.fields) &&
        Objects.equals(this.joins, lookmlModelExplore.joins) &&
        Objects.equals(this.groupLabel, lookmlModelExplore.groupLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, label, scopes, canTotal, canSave, canExplain, canPivotInDb, hasTimezoneSupport, supportsCostEstimate, connectionName, nullSortTreatment, files, sourceFile, projectName, modelName, viewName, hidden, sqlTableName, accessFilterFields, accessFilters, aliases, alwaysFilter, conditionallyFilter, indexFields, sets, errors, fields, joins, groupLabel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookmlModelExplore {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    canTotal: ").append(toIndentedString(canTotal)).append("\n");
    sb.append("    canSave: ").append(toIndentedString(canSave)).append("\n");
    sb.append("    canExplain: ").append(toIndentedString(canExplain)).append("\n");
    sb.append("    canPivotInDb: ").append(toIndentedString(canPivotInDb)).append("\n");
    sb.append("    hasTimezoneSupport: ").append(toIndentedString(hasTimezoneSupport)).append("\n");
    sb.append("    supportsCostEstimate: ").append(toIndentedString(supportsCostEstimate)).append("\n");
    sb.append("    connectionName: ").append(toIndentedString(connectionName)).append("\n");
    sb.append("    nullSortTreatment: ").append(toIndentedString(nullSortTreatment)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    sourceFile: ").append(toIndentedString(sourceFile)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    viewName: ").append(toIndentedString(viewName)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    sqlTableName: ").append(toIndentedString(sqlTableName)).append("\n");
    sb.append("    accessFilterFields: ").append(toIndentedString(accessFilterFields)).append("\n");
    sb.append("    accessFilters: ").append(toIndentedString(accessFilters)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    alwaysFilter: ").append(toIndentedString(alwaysFilter)).append("\n");
    sb.append("    conditionallyFilter: ").append(toIndentedString(conditionallyFilter)).append("\n");
    sb.append("    indexFields: ").append(toIndentedString(indexFields)).append("\n");
    sb.append("    sets: ").append(toIndentedString(sets)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    joins: ").append(toIndentedString(joins)).append("\n");
    sb.append("    groupLabel: ").append(toIndentedString(groupLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

