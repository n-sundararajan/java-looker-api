/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Dashboard;
import io.swagger.client.model.Error;
import io.swagger.client.model.LookWithQuery;
import io.swagger.client.model.Space;
import io.swagger.client.model.SpaceBase;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpaceApi {
    private ApiClient apiClient;

    public SpaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpaceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for allSpaces
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allSpacesCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allSpacesValidateBeforeCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = allSpacesCall(fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All Spaces
     * ### Get information about all spaces.
     * @param fields Requested fields. (optional)
     * @return List&lt;SpaceBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SpaceBase> allSpaces(String fields) throws ApiException {
        ApiResponse<List<SpaceBase>> resp = allSpacesWithHttpInfo(fields);
        return resp.getData();
    }

    /**
     * Get All Spaces
     * ### Get information about all spaces.
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;SpaceBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SpaceBase>> allSpacesWithHttpInfo(String fields) throws ApiException {
        com.squareup.okhttp.Call call = allSpacesValidateBeforeCall(fields, null, null);
        Type localVarReturnType = new TypeToken<List<SpaceBase>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Spaces (asynchronously)
     * ### Get information about all spaces.
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allSpacesAsync(String fields, final ApiCallback<List<SpaceBase>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allSpacesValidateBeforeCall(fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SpaceBase>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSpace
     * @param body Space (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpaceCall(Space body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/spaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSpaceValidateBeforeCall(Space body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createSpaceCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Space
     * ### Create a space with specified information.  Caller must have permission to edit the parent space and to create spaces, otherwise the request returns 404 Not Found. 
     * @param body Space (optional)
     * @return Space
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Space createSpace(Space body) throws ApiException {
        ApiResponse<Space> resp = createSpaceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Space
     * ### Create a space with specified information.  Caller must have permission to edit the parent space and to create spaces, otherwise the request returns 404 Not Found. 
     * @param body Space (optional)
     * @return ApiResponse&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Space> createSpaceWithHttpInfo(Space body) throws ApiException {
        com.squareup.okhttp.Call call = createSpaceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Space (asynchronously)
     * ### Create a space with specified information.  Caller must have permission to edit the parent space and to create spaces, otherwise the request returns 404 Not Found. 
     * @param body Space (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpaceAsync(Space body, final ApiCallback<Space> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpaceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpace
     * @param spaceId Id of space (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpaceCall(String spaceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{space_id}"
            .replaceAll("\\{" + "space_id" + "\\}", apiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSpaceValidateBeforeCall(String spaceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling deleteSpace(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteSpaceCall(spaceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Space
     * ### Delete the space with a specific id including any children spaces. **DANGER** this will delete all looks and dashboards in the space. 
     * @param spaceId Id of space (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteSpace(String spaceId) throws ApiException {
        ApiResponse<String> resp = deleteSpaceWithHttpInfo(spaceId);
        return resp.getData();
    }

    /**
     * Delete Space
     * ### Delete the space with a specific id including any children spaces. **DANGER** this will delete all looks and dashboards in the space. 
     * @param spaceId Id of space (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteSpaceWithHttpInfo(String spaceId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpaceValidateBeforeCall(spaceId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Space (asynchronously)
     * ### Delete the space with a specific id including any children spaces. **DANGER** this will delete all looks and dashboards in the space. 
     * @param spaceId Id of space (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpaceAsync(String spaceId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpaceValidateBeforeCall(spaceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchSpaces
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param name Match Space title. (optional)
     * @param id Match Space id (optional)
     * @param parentId Filter on a children of a particular space. (optional)
     * @param creatorId Filter on dashboards created by a particular user. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchSpacesCall(String fields, Long page, Long perPage, Long limit, Long offset, String sorts, String name, Long id, String parentId, String creatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parent_id", parentId));
        if (creatorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("creator_id", creatorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchSpacesValidateBeforeCall(String fields, Long page, Long perPage, Long limit, Long offset, String sorts, String name, Long id, String parentId, String creatorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchSpacesCall(fields, page, perPage, limit, offset, sorts, name, id, parentId, creatorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Spaces
     * Search for spaces by creator id, parent id, name, etc
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param name Match Space title. (optional)
     * @param id Match Space id (optional)
     * @param parentId Filter on a children of a particular space. (optional)
     * @param creatorId Filter on dashboards created by a particular user. (optional)
     * @return List&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Space> searchSpaces(String fields, Long page, Long perPage, Long limit, Long offset, String sorts, String name, Long id, String parentId, String creatorId) throws ApiException {
        ApiResponse<List<Space>> resp = searchSpacesWithHttpInfo(fields, page, perPage, limit, offset, sorts, name, id, parentId, creatorId);
        return resp.getData();
    }

    /**
     * Search Spaces
     * Search for spaces by creator id, parent id, name, etc
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param name Match Space title. (optional)
     * @param id Match Space id (optional)
     * @param parentId Filter on a children of a particular space. (optional)
     * @param creatorId Filter on dashboards created by a particular user. (optional)
     * @return ApiResponse&lt;List&lt;Space&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Space>> searchSpacesWithHttpInfo(String fields, Long page, Long perPage, Long limit, Long offset, String sorts, String name, Long id, String parentId, String creatorId) throws ApiException {
        com.squareup.okhttp.Call call = searchSpacesValidateBeforeCall(fields, page, perPage, limit, offset, sorts, name, id, parentId, creatorId, null, null);
        Type localVarReturnType = new TypeToken<List<Space>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Spaces (asynchronously)
     * Search for spaces by creator id, parent id, name, etc
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param name Match Space title. (optional)
     * @param id Match Space id (optional)
     * @param parentId Filter on a children of a particular space. (optional)
     * @param creatorId Filter on dashboards created by a particular user. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchSpacesAsync(String fields, Long page, Long perPage, Long limit, Long offset, String sorts, String name, Long id, String parentId, String creatorId, final ApiCallback<List<Space>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchSpacesValidateBeforeCall(fields, page, perPage, limit, offset, sorts, name, id, parentId, creatorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Space>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spaceCall(String spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{space_id}"
            .replaceAll("\\{" + "space_id" + "\\}", apiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spaceValidateBeforeCall(String spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling space(Async)");
        }
        

        com.squareup.okhttp.Call call = spaceCall(spaceId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Space
     * ### Get information about the space with a specific id.
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @return Space
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Space space(String spaceId, String fields) throws ApiException {
        ApiResponse<Space> resp = spaceWithHttpInfo(spaceId, fields);
        return resp.getData();
    }

    /**
     * Get Space
     * ### Get information about the space with a specific id.
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Space> spaceWithHttpInfo(String spaceId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = spaceValidateBeforeCall(spaceId, fields, null, null);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space (asynchronously)
     * ### Get information about the space with a specific id.
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spaceAsync(String spaceId, String fields, final ApiCallback<Space> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spaceValidateBeforeCall(spaceId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spaceAncestors
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spaceAncestorsCall(String spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{space_id}/ancestors"
            .replaceAll("\\{" + "space_id" + "\\}", apiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spaceAncestorsValidateBeforeCall(String spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling spaceAncestors(Async)");
        }
        

        com.squareup.okhttp.Call call = spaceAncestorsCall(spaceId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Space Ancestors
     * ### Get the ancestors of a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @return List&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Space> spaceAncestors(String spaceId, String fields) throws ApiException {
        ApiResponse<List<Space>> resp = spaceAncestorsWithHttpInfo(spaceId, fields);
        return resp.getData();
    }

    /**
     * Get Space Ancestors
     * ### Get the ancestors of a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;Space&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Space>> spaceAncestorsWithHttpInfo(String spaceId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = spaceAncestorsValidateBeforeCall(spaceId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<Space>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space Ancestors (asynchronously)
     * ### Get the ancestors of a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spaceAncestorsAsync(String spaceId, String fields, final ApiCallback<List<Space>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spaceAncestorsValidateBeforeCall(spaceId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Space>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spaceChildren
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spaceChildrenCall(String spaceId, String fields, Long page, Long perPage, String sorts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{space_id}/children"
            .replaceAll("\\{" + "space_id" + "\\}", apiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spaceChildrenValidateBeforeCall(String spaceId, String fields, Long page, Long perPage, String sorts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling spaceChildren(Async)");
        }
        

        com.squareup.okhttp.Call call = spaceChildrenCall(spaceId, fields, page, perPage, sorts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Space Children
     * ### Get the children of a space.
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @return List&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Space> spaceChildren(String spaceId, String fields, Long page, Long perPage, String sorts) throws ApiException {
        ApiResponse<List<Space>> resp = spaceChildrenWithHttpInfo(spaceId, fields, page, perPage, sorts);
        return resp.getData();
    }

    /**
     * Get Space Children
     * ### Get the children of a space.
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @return ApiResponse&lt;List&lt;Space&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Space>> spaceChildrenWithHttpInfo(String spaceId, String fields, Long page, Long perPage, String sorts) throws ApiException {
        com.squareup.okhttp.Call call = spaceChildrenValidateBeforeCall(spaceId, fields, page, perPage, sorts, null, null);
        Type localVarReturnType = new TypeToken<List<Space>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space Children (asynchronously)
     * ### Get the children of a space.
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spaceChildrenAsync(String spaceId, String fields, Long page, Long perPage, String sorts, final ApiCallback<List<Space>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spaceChildrenValidateBeforeCall(spaceId, fields, page, perPage, sorts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Space>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spaceChildrenSearch
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param name Match Space name. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spaceChildrenSearchCall(String spaceId, String fields, String sorts, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{space_id}/children/search"
            .replaceAll("\\{" + "space_id" + "\\}", apiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spaceChildrenSearchValidateBeforeCall(String spaceId, String fields, String sorts, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling spaceChildrenSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = spaceChildrenSearchCall(spaceId, fields, sorts, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Space Children
     * ### Search the children of a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param name Match Space name. (optional)
     * @return List&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Space> spaceChildrenSearch(String spaceId, String fields, String sorts, String name) throws ApiException {
        ApiResponse<List<Space>> resp = spaceChildrenSearchWithHttpInfo(spaceId, fields, sorts, name);
        return resp.getData();
    }

    /**
     * Search Space Children
     * ### Search the children of a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param name Match Space name. (optional)
     * @return ApiResponse&lt;List&lt;Space&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Space>> spaceChildrenSearchWithHttpInfo(String spaceId, String fields, String sorts, String name) throws ApiException {
        com.squareup.okhttp.Call call = spaceChildrenSearchValidateBeforeCall(spaceId, fields, sorts, name, null, null);
        Type localVarReturnType = new TypeToken<List<Space>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Space Children (asynchronously)
     * ### Search the children of a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param name Match Space name. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spaceChildrenSearchAsync(String spaceId, String fields, String sorts, String name, final ApiCallback<List<Space>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spaceChildrenSearchValidateBeforeCall(spaceId, fields, sorts, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Space>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spaceDashboards
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spaceDashboardsCall(String spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{space_id}/dashboards"
            .replaceAll("\\{" + "space_id" + "\\}", apiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spaceDashboardsValidateBeforeCall(String spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling spaceDashboards(Async)");
        }
        

        com.squareup.okhttp.Call call = spaceDashboardsCall(spaceId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Space Dashboards
     * ### Get the dashboards in a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @return List&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Dashboard> spaceDashboards(String spaceId, String fields) throws ApiException {
        ApiResponse<List<Dashboard>> resp = spaceDashboardsWithHttpInfo(spaceId, fields);
        return resp.getData();
    }

    /**
     * Get Space Dashboards
     * ### Get the dashboards in a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;Dashboard&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Dashboard>> spaceDashboardsWithHttpInfo(String spaceId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = spaceDashboardsValidateBeforeCall(spaceId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<Dashboard>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space Dashboards (asynchronously)
     * ### Get the dashboards in a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spaceDashboardsAsync(String spaceId, String fields, final ApiCallback<List<Dashboard>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spaceDashboardsValidateBeforeCall(spaceId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Dashboard>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spaceLooks
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spaceLooksCall(String spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{space_id}/looks"
            .replaceAll("\\{" + "space_id" + "\\}", apiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spaceLooksValidateBeforeCall(String spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling spaceLooks(Async)");
        }
        

        com.squareup.okhttp.Call call = spaceLooksCall(spaceId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Space Looks
     * ### Get the looks in a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @return List&lt;LookWithQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LookWithQuery> spaceLooks(String spaceId, String fields) throws ApiException {
        ApiResponse<List<LookWithQuery>> resp = spaceLooksWithHttpInfo(spaceId, fields);
        return resp.getData();
    }

    /**
     * Get Space Looks
     * ### Get the looks in a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;LookWithQuery&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LookWithQuery>> spaceLooksWithHttpInfo(String spaceId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = spaceLooksValidateBeforeCall(spaceId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<LookWithQuery>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space Looks (asynchronously)
     * ### Get the looks in a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spaceLooksAsync(String spaceId, String fields, final ApiCallback<List<LookWithQuery>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spaceLooksValidateBeforeCall(spaceId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LookWithQuery>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for spaceParent
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spaceParentCall(String spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{space_id}/parent"
            .replaceAll("\\{" + "space_id" + "\\}", apiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spaceParentValidateBeforeCall(String spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling spaceParent(Async)");
        }
        

        com.squareup.okhttp.Call call = spaceParentCall(spaceId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Space Parent
     * ### Get the parent of a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @return Space
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Space spaceParent(String spaceId, String fields) throws ApiException {
        ApiResponse<Space> resp = spaceParentWithHttpInfo(spaceId, fields);
        return resp.getData();
    }

    /**
     * Get Space Parent
     * ### Get the parent of a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Space> spaceParentWithHttpInfo(String spaceId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = spaceParentValidateBeforeCall(spaceId, fields, null, null);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Space Parent (asynchronously)
     * ### Get the parent of a space
     * @param spaceId Id of space (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spaceParentAsync(String spaceId, String fields, final ApiCallback<Space> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spaceParentValidateBeforeCall(spaceId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSpace
     * @param spaceId Id of space (required)
     * @param body Space (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSpaceCall(String spaceId, Space body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/spaces/{space_id}"
            .replaceAll("\\{" + "space_id" + "\\}", apiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateSpaceValidateBeforeCall(String spaceId, Space body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateSpace(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSpace(Async)");
        }
        

        com.squareup.okhttp.Call call = updateSpaceCall(spaceId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Space
     * ### Update the space with a specific id.
     * @param spaceId Id of space (required)
     * @param body Space (required)
     * @return Space
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Space updateSpace(String spaceId, Space body) throws ApiException {
        ApiResponse<Space> resp = updateSpaceWithHttpInfo(spaceId, body);
        return resp.getData();
    }

    /**
     * Update Space
     * ### Update the space with a specific id.
     * @param spaceId Id of space (required)
     * @param body Space (required)
     * @return ApiResponse&lt;Space&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Space> updateSpaceWithHttpInfo(String spaceId, Space body) throws ApiException {
        com.squareup.okhttp.Call call = updateSpaceValidateBeforeCall(spaceId, body, null, null);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Space (asynchronously)
     * ### Update the space with a specific id.
     * @param spaceId Id of space (required)
     * @param body Space (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSpaceAsync(String spaceId, Space body, final ApiCallback<Space> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSpaceValidateBeforeCall(spaceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Space>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
