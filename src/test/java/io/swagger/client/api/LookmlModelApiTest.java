/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import io.swagger.client.model.LookmlModel;
import io.swagger.client.model.LookmlModelExplore;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LookmlModelApi
 */
@Ignore
public class LookmlModelApiTest {

    private final LookmlModelApi api = new LookmlModelApi();

    
    /**
     * Get All LookML Models
     *
     * ### Get information about all lookml models. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allLookmlModelsTest() throws ApiException {
        String fields = null;
        List<LookmlModel> response = api.allLookmlModels(fields);

        // TODO: test validations
    }
    
    /**
     * Create LookML Model
     *
     * ### Create a lookml model using the specified configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLookmlModelTest() throws ApiException {
        LookmlModel body = null;
        LookmlModel response = api.createLookmlModel(body);

        // TODO: test validations
    }
    
    /**
     * Delete LookML Model
     *
     * ### Delete a lookml model. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLookmlModelTest() throws ApiException {
        String lookmlModelName = null;
        String response = api.deleteLookmlModel(lookmlModelName);

        // TODO: test validations
    }
    
    /**
     * Get LookML Model
     *
     * ### Get information about a lookml model. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookmlModelTest() throws ApiException {
        String lookmlModelName = null;
        String fields = null;
        LookmlModel response = api.lookmlModel(lookmlModelName, fields);

        // TODO: test validations
    }
    
    /**
     * Get LookML Model Explore
     *
     * ### Get information about a lookml model explore. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void lookmlModelExploreTest() throws ApiException {
        String lookmlModelName = null;
        String exploreName = null;
        String fields = null;
        LookmlModelExplore response = api.lookmlModelExplore(lookmlModelName, exploreName, fields);

        // TODO: test validations
    }
    
    /**
     * Update LookML Model
     *
     * ### Update a lookml model using the specified configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLookmlModelTest() throws ApiException {
        String lookmlModelName = null;
        LookmlModel body = null;
        LookmlModel response = api.updateLookmlModel(lookmlModelName, body);

        // TODO: test validations
    }
    
}
