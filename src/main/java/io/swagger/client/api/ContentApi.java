/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ContentFavorite;
import io.swagger.client.model.ContentMeta;
import io.swagger.client.model.ContentMetaGroupUser;
import io.swagger.client.model.ContentView;
import io.swagger.client.model.Error;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentApi {
    private ApiClient apiClient;

    public ContentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for allContentMetadataAccesss
     * @param contentMetadataId Id of content metadata (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allContentMetadataAccesssCall(Long contentMetadataId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content_metadata_access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contentMetadataId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("content_metadata_id", contentMetadataId));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allContentMetadataAccesssValidateBeforeCall(Long contentMetadataId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = allContentMetadataAccesssCall(contentMetadataId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All Content Metadata Accesss
     * ### All content metadata access records for a content metadata item. 
     * @param contentMetadataId Id of content metadata (optional)
     * @param fields Requested fields. (optional)
     * @return List&lt;ContentMetaGroupUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentMetaGroupUser> allContentMetadataAccesss(Long contentMetadataId, String fields) throws ApiException {
        ApiResponse<List<ContentMetaGroupUser>> resp = allContentMetadataAccesssWithHttpInfo(contentMetadataId, fields);
        return resp.getData();
    }

    /**
     * Get All Content Metadata Accesss
     * ### All content metadata access records for a content metadata item. 
     * @param contentMetadataId Id of content metadata (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;ContentMetaGroupUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentMetaGroupUser>> allContentMetadataAccesssWithHttpInfo(Long contentMetadataId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = allContentMetadataAccesssValidateBeforeCall(contentMetadataId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<ContentMetaGroupUser>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Content Metadata Accesss (asynchronously)
     * ### All content metadata access records for a content metadata item. 
     * @param contentMetadataId Id of content metadata (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allContentMetadataAccesssAsync(Long contentMetadataId, String fields, final ApiCallback<List<ContentMetaGroupUser>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allContentMetadataAccesssValidateBeforeCall(contentMetadataId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentMetaGroupUser>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allContentMetadatas
     * @param parentId Parent space of content. (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allContentMetadatasCall(Long parentId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content_metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("parent_id", parentId));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allContentMetadatasValidateBeforeCall(Long parentId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling allContentMetadatas(Async)");
        }
        

        com.squareup.okhttp.Call call = allContentMetadatasCall(parentId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All Content Metadatas
     * ### Get information about all content metadata in a space. 
     * @param parentId Parent space of content. (required)
     * @param fields Requested fields. (optional)
     * @return List&lt;ContentMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentMeta> allContentMetadatas(Long parentId, String fields) throws ApiException {
        ApiResponse<List<ContentMeta>> resp = allContentMetadatasWithHttpInfo(parentId, fields);
        return resp.getData();
    }

    /**
     * Get All Content Metadatas
     * ### Get information about all content metadata in a space. 
     * @param parentId Parent space of content. (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;ContentMeta&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentMeta>> allContentMetadatasWithHttpInfo(Long parentId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = allContentMetadatasValidateBeforeCall(parentId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<ContentMeta>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Content Metadatas (asynchronously)
     * ### Get information about all content metadata in a space. 
     * @param parentId Parent space of content. (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allContentMetadatasAsync(Long parentId, String fields, final ApiCallback<List<ContentMeta>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allContentMetadatasValidateBeforeCall(parentId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentMeta>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentFavorite
     * @param contentFavoriteId Id of favorite content (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentFavoriteCall(Long contentFavoriteId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content_favorite/{content_favorite_id}"
            .replaceAll("\\{" + "content_favorite_id" + "\\}", apiClient.escapeString(contentFavoriteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentFavoriteValidateBeforeCall(Long contentFavoriteId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentFavoriteId' is set
        if (contentFavoriteId == null) {
            throw new ApiException("Missing the required parameter 'contentFavoriteId' when calling contentFavorite(Async)");
        }
        

        com.squareup.okhttp.Call call = contentFavoriteCall(contentFavoriteId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Favorite Content
     * ### Get favorite content by its id
     * @param contentFavoriteId Id of favorite content (required)
     * @param fields Requested fields. (optional)
     * @return ContentFavorite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentFavorite contentFavorite(Long contentFavoriteId, String fields) throws ApiException {
        ApiResponse<ContentFavorite> resp = contentFavoriteWithHttpInfo(contentFavoriteId, fields);
        return resp.getData();
    }

    /**
     * Get Favorite Content
     * ### Get favorite content by its id
     * @param contentFavoriteId Id of favorite content (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;ContentFavorite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentFavorite> contentFavoriteWithHttpInfo(Long contentFavoriteId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = contentFavoriteValidateBeforeCall(contentFavoriteId, fields, null, null);
        Type localVarReturnType = new TypeToken<ContentFavorite>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Favorite Content (asynchronously)
     * ### Get favorite content by its id
     * @param contentFavoriteId Id of favorite content (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentFavoriteAsync(Long contentFavoriteId, String fields, final ApiCallback<ContentFavorite> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentFavoriteValidateBeforeCall(contentFavoriteId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentFavorite>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contentMetadata
     * @param contentMetadataId Id of content metadata (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contentMetadataCall(Long contentMetadataId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content_metadata/{content_metadata_id}"
            .replaceAll("\\{" + "content_metadata_id" + "\\}", apiClient.escapeString(contentMetadataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contentMetadataValidateBeforeCall(Long contentMetadataId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentMetadataId' is set
        if (contentMetadataId == null) {
            throw new ApiException("Missing the required parameter 'contentMetadataId' when calling contentMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = contentMetadataCall(contentMetadataId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Content Metadata
     * ### Get information about an individual content metadata record. 
     * @param contentMetadataId Id of content metadata (required)
     * @param fields Requested fields. (optional)
     * @return ContentMeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentMeta contentMetadata(Long contentMetadataId, String fields) throws ApiException {
        ApiResponse<ContentMeta> resp = contentMetadataWithHttpInfo(contentMetadataId, fields);
        return resp.getData();
    }

    /**
     * Get Content Metadata
     * ### Get information about an individual content metadata record. 
     * @param contentMetadataId Id of content metadata (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;ContentMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentMeta> contentMetadataWithHttpInfo(Long contentMetadataId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = contentMetadataValidateBeforeCall(contentMetadataId, fields, null, null);
        Type localVarReturnType = new TypeToken<ContentMeta>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Content Metadata (asynchronously)
     * ### Get information about an individual content metadata record. 
     * @param contentMetadataId Id of content metadata (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contentMetadataAsync(Long contentMetadataId, String fields, final ApiCallback<ContentMeta> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contentMetadataValidateBeforeCall(contentMetadataId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentMeta>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createContentFavorite
     * @param body Favorite Content (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContentFavoriteCall(ContentFavorite body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/content_favorite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContentFavoriteValidateBeforeCall(ContentFavorite body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createContentFavoriteCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Favorite Content
     * ### Create favorite content
     * @param body Favorite Content (optional)
     * @return ContentFavorite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentFavorite createContentFavorite(ContentFavorite body) throws ApiException {
        ApiResponse<ContentFavorite> resp = createContentFavoriteWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Favorite Content
     * ### Create favorite content
     * @param body Favorite Content (optional)
     * @return ApiResponse&lt;ContentFavorite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentFavorite> createContentFavoriteWithHttpInfo(ContentFavorite body) throws ApiException {
        com.squareup.okhttp.Call call = createContentFavoriteValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ContentFavorite>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Favorite Content (asynchronously)
     * ### Create favorite content
     * @param body Favorite Content (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContentFavoriteAsync(ContentFavorite body, final ApiCallback<ContentFavorite> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContentFavoriteValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentFavorite>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createContentMetadataAccess
     * @param body Content Metadata Access (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createContentMetadataAccessCall(ContentMetaGroupUser body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/content_metadata_access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createContentMetadataAccessValidateBeforeCall(ContentMetaGroupUser body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createContentMetadataAccessCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Content Metadata Access
     * ### Create content metadata access. 
     * @param body Content Metadata Access (optional)
     * @return ContentMetaGroupUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentMetaGroupUser createContentMetadataAccess(ContentMetaGroupUser body) throws ApiException {
        ApiResponse<ContentMetaGroupUser> resp = createContentMetadataAccessWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Content Metadata Access
     * ### Create content metadata access. 
     * @param body Content Metadata Access (optional)
     * @return ApiResponse&lt;ContentMetaGroupUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentMetaGroupUser> createContentMetadataAccessWithHttpInfo(ContentMetaGroupUser body) throws ApiException {
        com.squareup.okhttp.Call call = createContentMetadataAccessValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ContentMetaGroupUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Content Metadata Access (asynchronously)
     * ### Create content metadata access. 
     * @param body Content Metadata Access (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createContentMetadataAccessAsync(ContentMetaGroupUser body, final ApiCallback<ContentMetaGroupUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createContentMetadataAccessValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentMetaGroupUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteContentFavorite
     * @param contentFavoriteId Id of favorite content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContentFavoriteCall(Long contentFavoriteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content_favorite/{content_favorite_id}"
            .replaceAll("\\{" + "content_favorite_id" + "\\}", apiClient.escapeString(contentFavoriteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContentFavoriteValidateBeforeCall(Long contentFavoriteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentFavoriteId' is set
        if (contentFavoriteId == null) {
            throw new ApiException("Missing the required parameter 'contentFavoriteId' when calling deleteContentFavorite(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContentFavoriteCall(contentFavoriteId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Favorite Content
     * ### Delete favorite content
     * @param contentFavoriteId Id of favorite content (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteContentFavorite(Long contentFavoriteId) throws ApiException {
        ApiResponse<String> resp = deleteContentFavoriteWithHttpInfo(contentFavoriteId);
        return resp.getData();
    }

    /**
     * Delete Favorite Content
     * ### Delete favorite content
     * @param contentFavoriteId Id of favorite content (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteContentFavoriteWithHttpInfo(Long contentFavoriteId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContentFavoriteValidateBeforeCall(contentFavoriteId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Favorite Content (asynchronously)
     * ### Delete favorite content
     * @param contentFavoriteId Id of favorite content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContentFavoriteAsync(Long contentFavoriteId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContentFavoriteValidateBeforeCall(contentFavoriteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteContentMetadataAccess
     * @param contentMetadataAccessId Id of content metadata access (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteContentMetadataAccessCall(Long contentMetadataAccessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content_metadata_access/{content_metadata_access_id}"
            .replaceAll("\\{" + "content_metadata_access_id" + "\\}", apiClient.escapeString(contentMetadataAccessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteContentMetadataAccessValidateBeforeCall(Long contentMetadataAccessId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentMetadataAccessId' is set
        if (contentMetadataAccessId == null) {
            throw new ApiException("Missing the required parameter 'contentMetadataAccessId' when calling deleteContentMetadataAccess(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteContentMetadataAccessCall(contentMetadataAccessId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Content Metadata Access
     * ### Remove content metadata access. 
     * @param contentMetadataAccessId Id of content metadata access (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteContentMetadataAccess(Long contentMetadataAccessId) throws ApiException {
        ApiResponse<String> resp = deleteContentMetadataAccessWithHttpInfo(contentMetadataAccessId);
        return resp.getData();
    }

    /**
     * Delete Content Metadata Access
     * ### Remove content metadata access. 
     * @param contentMetadataAccessId Id of content metadata access (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteContentMetadataAccessWithHttpInfo(Long contentMetadataAccessId) throws ApiException {
        com.squareup.okhttp.Call call = deleteContentMetadataAccessValidateBeforeCall(contentMetadataAccessId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Content Metadata Access (asynchronously)
     * ### Remove content metadata access. 
     * @param contentMetadataAccessId Id of content metadata access (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteContentMetadataAccessAsync(Long contentMetadataAccessId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteContentMetadataAccessValidateBeforeCall(contentMetadataAccessId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchContentFavorites
     * @param userId Match User Id (optional)
     * @param limit Number of results to return. (used with offset) (optional)
     * @param offset Number of results to skip before returning any. (used with limit) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchContentFavoritesCall(Long userId, Long limit, Long offset, String sorts, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content_favorite/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchContentFavoritesValidateBeforeCall(Long userId, Long limit, Long offset, String sorts, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchContentFavoritesCall(userId, limit, offset, sorts, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Favorite Contents
     * ### Search Favorite Content 
     * @param userId Match User Id (optional)
     * @param limit Number of results to return. (used with offset) (optional)
     * @param offset Number of results to skip before returning any. (used with limit) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param fields Requested fields. (optional)
     * @return List&lt;ContentFavorite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentFavorite> searchContentFavorites(Long userId, Long limit, Long offset, String sorts, String fields) throws ApiException {
        ApiResponse<List<ContentFavorite>> resp = searchContentFavoritesWithHttpInfo(userId, limit, offset, sorts, fields);
        return resp.getData();
    }

    /**
     * Search Favorite Contents
     * ### Search Favorite Content 
     * @param userId Match User Id (optional)
     * @param limit Number of results to return. (used with offset) (optional)
     * @param offset Number of results to skip before returning any. (used with limit) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;ContentFavorite&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentFavorite>> searchContentFavoritesWithHttpInfo(Long userId, Long limit, Long offset, String sorts, String fields) throws ApiException {
        com.squareup.okhttp.Call call = searchContentFavoritesValidateBeforeCall(userId, limit, offset, sorts, fields, null, null);
        Type localVarReturnType = new TypeToken<List<ContentFavorite>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Favorite Contents (asynchronously)
     * ### Search Favorite Content 
     * @param userId Match User Id (optional)
     * @param limit Number of results to return. (used with offset) (optional)
     * @param offset Number of results to skip before returning any. (used with limit) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchContentFavoritesAsync(Long userId, Long limit, Long offset, String sorts, String fields, final ApiCallback<List<ContentFavorite>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchContentFavoritesValidateBeforeCall(userId, limit, offset, sorts, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentFavorite>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchContentViews
     * @param viewCount Match view count (optional)
     * @param groupId Match Group Id (optional)
     * @param lookId Match look_id (optional)
     * @param dashboardId Match dashboard_id (optional)
     * @param contentMetadataId Match content metadata id (optional)
     * @param startOfWeekDate Match start of week date (optional)
     * @param allTime True if only all time view records should be returned (optional)
     * @param userId Match user id (optional)
     * @param limit Number of results to return. Use with &#x60;offset&#x60; to manage pagination of results (optional)
     * @param offset Number of results to skip before returning data (optional)
     * @param sorts Fields to sort by (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchContentViewsCall(Long viewCount, Long groupId, String lookId, String dashboardId, Long contentMetadataId, String startOfWeekDate, Boolean allTime, Long userId, Long limit, Long offset, String sorts, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/content_view/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (viewCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("view_count", viewCount));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group_id", groupId));
        if (lookId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("look_id", lookId));
        if (dashboardId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dashboard_id", dashboardId));
        if (contentMetadataId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("content_metadata_id", contentMetadataId));
        if (startOfWeekDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_of_week_date", startOfWeekDate));
        if (allTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("all_time", allTime));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchContentViewsValidateBeforeCall(Long viewCount, Long groupId, String lookId, String dashboardId, Long contentMetadataId, String startOfWeekDate, Boolean allTime, Long userId, Long limit, Long offset, String sorts, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchContentViewsCall(viewCount, groupId, lookId, dashboardId, contentMetadataId, startOfWeekDate, allTime, userId, limit, offset, sorts, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Content Views
     * ### Search Content View 
     * @param viewCount Match view count (optional)
     * @param groupId Match Group Id (optional)
     * @param lookId Match look_id (optional)
     * @param dashboardId Match dashboard_id (optional)
     * @param contentMetadataId Match content metadata id (optional)
     * @param startOfWeekDate Match start of week date (optional)
     * @param allTime True if only all time view records should be returned (optional)
     * @param userId Match user id (optional)
     * @param limit Number of results to return. Use with &#x60;offset&#x60; to manage pagination of results (optional)
     * @param offset Number of results to skip before returning data (optional)
     * @param sorts Fields to sort by (optional)
     * @param fields Requested fields. (optional)
     * @return List&lt;ContentView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentView> searchContentViews(Long viewCount, Long groupId, String lookId, String dashboardId, Long contentMetadataId, String startOfWeekDate, Boolean allTime, Long userId, Long limit, Long offset, String sorts, String fields) throws ApiException {
        ApiResponse<List<ContentView>> resp = searchContentViewsWithHttpInfo(viewCount, groupId, lookId, dashboardId, contentMetadataId, startOfWeekDate, allTime, userId, limit, offset, sorts, fields);
        return resp.getData();
    }

    /**
     * Search Content Views
     * ### Search Content View 
     * @param viewCount Match view count (optional)
     * @param groupId Match Group Id (optional)
     * @param lookId Match look_id (optional)
     * @param dashboardId Match dashboard_id (optional)
     * @param contentMetadataId Match content metadata id (optional)
     * @param startOfWeekDate Match start of week date (optional)
     * @param allTime True if only all time view records should be returned (optional)
     * @param userId Match user id (optional)
     * @param limit Number of results to return. Use with &#x60;offset&#x60; to manage pagination of results (optional)
     * @param offset Number of results to skip before returning data (optional)
     * @param sorts Fields to sort by (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;ContentView&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentView>> searchContentViewsWithHttpInfo(Long viewCount, Long groupId, String lookId, String dashboardId, Long contentMetadataId, String startOfWeekDate, Boolean allTime, Long userId, Long limit, Long offset, String sorts, String fields) throws ApiException {
        com.squareup.okhttp.Call call = searchContentViewsValidateBeforeCall(viewCount, groupId, lookId, dashboardId, contentMetadataId, startOfWeekDate, allTime, userId, limit, offset, sorts, fields, null, null);
        Type localVarReturnType = new TypeToken<List<ContentView>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Content Views (asynchronously)
     * ### Search Content View 
     * @param viewCount Match view count (optional)
     * @param groupId Match Group Id (optional)
     * @param lookId Match look_id (optional)
     * @param dashboardId Match dashboard_id (optional)
     * @param contentMetadataId Match content metadata id (optional)
     * @param startOfWeekDate Match start of week date (optional)
     * @param allTime True if only all time view records should be returned (optional)
     * @param userId Match user id (optional)
     * @param limit Number of results to return. Use with &#x60;offset&#x60; to manage pagination of results (optional)
     * @param offset Number of results to skip before returning data (optional)
     * @param sorts Fields to sort by (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchContentViewsAsync(Long viewCount, Long groupId, String lookId, String dashboardId, Long contentMetadataId, String startOfWeekDate, Boolean allTime, Long userId, Long limit, Long offset, String sorts, String fields, final ApiCallback<List<ContentView>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchContentViewsValidateBeforeCall(viewCount, groupId, lookId, dashboardId, contentMetadataId, startOfWeekDate, allTime, userId, limit, offset, sorts, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentView>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContentMetadata
     * @param contentMetadataId Id of content metadata (required)
     * @param body Content Metadata (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContentMetadataCall(Long contentMetadataId, ContentMeta body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/content_metadata/{content_metadata_id}"
            .replaceAll("\\{" + "content_metadata_id" + "\\}", apiClient.escapeString(contentMetadataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContentMetadataValidateBeforeCall(Long contentMetadataId, ContentMeta body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentMetadataId' is set
        if (contentMetadataId == null) {
            throw new ApiException("Missing the required parameter 'contentMetadataId' when calling updateContentMetadata(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateContentMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContentMetadataCall(contentMetadataId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Content Metadata
     * ### Move a piece of content. 
     * @param contentMetadataId Id of content metadata (required)
     * @param body Content Metadata (required)
     * @return ContentMeta
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentMeta updateContentMetadata(Long contentMetadataId, ContentMeta body) throws ApiException {
        ApiResponse<ContentMeta> resp = updateContentMetadataWithHttpInfo(contentMetadataId, body);
        return resp.getData();
    }

    /**
     * Update Content Metadata
     * ### Move a piece of content. 
     * @param contentMetadataId Id of content metadata (required)
     * @param body Content Metadata (required)
     * @return ApiResponse&lt;ContentMeta&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentMeta> updateContentMetadataWithHttpInfo(Long contentMetadataId, ContentMeta body) throws ApiException {
        com.squareup.okhttp.Call call = updateContentMetadataValidateBeforeCall(contentMetadataId, body, null, null);
        Type localVarReturnType = new TypeToken<ContentMeta>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Content Metadata (asynchronously)
     * ### Move a piece of content. 
     * @param contentMetadataId Id of content metadata (required)
     * @param body Content Metadata (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContentMetadataAsync(Long contentMetadataId, ContentMeta body, final ApiCallback<ContentMeta> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContentMetadataValidateBeforeCall(contentMetadataId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentMeta>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateContentMetadataAccess
     * @param contentMetadataAccessId Id of content metadata access (required)
     * @param body Content Metadata Access (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateContentMetadataAccessCall(Long contentMetadataAccessId, ContentMetaGroupUser body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/content_metadata_access/{content_metadata_access_id}"
            .replaceAll("\\{" + "content_metadata_access_id" + "\\}", apiClient.escapeString(contentMetadataAccessId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateContentMetadataAccessValidateBeforeCall(Long contentMetadataAccessId, ContentMetaGroupUser body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentMetadataAccessId' is set
        if (contentMetadataAccessId == null) {
            throw new ApiException("Missing the required parameter 'contentMetadataAccessId' when calling updateContentMetadataAccess(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateContentMetadataAccess(Async)");
        }
        

        com.squareup.okhttp.Call call = updateContentMetadataAccessCall(contentMetadataAccessId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Content Metadata Access
     * ### Update type of access for content metadata. 
     * @param contentMetadataAccessId Id of content metadata access (required)
     * @param body Content Metadata Access (required)
     * @return ContentMetaGroupUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ContentMetaGroupUser updateContentMetadataAccess(Long contentMetadataAccessId, ContentMetaGroupUser body) throws ApiException {
        ApiResponse<ContentMetaGroupUser> resp = updateContentMetadataAccessWithHttpInfo(contentMetadataAccessId, body);
        return resp.getData();
    }

    /**
     * Update Content Metadata Access
     * ### Update type of access for content metadata. 
     * @param contentMetadataAccessId Id of content metadata access (required)
     * @param body Content Metadata Access (required)
     * @return ApiResponse&lt;ContentMetaGroupUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ContentMetaGroupUser> updateContentMetadataAccessWithHttpInfo(Long contentMetadataAccessId, ContentMetaGroupUser body) throws ApiException {
        com.squareup.okhttp.Call call = updateContentMetadataAccessValidateBeforeCall(contentMetadataAccessId, body, null, null);
        Type localVarReturnType = new TypeToken<ContentMetaGroupUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Content Metadata Access (asynchronously)
     * ### Update type of access for content metadata. 
     * @param contentMetadataAccessId Id of content metadata access (required)
     * @param body Content Metadata Access (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateContentMetadataAccessAsync(Long contentMetadataAccessId, ContentMetaGroupUser body, final ApiCallback<ContentMetaGroupUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateContentMetadataAccessValidateBeforeCall(contentMetadataAccessId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ContentMetaGroupUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
