/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DBConnection;
import io.swagger.client.model.DBConnectionTestResult;
import io.swagger.client.model.DialectInfo;
import io.swagger.client.model.Error;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectionApi
 */
@Ignore
public class ConnectionApiTest {

    private final ConnectionApi api = new ConnectionApi();

    
    /**
     * Get All Connections
     *
     * ### Get information about all connections. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allConnectionsTest() throws ApiException {
        String fields = null;
        List<DBConnection> response = api.allConnections(fields);

        // TODO: test validations
    }
    
    /**
     * Get All Dialect Infos
     *
     * ### Get information about all dialects. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allDialectInfosTest() throws ApiException {
        String fields = null;
        List<DialectInfo> response = api.allDialectInfos(fields);

        // TODO: test validations
    }
    
    /**
     * Get Connection
     *
     * ### Get information about a connection. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void connectionTest() throws ApiException {
        String connectionName = null;
        String fields = null;
        DBConnection response = api.connection(connectionName, fields);

        // TODO: test validations
    }
    
    /**
     * Create Connection
     *
     * ### Create a connection using the specified configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createConnectionTest() throws ApiException {
        DBConnection body = null;
        DBConnection response = api.createConnection(body);

        // TODO: test validations
    }
    
    /**
     * Delete Connection
     *
     * ### Delete a connection. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConnectionTest() throws ApiException {
        String connectionName = null;
        String response = api.deleteConnection(connectionName);

        // TODO: test validations
    }
    
    /**
     * Test Connection
     *
     * ### Test an existing connection.  Note that a connection&#39;s &#39;dialect&#39; property has a &#39;connection_tests&#39; property that lists the specific types of tests that the connection supports.  Unsupported tests in the request will be ignored. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testConnectionTest() throws ApiException {
        String connectionName = null;
        List<String> tests = null;
        List<DBConnectionTestResult> response = api.testConnection(connectionName, tests);

        // TODO: test validations
    }
    
    /**
     * Test Connection Configuration
     *
     * ### Test a connection configuration.  Note that a connection&#39;s &#39;dialect&#39; property has a &#39;connection_tests&#39; property that lists the specific types of tests that the connection supports.  Unsupported tests in the request will be ignored. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testConnectionConfigTest() throws ApiException {
        DBConnection body = null;
        List<String> tests = null;
        List<DBConnectionTestResult> response = api.testConnectionConfig(body, tests);

        // TODO: test validations
    }
    
    /**
     * Update Connection
     *
     * ### Update a connection using the specified configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateConnectionTest() throws ApiException {
        String connectionName = null;
        DBConnection body = null;
        DBConnection response = api.updateConnection(connectionName, body);

        // TODO: test validations
    }
    
}
