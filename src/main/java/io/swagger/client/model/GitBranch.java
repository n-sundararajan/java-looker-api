/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * GitBranch
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class GitBranch {
  @SerializedName("name")
  private String name = null;

  @SerializedName("remote")
  private String remote = null;

  @SerializedName("remote_name")
  private String remoteName = null;

  @SerializedName("error")
  private String error = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("owner_name")
  private String ownerName = null;

  @SerializedName("readonly")
  private Boolean readonly = null;

  @SerializedName("personal")
  private Boolean personal = null;

  @SerializedName("is_local")
  private Boolean isLocal = null;

  @SerializedName("is_remote")
  private Boolean isRemote = null;

  @SerializedName("is_production")
  private Boolean isProduction = null;

  @SerializedName("ahead_count")
  private Long aheadCount = null;

  @SerializedName("behind_count")
  private Long behindCount = null;

  @SerializedName("commit_at")
  private Long commitAt = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * The short name on the local
   * @return name
  **/
  @ApiModelProperty(value = "The short name on the local")
  public String getName() {
    return name;
  }

   /**
   * The name of the remote
   * @return remote
  **/
  @ApiModelProperty(value = "The name of the remote")
  public String getRemote() {
    return remote;
  }

   /**
   * The short name on the remote
   * @return remoteName
  **/
  @ApiModelProperty(value = "The short name on the remote")
  public String getRemoteName() {
    return remoteName;
  }

   /**
   * Name of error
   * @return error
  **/
  @ApiModelProperty(value = "Name of error")
  public String getError() {
    return error;
  }

   /**
   * Message describing an error if present
   * @return message
  **/
  @ApiModelProperty(value = "Message describing an error if present")
  public String getMessage() {
    return message;
  }

   /**
   * Name of the owner of a personal branch
   * @return ownerName
  **/
  @ApiModelProperty(value = "Name of the owner of a personal branch")
  public String getOwnerName() {
    return ownerName;
  }

   /**
   * Whether or not this branch is readonly
   * @return readonly
  **/
  @ApiModelProperty(value = "Whether or not this branch is readonly")
  public Boolean isReadonly() {
    return readonly;
  }

   /**
   * Whether or not this branch is a personal branch - readonly for all developers except the owner
   * @return personal
  **/
  @ApiModelProperty(value = "Whether or not this branch is a personal branch - readonly for all developers except the owner")
  public Boolean isPersonal() {
    return personal;
  }

   /**
   * Whether or not a local ref exists for the branch
   * @return isLocal
  **/
  @ApiModelProperty(value = "Whether or not a local ref exists for the branch")
  public Boolean isIsLocal() {
    return isLocal;
  }

   /**
   * Whether or not a remote ref exists for the branch
   * @return isRemote
  **/
  @ApiModelProperty(value = "Whether or not a remote ref exists for the branch")
  public Boolean isIsRemote() {
    return isRemote;
  }

   /**
   * Whether or not this is the production branch
   * @return isProduction
  **/
  @ApiModelProperty(value = "Whether or not this is the production branch")
  public Boolean isIsProduction() {
    return isProduction;
  }

   /**
   * Number of commits the local branch is ahead of the remote
   * @return aheadCount
  **/
  @ApiModelProperty(value = "Number of commits the local branch is ahead of the remote")
  public Long getAheadCount() {
    return aheadCount;
  }

   /**
   * Number of commits the local branch is behind the remote
   * @return behindCount
  **/
  @ApiModelProperty(value = "Number of commits the local branch is behind the remote")
  public Long getBehindCount() {
    return behindCount;
  }

   /**
   * UNIX timestamp at which this branch was last committed.
   * @return commitAt
  **/
  @ApiModelProperty(value = "UNIX timestamp at which this branch was last committed.")
  public Long getCommitAt() {
    return commitAt;
  }

  public GitBranch can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public GitBranch putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitBranch gitBranch = (GitBranch) o;
    return Objects.equals(this.name, gitBranch.name) &&
        Objects.equals(this.remote, gitBranch.remote) &&
        Objects.equals(this.remoteName, gitBranch.remoteName) &&
        Objects.equals(this.error, gitBranch.error) &&
        Objects.equals(this.message, gitBranch.message) &&
        Objects.equals(this.ownerName, gitBranch.ownerName) &&
        Objects.equals(this.readonly, gitBranch.readonly) &&
        Objects.equals(this.personal, gitBranch.personal) &&
        Objects.equals(this.isLocal, gitBranch.isLocal) &&
        Objects.equals(this.isRemote, gitBranch.isRemote) &&
        Objects.equals(this.isProduction, gitBranch.isProduction) &&
        Objects.equals(this.aheadCount, gitBranch.aheadCount) &&
        Objects.equals(this.behindCount, gitBranch.behindCount) &&
        Objects.equals(this.commitAt, gitBranch.commitAt) &&
        Objects.equals(this.can, gitBranch.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, remote, remoteName, error, message, ownerName, readonly, personal, isLocal, isRemote, isProduction, aheadCount, behindCount, commitAt, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitBranch {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    remote: ").append(toIndentedString(remote)).append("\n");
    sb.append("    remoteName: ").append(toIndentedString(remoteName)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    personal: ").append(toIndentedString(personal)).append("\n");
    sb.append("    isLocal: ").append(toIndentedString(isLocal)).append("\n");
    sb.append("    isRemote: ").append(toIndentedString(isRemote)).append("\n");
    sb.append("    isProduction: ").append(toIndentedString(isProduction)).append("\n");
    sb.append("    aheadCount: ").append(toIndentedString(aheadCount)).append("\n");
    sb.append("    behindCount: ").append(toIndentedString(behindCount)).append("\n");
    sb.append("    commitAt: ").append(toIndentedString(commitAt)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

