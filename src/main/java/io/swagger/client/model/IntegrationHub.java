/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * IntegrationHub
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class IntegrationHub {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("official")
  private Boolean official = null;

  @SerializedName("fetch_error_message")
  private String fetchErrorMessage = null;

  @SerializedName("authorization_token")
  private String authorizationToken = null;

  @SerializedName("has_authorization_token")
  private Boolean hasAuthorizationToken = null;

  @SerializedName("legal_agreement_signed")
  private Boolean legalAgreementSigned = null;

  @SerializedName("legal_agreement_required")
  private Boolean legalAgreementRequired = null;

  @SerializedName("legal_agreement_text")
  private String legalAgreementText = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * ID of the hub.
   * @return id
  **/
  @ApiModelProperty(value = "ID of the hub.")
  public Long getId() {
    return id;
  }

  public IntegrationHub url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL of the hub.
   * @return url
  **/
  @ApiModelProperty(value = "URL of the hub.")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

   /**
   * Label of the hub.
   * @return label
  **/
  @ApiModelProperty(value = "Label of the hub.")
  public String getLabel() {
    return label;
  }

   /**
   * Whether this hub is a first-party integration hub operated by Looker.
   * @return official
  **/
  @ApiModelProperty(value = "Whether this hub is a first-party integration hub operated by Looker.")
  public Boolean isOfficial() {
    return official;
  }

   /**
   * An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable.
   * @return fetchErrorMessage
  **/
  @ApiModelProperty(value = "An error message, present if the integration hub metadata could not be fetched. If this is present, the integration hub is unusable.")
  public String getFetchErrorMessage() {
    return fetchErrorMessage;
  }

  public IntegrationHub authorizationToken(String authorizationToken) {
    this.authorizationToken = authorizationToken;
    return this;
  }

   /**
   * (Write-Only) An authorization key that will be sent to the integration hub on every request.
   * @return authorizationToken
  **/
  @ApiModelProperty(value = "(Write-Only) An authorization key that will be sent to the integration hub on every request.")
  public String getAuthorizationToken() {
    return authorizationToken;
  }

  public void setAuthorizationToken(String authorizationToken) {
    this.authorizationToken = authorizationToken;
  }

   /**
   * Whether the authorization_token is set for the hub.
   * @return hasAuthorizationToken
  **/
  @ApiModelProperty(value = "Whether the authorization_token is set for the hub.")
  public Boolean isHasAuthorizationToken() {
    return hasAuthorizationToken;
  }

   /**
   * Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true.
   * @return legalAgreementSigned
  **/
  @ApiModelProperty(value = "Whether the legal agreement message has been signed by the user. This only matters if legal_agreement_required is true.")
  public Boolean isLegalAgreementSigned() {
    return legalAgreementSigned;
  }

   /**
   * Whether the legal terms for the integration hub are required before use.
   * @return legalAgreementRequired
  **/
  @ApiModelProperty(value = "Whether the legal terms for the integration hub are required before use.")
  public Boolean isLegalAgreementRequired() {
    return legalAgreementRequired;
  }

   /**
   * The legal agreement text for this integration hub.
   * @return legalAgreementText
  **/
  @ApiModelProperty(value = "The legal agreement text for this integration hub.")
  public String getLegalAgreementText() {
    return legalAgreementText;
  }

  public IntegrationHub can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public IntegrationHub putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationHub integrationHub = (IntegrationHub) o;
    return Objects.equals(this.id, integrationHub.id) &&
        Objects.equals(this.url, integrationHub.url) &&
        Objects.equals(this.label, integrationHub.label) &&
        Objects.equals(this.official, integrationHub.official) &&
        Objects.equals(this.fetchErrorMessage, integrationHub.fetchErrorMessage) &&
        Objects.equals(this.authorizationToken, integrationHub.authorizationToken) &&
        Objects.equals(this.hasAuthorizationToken, integrationHub.hasAuthorizationToken) &&
        Objects.equals(this.legalAgreementSigned, integrationHub.legalAgreementSigned) &&
        Objects.equals(this.legalAgreementRequired, integrationHub.legalAgreementRequired) &&
        Objects.equals(this.legalAgreementText, integrationHub.legalAgreementText) &&
        Objects.equals(this.can, integrationHub.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, label, official, fetchErrorMessage, authorizationToken, hasAuthorizationToken, legalAgreementSigned, legalAgreementRequired, legalAgreementText, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationHub {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    official: ").append(toIndentedString(official)).append("\n");
    sb.append("    fetchErrorMessage: ").append(toIndentedString(fetchErrorMessage)).append("\n");
    sb.append("    authorizationToken: ").append(toIndentedString(authorizationToken)).append("\n");
    sb.append("    hasAuthorizationToken: ").append(toIndentedString(hasAuthorizationToken)).append("\n");
    sb.append("    legalAgreementSigned: ").append(toIndentedString(legalAgreementSigned)).append("\n");
    sb.append("    legalAgreementRequired: ").append(toIndentedString(legalAgreementRequired)).append("\n");
    sb.append("    legalAgreementText: ").append(toIndentedString(legalAgreementText)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

