/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AccessFilter;
import io.swagger.client.model.CredentialsApi;
import io.swagger.client.model.CredentialsApi3;
import io.swagger.client.model.CredentialsEmail;
import io.swagger.client.model.CredentialsEmbed;
import io.swagger.client.model.CredentialsGoogle;
import io.swagger.client.model.CredentialsLDAP;
import io.swagger.client.model.CredentialsLookerOpenid;
import io.swagger.client.model.CredentialsOIDC;
import io.swagger.client.model.CredentialsSaml;
import io.swagger.client.model.CredentialsTotp;
import io.swagger.client.model.Error;
import io.swagger.client.model.Role;
import io.swagger.client.model.Session;
import io.swagger.client.model.User;
import io.swagger.client.model.UserAttributeWithValue;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Get All Access Filters
     *
     * ### Access filter for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allUserAccessFiltersTest() throws ApiException {
        Long userId = null;
        String fields = null;
        List<AccessFilter> response = api.allUserAccessFilters(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get All API 3 Credentials
     *
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allUserCredentialsApi3sTest() throws ApiException {
        Long userId = null;
        String fields = null;
        List<CredentialsApi3> response = api.allUserCredentialsApi3s(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get All Embedding Credentials
     *
     * ### Embed login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allUserCredentialsEmbedsTest() throws ApiException {
        Long userId = null;
        String fields = null;
        List<CredentialsEmbed> response = api.allUserCredentialsEmbeds(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get All Web Login Sessions
     *
     * ### Web login session for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allUserSessionsTest() throws ApiException {
        Long userId = null;
        String fields = null;
        List<Session> response = api.allUserSessions(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get All Users
     *
     * ### Get information about all users. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allUsersTest() throws ApiException {
        String fields = null;
        Long page = null;
        Long perPage = null;
        String sorts = null;
        List<Long> ids = null;
        List<User> response = api.allUsers(fields, page, perPage, sorts, ids);

        // TODO: test validations
    }
    
    /**
     * Create User
     *
     * ### Create a user with the specified information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        User body = null;
        String fields = null;
        User response = api.createUser(body, fields);

        // TODO: test validations
    }
    
    /**
     * Create Access Filter
     *
     * ### Access filter for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserAccessFilterTest() throws ApiException {
        Long userId = null;
        AccessFilter body = null;
        String fields = null;
        AccessFilter response = api.createUserAccessFilter(userId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Create API Credential
     *
     * ### API login information for the specified user. This is for &#39;API Users&#39; used for the &#39;old&#39; query API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserCredentialsApiTest() throws ApiException {
        Long userId = null;
        CredentialsApi body = null;
        String fields = null;
        CredentialsApi response = api.createUserCredentialsApi(userId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Create API 3 Credential
     *
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserCredentialsApi3Test() throws ApiException {
        Long userId = null;
        CredentialsApi3 body = null;
        String fields = null;
        CredentialsApi3 response = api.createUserCredentialsApi3(userId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Create Email/Password Credential
     *
     * ### Email/password login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserCredentialsEmailTest() throws ApiException {
        Long userId = null;
        CredentialsEmail body = null;
        String fields = null;
        CredentialsEmail response = api.createUserCredentialsEmail(userId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Create Password Reset Token
     *
     * ### Create a password reset token. This will create a cryptographically secure random password reset token for the user. If the user already has a password reset token then this invalidates the old token and creates a new one. The token is expressed as the &#39;password_reset_url&#39; of the user&#39;s email/password credential object. This takes an optional &#39;expires&#39; param to indicate if the new token should be an expiring token. Tokens that expire are typically used for self-service password resets for existing users. Invitation emails for new users typically are not set to expire. The expire period is always 60 minutes when expires is enabled. This method can be called with an empty body. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserCredentialsEmailPasswordResetTest() throws ApiException {
        Long userId = null;
        Boolean expires = null;
        String fields = null;
        CredentialsEmail response = api.createUserCredentialsEmailPasswordReset(userId, expires, fields);

        // TODO: test validations
    }
    
    /**
     * Create Two-Factor Credential
     *
     * ### Two-factor login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserCredentialsTotpTest() throws ApiException {
        Long userId = null;
        CredentialsTotp body = null;
        String fields = null;
        CredentialsTotp response = api.createUserCredentialsTotp(userId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Delete User
     *
     * ### Delete the user with a specific id.  **DANGER** this will delete the user and all looks and other information owned by the user. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        Long userId = null;
        String response = api.deleteUser(userId);

        // TODO: test validations
    }
    
    /**
     * Delete Access Filter
     *
     * ### Access filter for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserAccessFilterTest() throws ApiException {
        Long userId = null;
        Long accessFilterId = null;
        String response = api.deleteUserAccessFilter(userId, accessFilterId);

        // TODO: test validations
    }
    
    /**
     * Delete User Attribute User Value
     *
     * ### Delete a user attribute value from a user&#39;s account settings.  After the user attribute value is deleted from the user&#39;s account settings, subsequent requests for the user attribute value for this user will draw from the user&#39;s groups or the default value of the user attribute. See [Get User Attribute Values](#!/User/user_attribute_user_values) for more information about how user attribute values are resolved. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserAttributeUserValueTest() throws ApiException {
        Long userId = null;
        Long userAttributeId = null;
        api.deleteUserAttributeUserValue(userId, userAttributeId);

        // TODO: test validations
    }
    
    /**
     * Delete API Credential
     *
     * ### API login information for the specified user. This is for &#39;API Users&#39; used for the &#39;old&#39; query API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserCredentialsApiTest() throws ApiException {
        Long userId = null;
        String response = api.deleteUserCredentialsApi(userId);

        // TODO: test validations
    }
    
    /**
     * Delete API 3 Credential
     *
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserCredentialsApi3Test() throws ApiException {
        Long userId = null;
        Long credentialsApi3Id = null;
        String response = api.deleteUserCredentialsApi3(userId, credentialsApi3Id);

        // TODO: test validations
    }
    
    /**
     * Delete Email/Password Credential
     *
     * ### Email/password login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserCredentialsEmailTest() throws ApiException {
        Long userId = null;
        String response = api.deleteUserCredentialsEmail(userId);

        // TODO: test validations
    }
    
    /**
     * Delete Embedding Credential
     *
     * ### Embed login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserCredentialsEmbedTest() throws ApiException {
        Long userId = null;
        Long credentialsEmbedId = null;
        String response = api.deleteUserCredentialsEmbed(userId, credentialsEmbedId);

        // TODO: test validations
    }
    
    /**
     * Delete Google Auth Credential
     *
     * ### Google authentication login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserCredentialsGoogleTest() throws ApiException {
        Long userId = null;
        String response = api.deleteUserCredentialsGoogle(userId);

        // TODO: test validations
    }
    
    /**
     * Delete LDAP Credential
     *
     * ### LDAP login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserCredentialsLdapTest() throws ApiException {
        Long userId = null;
        String response = api.deleteUserCredentialsLdap(userId);

        // TODO: test validations
    }
    
    /**
     * Delete Looker OpenId Credential
     *
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserCredentialsLookerOpenidTest() throws ApiException {
        Long userId = null;
        String response = api.deleteUserCredentialsLookerOpenid(userId);

        // TODO: test validations
    }
    
    /**
     * Delete OIDC Auth Credential
     *
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserCredentialsOidcTest() throws ApiException {
        Long userId = null;
        String response = api.deleteUserCredentialsOidc(userId);

        // TODO: test validations
    }
    
    /**
     * Delete Saml Auth Credential
     *
     * ### Saml authentication login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserCredentialsSamlTest() throws ApiException {
        Long userId = null;
        String response = api.deleteUserCredentialsSaml(userId);

        // TODO: test validations
    }
    
    /**
     * Delete Two-Factor Credential
     *
     * ### Two-factor login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserCredentialsTotpTest() throws ApiException {
        Long userId = null;
        String response = api.deleteUserCredentialsTotp(userId);

        // TODO: test validations
    }
    
    /**
     * Delete Web Login Session
     *
     * ### Web login session for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserSessionTest() throws ApiException {
        Long userId = null;
        Long sessionId = null;
        String response = api.deleteUserSession(userId, sessionId);

        // TODO: test validations
    }
    
    /**
     * Get Current User
     *
     * ### Get information about the current user; i.e. the user account currently calling the API. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void meTest() throws ApiException {
        String fields = null;
        User response = api.me(fields);

        // TODO: test validations
    }
    
    /**
     * Search Users
     *
     * ### Search users. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchUsersTest() throws ApiException {
        String fields = null;
        Long page = null;
        Long perPage = null;
        String sorts = null;
        Long id = null;
        String firstName = null;
        String lastName = null;
        Boolean verifiedLookerEmployee = null;
        String email = null;
        Boolean isDisabled = null;
        Boolean filterOr = null;
        Long contentMetadataId = null;
        Long groupId = null;
        List<User> response = api.searchUsers(fields, page, perPage, sorts, id, firstName, lastName, verifiedLookerEmployee, email, isDisabled, filterOr, contentMetadataId, groupId);

        // TODO: test validations
    }
    
    /**
     * Search User Names
     *
     * ### Search users where first_name OR last_name OR email matches a string.  The results will be AND&#39;d with any additional search parameters that are (optionally) included. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchUsersNamesTest() throws ApiException {
        String pattern = null;
        String fields = null;
        Long page = null;
        Long perPage = null;
        String sorts = null;
        Long id = null;
        String firstName = null;
        String lastName = null;
        Boolean verifiedLookerEmployee = null;
        String email = null;
        Boolean isDisabled = null;
        List<User> response = api.searchUsersNames(pattern, fields, page, perPage, sorts, id, firstName, lastName, verifiedLookerEmployee, email, isDisabled);

        // TODO: test validations
    }
    
    /**
     * Set User Attribute User Value
     *
     * ### Store a custom value for a user attribute in a user&#39;s account settings.  Per-user user attribute values take precedence over group or default values. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setUserAttributeUserValueTest() throws ApiException {
        Long userId = null;
        Long userAttributeId = null;
        UserAttributeWithValue body = null;
        UserAttributeWithValue response = api.setUserAttributeUserValue(userId, userAttributeId, body);

        // TODO: test validations
    }
    
    /**
     * Set User Roles
     *
     * ### Set roles of the user with a specific id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setUserRolesTest() throws ApiException {
        Long userId = null;
        List<Long> body = null;
        String fields = null;
        List<Role> response = api.setUserRoles(userId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Update User
     *
     * ### Update information about the user with a specific id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        Long userId = null;
        User body = null;
        String fields = null;
        User response = api.updateUser(userId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Update Access Filter
     *
     * ### Access filter for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserAccessFilterTest() throws ApiException {
        Long userId = null;
        Long accessFilterId = null;
        AccessFilter body = null;
        String fields = null;
        AccessFilter response = api.updateUserAccessFilter(userId, accessFilterId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Update Email/Password Credential
     *
     * ### Email/password login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserCredentialsEmailTest() throws ApiException {
        Long userId = null;
        CredentialsEmail body = null;
        String fields = null;
        CredentialsEmail response = api.updateUserCredentialsEmail(userId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Get User by Id
     *
     * ### Get information about the user with a specific id.  If the caller is an admin or the caller is the user being specified, then full user information will be returned. Otherwise, a minimal &#39;public&#39; variant of the user information will be returned. This contains The user name and avatar url, but no sensitive information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userTest() throws ApiException {
        Long userId = null;
        String fields = null;
        User response = api.user(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Access Filter
     *
     * ### Access filter for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userAccessFilterTest() throws ApiException {
        Long userId = null;
        Long accessFilterId = null;
        String fields = null;
        AccessFilter response = api.userAccessFilter(userId, accessFilterId, fields);

        // TODO: test validations
    }
    
    /**
     * Get User Attribute Values
     *
     * ### Get user attribute values for a given user.  Returns the values of specified user attributes (or all user attributes) for a certain user.  A value for each user attribute is searched for in the following locations, in this order: 1. in the user&#39;s account information 1. in groups that the user is a member of 1. the default value of the user attribute  If more than one group has a value defined for a user attribute, the group with the lowest rank wins.  The response will only include user attributes for which values were found. Use &#x60;include_unset&#x3D;true&#x60; to include empty records for user attributes with no value.  The value of all hidden user attributes will be blank. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userAttributeUserValuesTest() throws ApiException {
        Long userId = null;
        String fields = null;
        List<Long> userAttributeIds = null;
        Boolean allValues = null;
        Boolean includeUnset = null;
        List<UserAttributeWithValue> response = api.userAttributeUserValues(userId, fields, userAttributeIds, allValues, includeUnset);

        // TODO: test validations
    }
    
    /**
     * Get API Credential
     *
     * ### API login information for the specified user. This is for &#39;API Users&#39; used for the &#39;old&#39; query API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCredentialsApiTest() throws ApiException {
        Long userId = null;
        String fields = null;
        CredentialsApi response = api.userCredentialsApi(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get API 3 Credential
     *
     * ### API 3 login information for the specified user. This is for the newer API keys that can be added for any user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCredentialsApi3Test() throws ApiException {
        Long userId = null;
        Long credentialsApi3Id = null;
        String fields = null;
        CredentialsApi3 response = api.userCredentialsApi3(userId, credentialsApi3Id, fields);

        // TODO: test validations
    }
    
    /**
     * Get Email/Password Credential
     *
     * ### Email/password login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCredentialsEmailTest() throws ApiException {
        Long userId = null;
        String fields = null;
        CredentialsEmail response = api.userCredentialsEmail(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Embedding Credential
     *
     * ### Embed login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCredentialsEmbedTest() throws ApiException {
        Long userId = null;
        Long credentialsEmbedId = null;
        String fields = null;
        CredentialsEmbed response = api.userCredentialsEmbed(userId, credentialsEmbedId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Google Auth Credential
     *
     * ### Google authentication login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCredentialsGoogleTest() throws ApiException {
        Long userId = null;
        String fields = null;
        CredentialsGoogle response = api.userCredentialsGoogle(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get LDAP Credential
     *
     * ### LDAP login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCredentialsLdapTest() throws ApiException {
        Long userId = null;
        String fields = null;
        CredentialsLDAP response = api.userCredentialsLdap(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Looker OpenId Credential
     *
     * ### Looker Openid login information for the specified user. Used by Looker Analysts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCredentialsLookerOpenidTest() throws ApiException {
        Long userId = null;
        String fields = null;
        CredentialsLookerOpenid response = api.userCredentialsLookerOpenid(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get OIDC Auth Credential
     *
     * ### OpenID Connect (OIDC) authentication login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCredentialsOidcTest() throws ApiException {
        Long userId = null;
        String fields = null;
        CredentialsOIDC response = api.userCredentialsOidc(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Saml Auth Credential
     *
     * ### Saml authentication login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCredentialsSamlTest() throws ApiException {
        Long userId = null;
        String fields = null;
        CredentialsSaml response = api.userCredentialsSaml(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Two-Factor Credential
     *
     * ### Two-factor login information for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCredentialsTotpTest() throws ApiException {
        Long userId = null;
        String fields = null;
        CredentialsTotp response = api.userCredentialsTotp(userId, fields);

        // TODO: test validations
    }
    
    /**
     * Get User by Credential Id
     *
     * ### Get information about the user with a credential of given type with specific id.  This is used to do things like find users by their embed external_user_id. Or, find the user with a given api3 client_id, etc. The &#39;credential_type&#39; matchs the &#39;type&#39; name of the various credential types. It must be one of the values listed in the table below. The &#39;credential_id&#39; is your unique Id for the user and is specific to each type of credential.  An example using the Ruby sdk might look like:  &#x60;sdk.user_for_credential(&#39;embed&#39;, &#39;customer-4959425&#39;)&#x60;  This table shows the supported &#39;Credential Type&#39; strings. The right column is for reference; it shows which field in the given credential type is actually searched when finding a user with the supplied &#39;credential_id&#39;.  | Credential Types | Id Field Matched | | ---------------- | ---------------- | | email            | email            | | google           | google_user_id   | | saml             | saml_user_id     | | oidc             | oidc_user_id     | | ldap             | ldap_id          | | api              | token            | | api3             | client_id        | | embed            | external_user_id | | looker_openid    | email            |  NOTE: &#39;api&#39; is the legacy Looker query API. The API you are currently looking at is &#39;api3&#39;.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userForCredentialTest() throws ApiException {
        String credentialType = null;
        String credentialId = null;
        String fields = null;
        User response = api.userForCredential(credentialType, credentialId, fields);

        // TODO: test validations
    }
    
    /**
     * Get User Roles
     *
     * ### Get information about roles of the user with a specific id. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRolesTest() throws ApiException {
        Long userId = null;
        String fields = null;
        Boolean directAssociationOnly = null;
        List<Role> response = api.userRoles(userId, fields, directAssociationOnly);

        // TODO: test validations
    }
    
    /**
     * Get Web Login Session
     *
     * ### Web login session for the specified user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSessionTest() throws ApiException {
        Long userId = null;
        Long sessionId = null;
        String fields = null;
        Session response = api.userSession(userId, sessionId, fields);

        // TODO: test validations
    }
    
}
