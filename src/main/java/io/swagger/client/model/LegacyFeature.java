/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * LegacyFeature
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class LegacyFeature {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("enabled_locally")
  private Boolean enabledLocally = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("disallowed_as_of_version")
  private String disallowedAsOfVersion = null;

  @SerializedName("disable_on_upgrade_to_version")
  private String disableOnUpgradeToVersion = null;

  @SerializedName("end_of_life_version")
  private String endOfLifeVersion = null;

  @SerializedName("documentation_url")
  private String documentationUrl = null;

  @SerializedName("approximate_disable_date")
  private OffsetDateTime approximateDisableDate = null;

  @SerializedName("approximate_end_of_life_date")
  private OffsetDateTime approximateEndOfLifeDate = null;

  @SerializedName("has_disabled_on_upgrade")
  private Boolean hasDisabledOnUpgrade = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Unique Id
   * @return id
  **/
  @ApiModelProperty(value = "Unique Id")
  public String getId() {
    return id;
  }

   /**
   * Name
   * @return name
  **/
  @ApiModelProperty(value = "Name")
  public String getName() {
    return name;
  }

   /**
   * Description
   * @return description
  **/
  @ApiModelProperty(value = "Description")
  public String getDescription() {
    return description;
  }

  public LegacyFeature enabledLocally(Boolean enabledLocally) {
    this.enabledLocally = enabledLocally;
    return this;
  }

   /**
   * Whether this feature has been enabled by a user
   * @return enabledLocally
  **/
  @ApiModelProperty(value = "Whether this feature has been enabled by a user")
  public Boolean isEnabledLocally() {
    return enabledLocally;
  }

  public void setEnabledLocally(Boolean enabledLocally) {
    this.enabledLocally = enabledLocally;
  }

   /**
   * Whether this feature is currently enabled
   * @return enabled
  **/
  @ApiModelProperty(value = "Whether this feature is currently enabled")
  public Boolean isEnabled() {
    return enabled;
  }

   /**
   * Looker version where this feature became a legacy feature
   * @return disallowedAsOfVersion
  **/
  @ApiModelProperty(value = "Looker version where this feature became a legacy feature")
  public String getDisallowedAsOfVersion() {
    return disallowedAsOfVersion;
  }

   /**
   * Looker version where this feature will be automatically disabled
   * @return disableOnUpgradeToVersion
  **/
  @ApiModelProperty(value = "Looker version where this feature will be automatically disabled")
  public String getDisableOnUpgradeToVersion() {
    return disableOnUpgradeToVersion;
  }

   /**
   * Future Looker version where this feature will be removed
   * @return endOfLifeVersion
  **/
  @ApiModelProperty(value = "Future Looker version where this feature will be removed")
  public String getEndOfLifeVersion() {
    return endOfLifeVersion;
  }

   /**
   * URL for documentation about this feature
   * @return documentationUrl
  **/
  @ApiModelProperty(value = "URL for documentation about this feature")
  public String getDocumentationUrl() {
    return documentationUrl;
  }

   /**
   * Approximate date that this feature will be automatically disabled.
   * @return approximateDisableDate
  **/
  @ApiModelProperty(value = "Approximate date that this feature will be automatically disabled.")
  public OffsetDateTime getApproximateDisableDate() {
    return approximateDisableDate;
  }

   /**
   * Approximate date that this feature will be removed.
   * @return approximateEndOfLifeDate
  **/
  @ApiModelProperty(value = "Approximate date that this feature will be removed.")
  public OffsetDateTime getApproximateEndOfLifeDate() {
    return approximateEndOfLifeDate;
  }

   /**
   * Whether this legacy feature may have been automatically disabled when upgrading to the current version.
   * @return hasDisabledOnUpgrade
  **/
  @ApiModelProperty(value = "Whether this legacy feature may have been automatically disabled when upgrading to the current version.")
  public Boolean isHasDisabledOnUpgrade() {
    return hasDisabledOnUpgrade;
  }

  public LegacyFeature can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public LegacyFeature putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegacyFeature legacyFeature = (LegacyFeature) o;
    return Objects.equals(this.id, legacyFeature.id) &&
        Objects.equals(this.name, legacyFeature.name) &&
        Objects.equals(this.description, legacyFeature.description) &&
        Objects.equals(this.enabledLocally, legacyFeature.enabledLocally) &&
        Objects.equals(this.enabled, legacyFeature.enabled) &&
        Objects.equals(this.disallowedAsOfVersion, legacyFeature.disallowedAsOfVersion) &&
        Objects.equals(this.disableOnUpgradeToVersion, legacyFeature.disableOnUpgradeToVersion) &&
        Objects.equals(this.endOfLifeVersion, legacyFeature.endOfLifeVersion) &&
        Objects.equals(this.documentationUrl, legacyFeature.documentationUrl) &&
        Objects.equals(this.approximateDisableDate, legacyFeature.approximateDisableDate) &&
        Objects.equals(this.approximateEndOfLifeDate, legacyFeature.approximateEndOfLifeDate) &&
        Objects.equals(this.hasDisabledOnUpgrade, legacyFeature.hasDisabledOnUpgrade) &&
        Objects.equals(this.can, legacyFeature.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, enabledLocally, enabled, disallowedAsOfVersion, disableOnUpgradeToVersion, endOfLifeVersion, documentationUrl, approximateDisableDate, approximateEndOfLifeDate, hasDisabledOnUpgrade, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegacyFeature {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabledLocally: ").append(toIndentedString(enabledLocally)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    disallowedAsOfVersion: ").append(toIndentedString(disallowedAsOfVersion)).append("\n");
    sb.append("    disableOnUpgradeToVersion: ").append(toIndentedString(disableOnUpgradeToVersion)).append("\n");
    sb.append("    endOfLifeVersion: ").append(toIndentedString(endOfLifeVersion)).append("\n");
    sb.append("    documentationUrl: ").append(toIndentedString(documentationUrl)).append("\n");
    sb.append("    approximateDisableDate: ").append(toIndentedString(approximateDisableDate)).append("\n");
    sb.append("    approximateEndOfLifeDate: ").append(toIndentedString(approximateEndOfLifeDate)).append("\n");
    sb.append("    hasDisabledOnUpgrade: ").append(toIndentedString(hasDisabledOnUpgrade)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

