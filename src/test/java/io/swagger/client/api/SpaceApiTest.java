/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Dashboard;
import io.swagger.client.model.Error;
import io.swagger.client.model.LookWithQuery;
import io.swagger.client.model.Space;
import io.swagger.client.model.SpaceBase;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SpaceApi
 */
@Ignore
public class SpaceApiTest {

    private final SpaceApi api = new SpaceApi();

    
    /**
     * Get All Spaces
     *
     * ### Get information about all spaces.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allSpacesTest() throws ApiException {
        String fields = null;
        List<SpaceBase> response = api.allSpaces(fields);

        // TODO: test validations
    }
    
    /**
     * Create Space
     *
     * ### Create a space with specified information.  Caller must have permission to edit the parent space and to create spaces, otherwise the request returns 404 Not Found. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSpaceTest() throws ApiException {
        Space body = null;
        Space response = api.createSpace(body);

        // TODO: test validations
    }
    
    /**
     * Delete Space
     *
     * ### Delete the space with a specific id including any children spaces. **DANGER** this will delete all looks and dashboards in the space. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpaceTest() throws ApiException {
        String spaceId = null;
        String response = api.deleteSpace(spaceId);

        // TODO: test validations
    }
    
    /**
     * Search Spaces
     *
     * Search for spaces by creator id, parent id, name, etc
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchSpacesTest() throws ApiException {
        String fields = null;
        Long page = null;
        Long perPage = null;
        Long limit = null;
        Long offset = null;
        String sorts = null;
        String name = null;
        Long id = null;
        String parentId = null;
        String creatorId = null;
        List<Space> response = api.searchSpaces(fields, page, perPage, limit, offset, sorts, name, id, parentId, creatorId);

        // TODO: test validations
    }
    
    /**
     * Get Space
     *
     * ### Get information about the space with a specific id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spaceTest() throws ApiException {
        String spaceId = null;
        String fields = null;
        Space response = api.space(spaceId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Space Ancestors
     *
     * ### Get the ancestors of a space
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spaceAncestorsTest() throws ApiException {
        String spaceId = null;
        String fields = null;
        List<Space> response = api.spaceAncestors(spaceId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Space Children
     *
     * ### Get the children of a space.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spaceChildrenTest() throws ApiException {
        String spaceId = null;
        String fields = null;
        Long page = null;
        Long perPage = null;
        String sorts = null;
        List<Space> response = api.spaceChildren(spaceId, fields, page, perPage, sorts);

        // TODO: test validations
    }
    
    /**
     * Search Space Children
     *
     * ### Search the children of a space
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spaceChildrenSearchTest() throws ApiException {
        String spaceId = null;
        String fields = null;
        String sorts = null;
        String name = null;
        List<Space> response = api.spaceChildrenSearch(spaceId, fields, sorts, name);

        // TODO: test validations
    }
    
    /**
     * Get Space Dashboards
     *
     * ### Get the dashboards in a space
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spaceDashboardsTest() throws ApiException {
        String spaceId = null;
        String fields = null;
        List<Dashboard> response = api.spaceDashboards(spaceId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Space Looks
     *
     * ### Get the looks in a space
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spaceLooksTest() throws ApiException {
        String spaceId = null;
        String fields = null;
        List<LookWithQuery> response = api.spaceLooks(spaceId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Space Parent
     *
     * ### Get the parent of a space
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void spaceParentTest() throws ApiException {
        String spaceId = null;
        String fields = null;
        Space response = api.spaceParent(spaceId, fields);

        // TODO: test validations
    }
    
    /**
     * Update Space
     *
     * ### Update the space with a specific id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpaceTest() throws ApiException {
        String spaceId = null;
        Space body = null;
        Space response = api.updateSpace(spaceId, body);

        // TODO: test validations
    }
    
}
