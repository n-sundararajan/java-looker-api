/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Whitelabel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class Whitelabel {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("logo_file")
  private String logoFile = null;

  @SerializedName("logo_url")
  private String logoUrl = null;

  @SerializedName("favicon_file")
  private String faviconFile = null;

  @SerializedName("favicon_url")
  private String faviconUrl = null;

  @SerializedName("default_title")
  private String defaultTitle = null;

  @SerializedName("show_help_menu")
  private Boolean showHelpMenu = null;

  @SerializedName("show_docs")
  private Boolean showDocs = null;

  @SerializedName("show_email_sub_options")
  private Boolean showEmailSubOptions = null;

  @SerializedName("allow_looker_mentions")
  private Boolean allowLookerMentions = null;

  @SerializedName("allow_looker_links")
  private Boolean allowLookerLinks = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Unique Id
   * @return id
  **/
  @ApiModelProperty(value = "Unique Id")
  public Long getId() {
    return id;
  }

  public Whitelabel logoFile(String logoFile) {
    this.logoFile = logoFile;
    return this;
  }

   /**
   * Customer logo image. Expected base64 encoded data (write-only)
   * @return logoFile
  **/
  @ApiModelProperty(value = "Customer logo image. Expected base64 encoded data (write-only)")
  public String getLogoFile() {
    return logoFile;
  }

  public void setLogoFile(String logoFile) {
    this.logoFile = logoFile;
  }

   /**
   * Logo image url (read-only)
   * @return logoUrl
  **/
  @ApiModelProperty(value = "Logo image url (read-only)")
  public String getLogoUrl() {
    return logoUrl;
  }

  public Whitelabel faviconFile(String faviconFile) {
    this.faviconFile = faviconFile;
    return this;
  }

   /**
   * Custom favicon image. Expected base64 encoded data (write-only)
   * @return faviconFile
  **/
  @ApiModelProperty(value = "Custom favicon image. Expected base64 encoded data (write-only)")
  public String getFaviconFile() {
    return faviconFile;
  }

  public void setFaviconFile(String faviconFile) {
    this.faviconFile = faviconFile;
  }

   /**
   * Favicon image url (read-only)
   * @return faviconUrl
  **/
  @ApiModelProperty(value = "Favicon image url (read-only)")
  public String getFaviconUrl() {
    return faviconUrl;
  }

  public Whitelabel defaultTitle(String defaultTitle) {
    this.defaultTitle = defaultTitle;
    return this;
  }

   /**
   * Default page title
   * @return defaultTitle
  **/
  @ApiModelProperty(value = "Default page title")
  public String getDefaultTitle() {
    return defaultTitle;
  }

  public void setDefaultTitle(String defaultTitle) {
    this.defaultTitle = defaultTitle;
  }

  public Whitelabel showHelpMenu(Boolean showHelpMenu) {
    this.showHelpMenu = showHelpMenu;
    return this;
  }

   /**
   * Boolean to toggle showing help menus
   * @return showHelpMenu
  **/
  @ApiModelProperty(value = "Boolean to toggle showing help menus")
  public Boolean isShowHelpMenu() {
    return showHelpMenu;
  }

  public void setShowHelpMenu(Boolean showHelpMenu) {
    this.showHelpMenu = showHelpMenu;
  }

  public Whitelabel showDocs(Boolean showDocs) {
    this.showDocs = showDocs;
    return this;
  }

   /**
   * Boolean to toggle showing docs
   * @return showDocs
  **/
  @ApiModelProperty(value = "Boolean to toggle showing docs")
  public Boolean isShowDocs() {
    return showDocs;
  }

  public void setShowDocs(Boolean showDocs) {
    this.showDocs = showDocs;
  }

  public Whitelabel showEmailSubOptions(Boolean showEmailSubOptions) {
    this.showEmailSubOptions = showEmailSubOptions;
    return this;
  }

   /**
   * Boolean to toggle showing email subscription options.
   * @return showEmailSubOptions
  **/
  @ApiModelProperty(value = "Boolean to toggle showing email subscription options.")
  public Boolean isShowEmailSubOptions() {
    return showEmailSubOptions;
  }

  public void setShowEmailSubOptions(Boolean showEmailSubOptions) {
    this.showEmailSubOptions = showEmailSubOptions;
  }

  public Whitelabel allowLookerMentions(Boolean allowLookerMentions) {
    this.allowLookerMentions = allowLookerMentions;
    return this;
  }

   /**
   * Boolean to toggle mentions of Looker in emails
   * @return allowLookerMentions
  **/
  @ApiModelProperty(value = "Boolean to toggle mentions of Looker in emails")
  public Boolean isAllowLookerMentions() {
    return allowLookerMentions;
  }

  public void setAllowLookerMentions(Boolean allowLookerMentions) {
    this.allowLookerMentions = allowLookerMentions;
  }

  public Whitelabel allowLookerLinks(Boolean allowLookerLinks) {
    this.allowLookerLinks = allowLookerLinks;
    return this;
  }

   /**
   * Boolean to toggle links to Looker in emails
   * @return allowLookerLinks
  **/
  @ApiModelProperty(value = "Boolean to toggle links to Looker in emails")
  public Boolean isAllowLookerLinks() {
    return allowLookerLinks;
  }

  public void setAllowLookerLinks(Boolean allowLookerLinks) {
    this.allowLookerLinks = allowLookerLinks;
  }

  public Whitelabel can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public Whitelabel putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Whitelabel whitelabel = (Whitelabel) o;
    return Objects.equals(this.id, whitelabel.id) &&
        Objects.equals(this.logoFile, whitelabel.logoFile) &&
        Objects.equals(this.logoUrl, whitelabel.logoUrl) &&
        Objects.equals(this.faviconFile, whitelabel.faviconFile) &&
        Objects.equals(this.faviconUrl, whitelabel.faviconUrl) &&
        Objects.equals(this.defaultTitle, whitelabel.defaultTitle) &&
        Objects.equals(this.showHelpMenu, whitelabel.showHelpMenu) &&
        Objects.equals(this.showDocs, whitelabel.showDocs) &&
        Objects.equals(this.showEmailSubOptions, whitelabel.showEmailSubOptions) &&
        Objects.equals(this.allowLookerMentions, whitelabel.allowLookerMentions) &&
        Objects.equals(this.allowLookerLinks, whitelabel.allowLookerLinks) &&
        Objects.equals(this.can, whitelabel.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, logoFile, logoUrl, faviconFile, faviconUrl, defaultTitle, showHelpMenu, showDocs, showEmailSubOptions, allowLookerMentions, allowLookerLinks, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Whitelabel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logoFile: ").append(toIndentedString(logoFile)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    faviconFile: ").append(toIndentedString(faviconFile)).append("\n");
    sb.append("    faviconUrl: ").append(toIndentedString(faviconUrl)).append("\n");
    sb.append("    defaultTitle: ").append(toIndentedString(defaultTitle)).append("\n");
    sb.append("    showHelpMenu: ").append(toIndentedString(showHelpMenu)).append("\n");
    sb.append("    showDocs: ").append(toIndentedString(showDocs)).append("\n");
    sb.append("    showEmailSubOptions: ").append(toIndentedString(showEmailSubOptions)).append("\n");
    sb.append("    allowLookerMentions: ").append(toIndentedString(allowLookerMentions)).append("\n");
    sb.append("    allowLookerLinks: ").append(toIndentedString(allowLookerLinks)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

