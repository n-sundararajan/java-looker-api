/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import io.swagger.client.model.LDAPConfig;
import io.swagger.client.model.LDAPConfigTestResult;
import io.swagger.client.model.OIDCConfig;
import io.swagger.client.model.SamlConfig;
import io.swagger.client.model.SamlMetadataParseResult;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Ignore
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    
    /**
     * Create OIDC Test Configuration
     *
     * ### Create a OIDC test configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createOidcTestConfigTest() throws ApiException {
        OIDCConfig body = null;
        OIDCConfig response = api.createOidcTestConfig(body);

        // TODO: test validations
    }
    
    /**
     * Create SAML Test Configuration
     *
     * ### Create a SAML test configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSamlTestConfigTest() throws ApiException {
        SamlConfig body = null;
        SamlConfig response = api.createSamlTestConfig(body);

        // TODO: test validations
    }
    
    /**
     * Delete OIDC Test Configuration
     *
     * ### Delete a OIDC test configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteOidcTestConfigTest() throws ApiException {
        String testSlug = null;
        String response = api.deleteOidcTestConfig(testSlug);

        // TODO: test validations
    }
    
    /**
     * Delete SAML Test Configuration
     *
     * ### Delete a SAML test configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSamlTestConfigTest() throws ApiException {
        String testSlug = null;
        String response = api.deleteSamlTestConfig(testSlug);

        // TODO: test validations
    }
    
    /**
     * Parse SAML IdP Url
     *
     * ### Fetch the given url and parse it as a SAML IdP metadata document and return the result. Note that this requires that the url be public or at least at a location where the Looker instance can fetch it without requiring any special authentication. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchAndParseSamlIdpMetadataTest() throws ApiException {
        String body = null;
        SamlMetadataParseResult response = api.fetchAndParseSamlIdpMetadata(body);

        // TODO: test validations
    }
    
    /**
     * Get LDAP Configuration
     *
     * ### Get the LDAP configuration.  Looker can be optionally configured to authenticate users against an Active Directory or other LDAP directory server. LDAP setup requires coordination with an administrator of that directory server.  Only Looker administrators can read and update the LDAP configuration.  Configuring LDAP impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single LDAP configuration. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  LDAP is enabled or disabled for Looker using the **enabled** field.  Looker will never return an **auth_password** field. That value can be set, but never retrieved.  See the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void ldapConfigTest() throws ApiException {
        LDAPConfig response = api.ldapConfig();

        // TODO: test validations
    }
    
    /**
     * Get OIDC Configuration
     *
     * ### Get the OIDC configuration.  Looker can be optionally configured to authenticate users against an OpenID Connect (OIDC) authentication server. OIDC setup requires coordination with an administrator of that server.  Only Looker administrators can read and update the OIDC configuration.  Configuring OIDC impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single OIDC configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  OIDC is enabled or disabled for Looker using the **enabled** field. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oidcConfigTest() throws ApiException {
        OIDCConfig response = api.oidcConfig();

        // TODO: test validations
    }
    
    /**
     * Get OIDC Test Configuration
     *
     * ### Get a OIDC test configuration by test_slug. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void oidcTestConfigTest() throws ApiException {
        String testSlug = null;
        OIDCConfig response = api.oidcTestConfig(testSlug);

        // TODO: test validations
    }
    
    /**
     * Parse SAML IdP XML
     *
     * ### Parse the given xml as a SAML IdP metadata document and return the result. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void parseSamlIdpMetadataTest() throws ApiException {
        String body = null;
        SamlMetadataParseResult response = api.parseSamlIdpMetadata(body);

        // TODO: test validations
    }
    
    /**
     * Get SAML Configuration
     *
     * ### Get the SAML configuration.  Looker can be optionally configured to authenticate users against a SAML authentication server. SAML setup requires coordination with an administrator of that server.  Only Looker administrators can read and update the SAML configuration.  Configuring SAML impacts authentication for all users. This configuration should be done carefully.  Looker maintains a single SAML configuation. It can be read and updated.       Updates only succeed if the new state will be valid (in the sense that all required fields are populated);       it is up to you to ensure that the configuration is appropriate and correct).  SAML is enabled or disabled for Looker using the **enabled** field. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void samlConfigTest() throws ApiException {
        SamlConfig response = api.samlConfig();

        // TODO: test validations
    }
    
    /**
     * Get SAML Test Configuration
     *
     * ### Get a SAML test configuration by test_slug. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void samlTestConfigTest() throws ApiException {
        String testSlug = null;
        SamlConfig response = api.samlTestConfig(testSlug);

        // TODO: test validations
    }
    
    /**
     * Test LDAP Auth
     *
     * ### Test the connection authentication settings for an LDAP configuration.  This tests that the connection is possible and that a &#39;server&#39; account to be used by Looker can       authenticate to the LDAP server given connection and authentication information.  **connection_host**, **connection_port**, and **auth_username**, are required.       **connection_tls** and **auth_password** are optional.  Example: &#x60;&#x60;&#x60;json {   \&quot;connection_host\&quot;: \&quot;ldap.example.com\&quot;,   \&quot;connection_port\&quot;: \&quot;636\&quot;,   \&quot;connection_tls\&quot;: true,   \&quot;auth_username\&quot;: \&quot;cn&#x3D;looker,dc&#x3D;example,dc&#x3D;com\&quot;,   \&quot;auth_password\&quot;: \&quot;secret\&quot; } &#x60;&#x60;&#x60;  Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.  The active LDAP settings are not modified.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testLdapConfigAuthTest() throws ApiException {
        LDAPConfig body = null;
        LDAPConfigTestResult response = api.testLdapConfigAuth(body);

        // TODO: test validations
    }
    
    /**
     * Test LDAP Connection
     *
     * ### Test the connection settings for an LDAP configuration.  This tests that the connection is possible given a connection_host and connection_port.  **connection_host** and **connection_port** are required. **connection_tls** is optional.  Example: &#x60;&#x60;&#x60;json {   \&quot;connection_host\&quot;: \&quot;ldap.example.com\&quot;,   \&quot;connection_port\&quot;: \&quot;636\&quot;,   \&quot;connection_tls\&quot;: true } &#x60;&#x60;&#x60;  No authentication to the LDAP server is attempted.  The active LDAP settings are not modified. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testLdapConfigConnectionTest() throws ApiException {
        LDAPConfig body = null;
        LDAPConfigTestResult response = api.testLdapConfigConnection(body);

        // TODO: test validations
    }
    
    /**
     * Test LDAP User Auth
     *
     * ### Test the user authentication settings for an LDAP configuration.  This test accepts a full LDAP configuration along with a username/password pair and attempts to       authenticate the user with the LDAP server. The configuration is validated before attempting the       authentication.  Looker will never return an **auth_password**. If this request omits the **auth_password** field, then       the **auth_password** value from the active config (if present) will be used for the test.  **test_ldap_user** and **test_ldap_password** are required.  The active LDAP settings are not modified.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testLdapConfigUserAuthTest() throws ApiException {
        LDAPConfig body = null;
        LDAPConfigTestResult response = api.testLdapConfigUserAuth(body);

        // TODO: test validations
    }
    
    /**
     * Test LDAP User Info
     *
     * ### Test the user authentication settings for an LDAP configuration without authenticating the user.  This test will let you easily test the mapping for user properties and roles for any user without      needing to authenticate as that user.  This test accepts a full LDAP configuration along with a username and attempts to find the full info      for the user from the LDAP server without actually authenticating the user. So, user password is not      required.The configuration is validated before attempting to contact the server.  **test_ldap_user** is required.  The active LDAP settings are not modified.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testLdapConfigUserInfoTest() throws ApiException {
        LDAPConfig body = null;
        LDAPConfigTestResult response = api.testLdapConfigUserInfo(body);

        // TODO: test validations
    }
    
    /**
     * Update LDAP Configuration
     *
     * ### Update the LDAP configuration.  Configuring LDAP impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the LDAP configuration.  LDAP is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any LDAP setting changes be tested using the APIs below before being set globally.  See the [Looker LDAP docs](https://www.looker.com/docs/r/api/ldap_setup) for additional information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLdapConfigTest() throws ApiException {
        LDAPConfig body = null;
        LDAPConfig response = api.updateLdapConfig(body);

        // TODO: test validations
    }
    
    /**
     * Update OIDC Configuration
     *
     * ### Update the OIDC configuration.  Configuring OIDC impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the OIDC configuration.  OIDC is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any OIDC setting changes be tested using the APIs below before being set globally. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOidcConfigTest() throws ApiException {
        OIDCConfig body = null;
        OIDCConfig response = api.updateOidcConfig(body);

        // TODO: test validations
    }
    
    /**
     * Update SAML Configuration
     *
     * ### Update the SAML configuration.  Configuring SAML impacts authentication for all users. This configuration should be done carefully.  Only Looker administrators can read and update the SAML configuration.  SAML is enabled or disabled for Looker using the **enabled** field.  It is **highly** recommended that any SAML setting changes be tested using the APIs below before being set globally. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSamlConfigTest() throws ApiException {
        SamlConfig body = null;
        SamlConfig response = api.updateSamlConfig(body);

        // TODO: test validations
    }
    
}
