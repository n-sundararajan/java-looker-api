/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Dashboard;
import io.swagger.client.model.DashboardBase;
import io.swagger.client.model.Error;
import io.swagger.client.model.Prefetch;
import io.swagger.client.model.PrefetchDashboardFilterValue;
import io.swagger.client.model.PrefetchDashboardRequest;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DashboardApi
 */
@Ignore
public class DashboardApiTest {

    private final DashboardApi api = new DashboardApi();

    
    /**
     * Get All Dashboards
     *
     * Get information about all dashboards.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allDashboardsTest() throws ApiException {
        String fields = null;
        List<DashboardBase> response = api.allDashboards(fields);

        // TODO: test validations
    }
    
    /**
     * Create Dashboard
     *
     * ### Create a dashboard with specified information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDashboardTest() throws ApiException {
        Dashboard body = null;
        Dashboard response = api.createDashboard(body);

        // TODO: test validations
    }
    
    /**
     * Create Dashboard Prefetch
     *
     * ### Create a prefetch for a dashboard with the specified information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDashboardPrefetchTest() throws ApiException {
        String dashboardId = null;
        PrefetchDashboardRequest body = null;
        PrefetchDashboardRequest response = api.createDashboardPrefetch(dashboardId, body);

        // TODO: test validations
    }
    
    /**
     * Get Dashboard
     *
     * ### Get information about the dashboard with a specific id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardTest() throws ApiException {
        String dashboardId = null;
        String fields = null;
        Dashboard response = api.dashboard(dashboardId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Dashboard Prefetch
     *
     * ### Get a prefetch for a dashboard with the specified information. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void dashboardPrefetchTest() throws ApiException {
        String dashboardId = null;
        List<PrefetchDashboardFilterValue> dashboardFilters = null;
        Prefetch response = api.dashboardPrefetch(dashboardId, dashboardFilters);

        // TODO: test validations
    }
    
    /**
     * Delete Dashboard
     *
     * ### Delete the dashboard with a specific id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDashboardTest() throws ApiException {
        String dashboardId = null;
        String response = api.deleteDashboard(dashboardId);

        // TODO: test validations
    }
    
    /**
     * Search Dashboards
     *
     * Get information about all dashboards.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchDashboardsTest() throws ApiException {
        String fields = null;
        Long id = null;
        Long page = null;
        Long perPage = null;
        Long limit = null;
        Long offset = null;
        String sorts = null;
        String title = null;
        String description = null;
        Long contentFavoriteId = null;
        String spaceId = null;
        String deleted = null;
        String userId = null;
        String viewCount = null;
        List<Dashboard> response = api.searchDashboards(fields, id, page, perPage, limit, offset, sorts, title, description, contentFavoriteId, spaceId, deleted, userId, viewCount);

        // TODO: test validations
    }
    
    /**
     * Update Dashboard
     *
     * ### Update the dashboard with a specific id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDashboardTest() throws ApiException {
        String dashboardId = null;
        Dashboard body = null;
        Dashboard response = api.updateDashboard(dashboardId, body);

        // TODO: test validations
    }
    
}
