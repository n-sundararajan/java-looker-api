/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.ScheduledPlan;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScheduledPlanApi {
    private ApiClient apiClient;

    public ScheduledPlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScheduledPlanApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for allScheduledPlans
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allScheduledPlansCall(Long userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduled_plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allScheduledPlansValidateBeforeCall(Long userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = allScheduledPlansCall(userId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All Scheduled Plans
     * ### List all scheduled plans which belong to the requesting user 
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @return List&lt;ScheduledPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ScheduledPlan> allScheduledPlans(Long userId, String fields) throws ApiException {
        ApiResponse<List<ScheduledPlan>> resp = allScheduledPlansWithHttpInfo(userId, fields);
        return resp.getData();
    }

    /**
     * Get All Scheduled Plans
     * ### List all scheduled plans which belong to the requesting user 
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;ScheduledPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ScheduledPlan>> allScheduledPlansWithHttpInfo(Long userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = allScheduledPlansValidateBeforeCall(userId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<ScheduledPlan>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Scheduled Plans (asynchronously)
     * ### List all scheduled plans which belong to the requesting user 
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allScheduledPlansAsync(Long userId, String fields, final ApiCallback<List<ScheduledPlan>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allScheduledPlansValidateBeforeCall(userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ScheduledPlan>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createScheduledPlan
     * @param body Scheduled Plan (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createScheduledPlanCall(ScheduledPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scheduled_plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createScheduledPlanValidateBeforeCall(ScheduledPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createScheduledPlanCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Scheduled Plan
     * ### Schedule a Look or Dashboard by creating a scheduled plan.  Admins can create scheduled plans on behalf of other users by specifying a user id. 
     * @param body Scheduled Plan (optional)
     * @return ScheduledPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScheduledPlan createScheduledPlan(ScheduledPlan body) throws ApiException {
        ApiResponse<ScheduledPlan> resp = createScheduledPlanWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Scheduled Plan
     * ### Schedule a Look or Dashboard by creating a scheduled plan.  Admins can create scheduled plans on behalf of other users by specifying a user id. 
     * @param body Scheduled Plan (optional)
     * @return ApiResponse&lt;ScheduledPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScheduledPlan> createScheduledPlanWithHttpInfo(ScheduledPlan body) throws ApiException {
        com.squareup.okhttp.Call call = createScheduledPlanValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ScheduledPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Scheduled Plan (asynchronously)
     * ### Schedule a Look or Dashboard by creating a scheduled plan.  Admins can create scheduled plans on behalf of other users by specifying a user id. 
     * @param body Scheduled Plan (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createScheduledPlanAsync(ScheduledPlan body, final ApiCallback<ScheduledPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createScheduledPlanValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScheduledPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteScheduledPlan
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteScheduledPlanCall(Long scheduledPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduled_plans/{scheduled_plan_id}"
            .replaceAll("\\{" + "scheduled_plan_id" + "\\}", apiClient.escapeString(scheduledPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteScheduledPlanValidateBeforeCall(Long scheduledPlanId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanId' is set
        if (scheduledPlanId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanId' when calling deleteScheduledPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteScheduledPlanCall(scheduledPlanId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Scheduled Plan
     * ### Delete the scheduled plan with the specified id.  Admins can delete other users&#39; Scheduled Plans. 
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteScheduledPlan(Long scheduledPlanId) throws ApiException {
        ApiResponse<String> resp = deleteScheduledPlanWithHttpInfo(scheduledPlanId);
        return resp.getData();
    }

    /**
     * Delete Scheduled Plan
     * ### Delete the scheduled plan with the specified id.  Admins can delete other users&#39; Scheduled Plans. 
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteScheduledPlanWithHttpInfo(Long scheduledPlanId) throws ApiException {
        com.squareup.okhttp.Call call = deleteScheduledPlanValidateBeforeCall(scheduledPlanId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Scheduled Plan (asynchronously)
     * ### Delete the scheduled plan with the specified id.  Admins can delete other users&#39; Scheduled Plans. 
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteScheduledPlanAsync(Long scheduledPlanId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteScheduledPlanValidateBeforeCall(scheduledPlanId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scheduledPlan
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scheduledPlanCall(Long scheduledPlanId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduled_plans/{scheduled_plan_id}"
            .replaceAll("\\{" + "scheduled_plan_id" + "\\}", apiClient.escapeString(scheduledPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scheduledPlanValidateBeforeCall(Long scheduledPlanId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanId' is set
        if (scheduledPlanId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanId' when calling scheduledPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = scheduledPlanCall(scheduledPlanId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Scheduled Plan
     * ### Get information about a scheduled plan.  Admins can fetch information about other users&#39; Scheduled Plans. 
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @param fields Requested fields. (optional)
     * @return ScheduledPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScheduledPlan scheduledPlan(Long scheduledPlanId, String fields) throws ApiException {
        ApiResponse<ScheduledPlan> resp = scheduledPlanWithHttpInfo(scheduledPlanId, fields);
        return resp.getData();
    }

    /**
     * Get Scheduled Plan
     * ### Get information about a scheduled plan.  Admins can fetch information about other users&#39; Scheduled Plans. 
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;ScheduledPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScheduledPlan> scheduledPlanWithHttpInfo(Long scheduledPlanId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = scheduledPlanValidateBeforeCall(scheduledPlanId, fields, null, null);
        Type localVarReturnType = new TypeToken<ScheduledPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Scheduled Plan (asynchronously)
     * ### Get information about a scheduled plan.  Admins can fetch information about other users&#39; Scheduled Plans. 
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduledPlanAsync(Long scheduledPlanId, String fields, final ApiCallback<ScheduledPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduledPlanValidateBeforeCall(scheduledPlanId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScheduledPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scheduledPlanRunOnce
     * @param body Scheduled Plan (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scheduledPlanRunOnceCall(ScheduledPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scheduled_plans/run_once";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scheduledPlanRunOnceValidateBeforeCall(ScheduledPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = scheduledPlanRunOnceCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run Scheduled Plan Once
     * ### Schedule a Look or Dashboard to run once _now_ with a scheduled plan.  This can be useful for testing a Scheduled Plan before committing to a production schedule.  Admins can create scheduled plans on behalf of other users by specifying a user id. 
     * @param body Scheduled Plan (optional)
     * @return ScheduledPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScheduledPlan scheduledPlanRunOnce(ScheduledPlan body) throws ApiException {
        ApiResponse<ScheduledPlan> resp = scheduledPlanRunOnceWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Run Scheduled Plan Once
     * ### Schedule a Look or Dashboard to run once _now_ with a scheduled plan.  This can be useful for testing a Scheduled Plan before committing to a production schedule.  Admins can create scheduled plans on behalf of other users by specifying a user id. 
     * @param body Scheduled Plan (optional)
     * @return ApiResponse&lt;ScheduledPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScheduledPlan> scheduledPlanRunOnceWithHttpInfo(ScheduledPlan body) throws ApiException {
        com.squareup.okhttp.Call call = scheduledPlanRunOnceValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ScheduledPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run Scheduled Plan Once (asynchronously)
     * ### Schedule a Look or Dashboard to run once _now_ with a scheduled plan.  This can be useful for testing a Scheduled Plan before committing to a production schedule.  Admins can create scheduled plans on behalf of other users by specifying a user id. 
     * @param body Scheduled Plan (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduledPlanRunOnceAsync(ScheduledPlan body, final ApiCallback<ScheduledPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduledPlanRunOnceValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScheduledPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scheduledPlansForDashboard
     * @param dashboardId Dashboard Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scheduledPlansForDashboardCall(Long dashboardId, Long userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduled_plans/dashboard/{dashboard_id}"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scheduledPlansForDashboardValidateBeforeCall(Long dashboardId, Long userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling scheduledPlansForDashboard(Async)");
        }
        

        com.squareup.okhttp.Call call = scheduledPlansForDashboardCall(dashboardId, userId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scheduled Plans for Dashboard
     * ### Get scheduled plans by using a dashboard id for the requesting user or a specified user id (with :see_schedules permission) 
     * @param dashboardId Dashboard Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @return List&lt;ScheduledPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ScheduledPlan> scheduledPlansForDashboard(Long dashboardId, Long userId, String fields) throws ApiException {
        ApiResponse<List<ScheduledPlan>> resp = scheduledPlansForDashboardWithHttpInfo(dashboardId, userId, fields);
        return resp.getData();
    }

    /**
     * Scheduled Plans for Dashboard
     * ### Get scheduled plans by using a dashboard id for the requesting user or a specified user id (with :see_schedules permission) 
     * @param dashboardId Dashboard Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;ScheduledPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ScheduledPlan>> scheduledPlansForDashboardWithHttpInfo(Long dashboardId, Long userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = scheduledPlansForDashboardValidateBeforeCall(dashboardId, userId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<ScheduledPlan>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scheduled Plans for Dashboard (asynchronously)
     * ### Get scheduled plans by using a dashboard id for the requesting user or a specified user id (with :see_schedules permission) 
     * @param dashboardId Dashboard Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduledPlansForDashboardAsync(Long dashboardId, Long userId, String fields, final ApiCallback<List<ScheduledPlan>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduledPlansForDashboardValidateBeforeCall(dashboardId, userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ScheduledPlan>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scheduledPlansForLook
     * @param lookId Look Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scheduledPlansForLookCall(Long lookId, Long userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduled_plans/look/{look_id}"
            .replaceAll("\\{" + "look_id" + "\\}", apiClient.escapeString(lookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scheduledPlansForLookValidateBeforeCall(Long lookId, Long userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookId' is set
        if (lookId == null) {
            throw new ApiException("Missing the required parameter 'lookId' when calling scheduledPlansForLook(Async)");
        }
        

        com.squareup.okhttp.Call call = scheduledPlansForLookCall(lookId, userId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scheduled Plans for Look
     * ### Get scheduled plans by using a look id for the requesting user or a specified user id (with :see_schedules permission) 
     * @param lookId Look Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @return List&lt;ScheduledPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ScheduledPlan> scheduledPlansForLook(Long lookId, Long userId, String fields) throws ApiException {
        ApiResponse<List<ScheduledPlan>> resp = scheduledPlansForLookWithHttpInfo(lookId, userId, fields);
        return resp.getData();
    }

    /**
     * Scheduled Plans for Look
     * ### Get scheduled plans by using a look id for the requesting user or a specified user id (with :see_schedules permission) 
     * @param lookId Look Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;ScheduledPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ScheduledPlan>> scheduledPlansForLookWithHttpInfo(Long lookId, Long userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = scheduledPlansForLookValidateBeforeCall(lookId, userId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<ScheduledPlan>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scheduled Plans for Look (asynchronously)
     * ### Get scheduled plans by using a look id for the requesting user or a specified user id (with :see_schedules permission) 
     * @param lookId Look Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduledPlansForLookAsync(Long lookId, Long userId, String fields, final ApiCallback<List<ScheduledPlan>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduledPlansForLookValidateBeforeCall(lookId, userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ScheduledPlan>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scheduledPlansForLookmlDashboard
     * @param lookmlDashboardId LookML Dashboard Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scheduledPlansForLookmlDashboardCall(Long lookmlDashboardId, Long userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduled_plans/lookml_dashboard/{lookml_dashboard_id}"
            .replaceAll("\\{" + "lookml_dashboard_id" + "\\}", apiClient.escapeString(lookmlDashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scheduledPlansForLookmlDashboardValidateBeforeCall(Long lookmlDashboardId, Long userId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookmlDashboardId' is set
        if (lookmlDashboardId == null) {
            throw new ApiException("Missing the required parameter 'lookmlDashboardId' when calling scheduledPlansForLookmlDashboard(Async)");
        }
        

        com.squareup.okhttp.Call call = scheduledPlansForLookmlDashboardCall(lookmlDashboardId, userId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scheduled Plans for LookML Dashboard
     * ### Get scheduled plans by using a LookML dashboard id for the requesting user or a specified user id (with :see_schedules permission) 
     * @param lookmlDashboardId LookML Dashboard Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @return List&lt;ScheduledPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ScheduledPlan> scheduledPlansForLookmlDashboard(Long lookmlDashboardId, Long userId, String fields) throws ApiException {
        ApiResponse<List<ScheduledPlan>> resp = scheduledPlansForLookmlDashboardWithHttpInfo(lookmlDashboardId, userId, fields);
        return resp.getData();
    }

    /**
     * Scheduled Plans for LookML Dashboard
     * ### Get scheduled plans by using a LookML dashboard id for the requesting user or a specified user id (with :see_schedules permission) 
     * @param lookmlDashboardId LookML Dashboard Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;ScheduledPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ScheduledPlan>> scheduledPlansForLookmlDashboardWithHttpInfo(Long lookmlDashboardId, Long userId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = scheduledPlansForLookmlDashboardValidateBeforeCall(lookmlDashboardId, userId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<ScheduledPlan>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scheduled Plans for LookML Dashboard (asynchronously)
     * ### Get scheduled plans by using a LookML dashboard id for the requesting user or a specified user id (with :see_schedules permission) 
     * @param lookmlDashboardId LookML Dashboard Id (required)
     * @param userId User Id (default is requesting user if not specified) (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduledPlansForLookmlDashboardAsync(Long lookmlDashboardId, Long userId, String fields, final ApiCallback<List<ScheduledPlan>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduledPlansForLookmlDashboardValidateBeforeCall(lookmlDashboardId, userId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ScheduledPlan>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for scheduledPlansForSpace
     * @param spaceId Space Id (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call scheduledPlansForSpaceCall(Long spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scheduled_plans/space/{space_id}"
            .replaceAll("\\{" + "space_id" + "\\}", apiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call scheduledPlansForSpaceValidateBeforeCall(Long spaceId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling scheduledPlansForSpace(Async)");
        }
        

        com.squareup.okhttp.Call call = scheduledPlansForSpaceCall(spaceId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Scheduled Plans for Space
     * ### Get scheduled plans by using a space id for the requesting user. 
     * @param spaceId Space Id (required)
     * @param fields Requested fields. (optional)
     * @return List&lt;ScheduledPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ScheduledPlan> scheduledPlansForSpace(Long spaceId, String fields) throws ApiException {
        ApiResponse<List<ScheduledPlan>> resp = scheduledPlansForSpaceWithHttpInfo(spaceId, fields);
        return resp.getData();
    }

    /**
     * Scheduled Plans for Space
     * ### Get scheduled plans by using a space id for the requesting user. 
     * @param spaceId Space Id (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;ScheduledPlan&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ScheduledPlan>> scheduledPlansForSpaceWithHttpInfo(Long spaceId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = scheduledPlansForSpaceValidateBeforeCall(spaceId, fields, null, null);
        Type localVarReturnType = new TypeToken<List<ScheduledPlan>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Scheduled Plans for Space (asynchronously)
     * ### Get scheduled plans by using a space id for the requesting user. 
     * @param spaceId Space Id (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call scheduledPlansForSpaceAsync(Long spaceId, String fields, final ApiCallback<List<ScheduledPlan>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = scheduledPlansForSpaceValidateBeforeCall(spaceId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ScheduledPlan>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateScheduledPlan
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @param body Scheduled Plan (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateScheduledPlanCall(Long scheduledPlanId, ScheduledPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/scheduled_plans/{scheduled_plan_id}"
            .replaceAll("\\{" + "scheduled_plan_id" + "\\}", apiClient.escapeString(scheduledPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateScheduledPlanValidateBeforeCall(Long scheduledPlanId, ScheduledPlan body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'scheduledPlanId' is set
        if (scheduledPlanId == null) {
            throw new ApiException("Missing the required parameter 'scheduledPlanId' when calling updateScheduledPlan(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateScheduledPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = updateScheduledPlanCall(scheduledPlanId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Scheduled Plan
     * ### Update the scheduled plan with the specified id.  Admins can update other users&#39; Scheduled Plans. 
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @param body Scheduled Plan (required)
     * @return ScheduledPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ScheduledPlan updateScheduledPlan(Long scheduledPlanId, ScheduledPlan body) throws ApiException {
        ApiResponse<ScheduledPlan> resp = updateScheduledPlanWithHttpInfo(scheduledPlanId, body);
        return resp.getData();
    }

    /**
     * Update Scheduled Plan
     * ### Update the scheduled plan with the specified id.  Admins can update other users&#39; Scheduled Plans. 
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @param body Scheduled Plan (required)
     * @return ApiResponse&lt;ScheduledPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ScheduledPlan> updateScheduledPlanWithHttpInfo(Long scheduledPlanId, ScheduledPlan body) throws ApiException {
        com.squareup.okhttp.Call call = updateScheduledPlanValidateBeforeCall(scheduledPlanId, body, null, null);
        Type localVarReturnType = new TypeToken<ScheduledPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Scheduled Plan (asynchronously)
     * ### Update the scheduled plan with the specified id.  Admins can update other users&#39; Scheduled Plans. 
     * @param scheduledPlanId Scheduled Plan Id (required)
     * @param body Scheduled Plan (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateScheduledPlanAsync(Long scheduledPlanId, ScheduledPlan body, final ApiCallback<ScheduledPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateScheduledPlanValidateBeforeCall(scheduledPlanId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ScheduledPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
