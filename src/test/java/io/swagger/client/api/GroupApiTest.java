/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import io.swagger.client.model.Group;
import io.swagger.client.model.GroupIdForGroupInclusion;
import io.swagger.client.model.GroupIdForGroupUserInclusion;
import io.swagger.client.model.User;
import io.swagger.client.model.UserAttributeGroupValue;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupApi
 */
@Ignore
public class GroupApiTest {

    private final GroupApi api = new GroupApi();

    
    /**
     * Add a Group to Group
     *
     * ### Adds a new group to a group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGroupGroupTest() throws ApiException {
        Long groupId = null;
        GroupIdForGroupInclusion body = null;
        Group response = api.addGroupGroup(groupId, body);

        // TODO: test validations
    }
    
    /**
     * Add a User to Group
     *
     * ### Adds a new user to a group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addGroupUserTest() throws ApiException {
        Long groupId = null;
        GroupIdForGroupUserInclusion body = null;
        User response = api.addGroupUser(groupId, body);

        // TODO: test validations
    }
    
    /**
     * Get All Groups in Group
     *
     * ### Get information about all the groups in a group 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allGroupGroupsTest() throws ApiException {
        Long groupId = null;
        String fields = null;
        List<Group> response = api.allGroupGroups(groupId, fields);

        // TODO: test validations
    }
    
    /**
     * Get All Users in Group
     *
     * ### Get information about all the users directly included in a group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allGroupUsersTest() throws ApiException {
        Long groupId = null;
        String fields = null;
        Long page = null;
        Long perPage = null;
        String sorts = null;
        List<User> response = api.allGroupUsers(groupId, fields, page, perPage, sorts);

        // TODO: test validations
    }
    
    /**
     * Get All Groups
     *
     * ### Get information about all groups. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allGroupsTest() throws ApiException {
        String fields = null;
        Long page = null;
        Long perPage = null;
        String sorts = null;
        List<Long> ids = null;
        Long contentMetadataId = null;
        Boolean canAddToContentMetadata = null;
        List<Group> response = api.allGroups(fields, page, perPage, sorts, ids, contentMetadataId, canAddToContentMetadata);

        // TODO: test validations
    }
    
    /**
     * Create Group
     *
     * ### Creates a new group (admin only). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        Group body = null;
        String fields = null;
        Group response = api.createGroup(body, fields);

        // TODO: test validations
    }
    
    /**
     * Delete Group
     *
     * ### Deletes a group (admin only). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        Long groupId = null;
        String response = api.deleteGroup(groupId);

        // TODO: test validations
    }
    
    /**
     * Deletes a Group from Group
     *
     * ### Removes a group from a group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupFromGroupTest() throws ApiException {
        Long groupId = null;
        Long deletingGroupId = null;
        api.deleteGroupFromGroup(groupId, deletingGroupId);

        // TODO: test validations
    }
    
    /**
     * Remove a User from Group
     *
     * ### Removes a user from a group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteGroupUserTest() throws ApiException {
        Long groupId = null;
        Long userId = null;
        api.deleteGroupUser(groupId, userId);

        // TODO: test validations
    }
    
    /**
     * Delete User Attribute Group Value
     *
     * ### Remove a user attribute value from a group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserAttributeGroupValueTest() throws ApiException {
        Long groupId = null;
        Long userAttributeId = null;
        api.deleteUserAttributeGroupValue(groupId, userAttributeId);

        // TODO: test validations
    }
    
    /**
     * Get Group
     *
     * ### Get information about a group. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groupTest() throws ApiException {
        Long groupId = null;
        String fields = null;
        Group response = api.group(groupId, fields);

        // TODO: test validations
    }
    
    /**
     * Update Group
     *
     * ### Updates the a group (admin only).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        Long groupId = null;
        Group body = null;
        String fields = null;
        Group response = api.updateGroup(groupId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Set User Attribute Group Value
     *
     * ### Set the value of a user attribute for a group.  For information about how user attribute values are calculated, see [Set User Attribute Group Values](#!/UserAttribute/set_user_attribute_group_values). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserAttributeGroupValueTest() throws ApiException {
        Long groupId = null;
        Long userAttributeId = null;
        UserAttributeGroupValue body = null;
        UserAttributeGroupValue response = api.updateUserAttributeGroupValue(groupId, userAttributeId, body);

        // TODO: test validations
    }
    
}
