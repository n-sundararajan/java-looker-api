/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DataActionForm;
import io.swagger.client.model.Error;
import io.swagger.client.model.Integration;
import io.swagger.client.model.IntegrationHub;
import io.swagger.client.model.ValidationError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IntegrationApi
 */
@Ignore
public class IntegrationApiTest {

    private final IntegrationApi api = new IntegrationApi();

    
    /**
     * Accept Integration Hub Legal Agreement
     *
     * Accepts the legal agreement for a given integration hub. This only works for integration hubs that have legal_agreement_required set to true and legal_agreement_signed set to false.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acceptIntegrationHubLegalAgreementTest() throws ApiException {
        Long integrationHubId = null;
        IntegrationHub response = api.acceptIntegrationHubLegalAgreement(integrationHubId);

        // TODO: test validations
    }
    
    /**
     * Get All Integration Hubs
     *
     * ### Get information about all Integration Hubs. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allIntegrationHubsTest() throws ApiException {
        String fields = null;
        List<IntegrationHub> response = api.allIntegrationHubs(fields);

        // TODO: test validations
    }
    
    /**
     * Get All Integrations
     *
     * ### Get information about all Integrations. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void allIntegrationsTest() throws ApiException {
        String fields = null;
        String integrationHubId = null;
        List<Integration> response = api.allIntegrations(fields, integrationHubId);

        // TODO: test validations
    }
    
    /**
     * Create Integration Hub
     *
     * ### Create a new Integration Hub. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIntegrationHubTest() throws ApiException {
        IntegrationHub body = null;
        String fields = null;
        IntegrationHub response = api.createIntegrationHub(body, fields);

        // TODO: test validations
    }
    
    /**
     * Delete Integration Hub
     *
     * ### Delete a Integration Hub. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteIntegrationHubTest() throws ApiException {
        Long integrationHubId = null;
        String response = api.deleteIntegrationHub(integrationHubId);

        // TODO: test validations
    }
    
    /**
     * Fetch Remote Integration Form
     *
     * Returns the Integration form for presentation to the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchIntegrationFormTest() throws ApiException {
        Long integrationId = null;
        DataActionForm response = api.fetchIntegrationForm(integrationId);

        // TODO: test validations
    }
    
    /**
     * Get Integration
     *
     * ### Get information about a Integration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void integrationTest() throws ApiException {
        Long integrationId = null;
        String fields = null;
        Integration response = api.integration(integrationId, fields);

        // TODO: test validations
    }
    
    /**
     * Get Integration Hub
     *
     * ### Get information about a Integration Hub. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void integrationHubTest() throws ApiException {
        Long integrationHubId = null;
        String fields = null;
        IntegrationHub response = api.integrationHub(integrationHubId, fields);

        // TODO: test validations
    }
    
    /**
     * Update Integration
     *
     * ### Update parameters on a Integration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIntegrationTest() throws ApiException {
        Long integrationId = null;
        Integration body = null;
        String fields = null;
        Integration response = api.updateIntegration(integrationId, body, fields);

        // TODO: test validations
    }
    
    /**
     * Update Integration Hub
     *
     * ### Update a Integration Hub definition. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateIntegrationHubTest() throws ApiException {
        Long integrationHubId = null;
        IntegrationHub body = null;
        String fields = null;
        IntegrationHub response = api.updateIntegrationHub(integrationHubId, body, fields);

        // TODO: test validations
    }
    
}
