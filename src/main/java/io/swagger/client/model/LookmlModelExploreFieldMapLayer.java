/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * LookmlModelExploreFieldMapLayer
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class LookmlModelExploreFieldMapLayer {
  @SerializedName("url")
  private String url = null;

  @SerializedName("feature_key")
  private String featureKey = null;

  @SerializedName("property_key")
  private String propertyKey = null;

  @SerializedName("property_label_key")
  private String propertyLabelKey = null;

  @SerializedName("projection")
  private String projection = null;

  @SerializedName("format")
  private String format = null;

  @SerializedName("extents_json_url")
  private String extentsJsonUrl = null;

  @SerializedName("max_zoom_level")
  private Long maxZoomLevel = null;

  @SerializedName("min_zoom_level")
  private Long minZoomLevel = null;

   /**
   * URL to the map layer resource.
   * @return url
  **/
  @ApiModelProperty(value = "URL to the map layer resource.")
  public String getUrl() {
    return url;
  }

   /**
   * Specifies the name of the TopoJSON object that the map layer references. If not specified, use the first object..
   * @return featureKey
  **/
  @ApiModelProperty(value = "Specifies the name of the TopoJSON object that the map layer references. If not specified, use the first object..")
  public String getFeatureKey() {
    return featureKey;
  }

   /**
   * Selects which property from the TopoJSON data to plot against. TopoJSON supports arbitrary metadata for each region. When null, the first matching property should be used.
   * @return propertyKey
  **/
  @ApiModelProperty(value = "Selects which property from the TopoJSON data to plot against. TopoJSON supports arbitrary metadata for each region. When null, the first matching property should be used.")
  public String getPropertyKey() {
    return propertyKey;
  }

   /**
   * Which property from the TopoJSON data to use to label the region. When null, property_key should be used.
   * @return propertyLabelKey
  **/
  @ApiModelProperty(value = "Which property from the TopoJSON data to use to label the region. When null, property_key should be used.")
  public String getPropertyLabelKey() {
    return propertyLabelKey;
  }

   /**
   * The preferred geographic projection of the map layer when displayed in a visualization that supports multiple geographic projections.
   * @return projection
  **/
  @ApiModelProperty(value = "The preferred geographic projection of the map layer when displayed in a visualization that supports multiple geographic projections.")
  public String getProjection() {
    return projection;
  }

   /**
   * Specifies the data format of the region information. Valid values are: \&quot;topojson\&quot;, \&quot;vector_tile_region\&quot;.
   * @return format
  **/
  @ApiModelProperty(value = "Specifies the data format of the region information. Valid values are: \"topojson\", \"vector_tile_region\".")
  public String getFormat() {
    return format;
  }

   /**
   * Specifies the URL to a JSON file that defines the geographic extents of each region available in the map layer. This data is used to automatically center the map on the available data for visualization purposes. The JSON file must be a JSON object where the keys are the mapping value of the feature (as specified by property_key) and the values are arrays of four numbers representing the west longitude, south latitude, east longitude, and north latitude extents of the region. The object must include a key for every possible value of property_key.
   * @return extentsJsonUrl
  **/
  @ApiModelProperty(value = "Specifies the URL to a JSON file that defines the geographic extents of each region available in the map layer. This data is used to automatically center the map on the available data for visualization purposes. The JSON file must be a JSON object where the keys are the mapping value of the feature (as specified by property_key) and the values are arrays of four numbers representing the west longitude, south latitude, east longitude, and north latitude extents of the region. The object must include a key for every possible value of property_key.")
  public String getExtentsJsonUrl() {
    return extentsJsonUrl;
  }

   /**
   * The minimum zoom level that the map layer may be displayed at, for visualizations that support zooming.
   * @return maxZoomLevel
  **/
  @ApiModelProperty(value = "The minimum zoom level that the map layer may be displayed at, for visualizations that support zooming.")
  public Long getMaxZoomLevel() {
    return maxZoomLevel;
  }

   /**
   * The maximum zoom level that the map layer may be displayed at, for visualizations that support zooming.
   * @return minZoomLevel
  **/
  @ApiModelProperty(value = "The maximum zoom level that the map layer may be displayed at, for visualizations that support zooming.")
  public Long getMinZoomLevel() {
    return minZoomLevel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookmlModelExploreFieldMapLayer lookmlModelExploreFieldMapLayer = (LookmlModelExploreFieldMapLayer) o;
    return Objects.equals(this.url, lookmlModelExploreFieldMapLayer.url) &&
        Objects.equals(this.featureKey, lookmlModelExploreFieldMapLayer.featureKey) &&
        Objects.equals(this.propertyKey, lookmlModelExploreFieldMapLayer.propertyKey) &&
        Objects.equals(this.propertyLabelKey, lookmlModelExploreFieldMapLayer.propertyLabelKey) &&
        Objects.equals(this.projection, lookmlModelExploreFieldMapLayer.projection) &&
        Objects.equals(this.format, lookmlModelExploreFieldMapLayer.format) &&
        Objects.equals(this.extentsJsonUrl, lookmlModelExploreFieldMapLayer.extentsJsonUrl) &&
        Objects.equals(this.maxZoomLevel, lookmlModelExploreFieldMapLayer.maxZoomLevel) &&
        Objects.equals(this.minZoomLevel, lookmlModelExploreFieldMapLayer.minZoomLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, featureKey, propertyKey, propertyLabelKey, projection, format, extentsJsonUrl, maxZoomLevel, minZoomLevel);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookmlModelExploreFieldMapLayer {\n");
    
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    featureKey: ").append(toIndentedString(featureKey)).append("\n");
    sb.append("    propertyKey: ").append(toIndentedString(propertyKey)).append("\n");
    sb.append("    propertyLabelKey: ").append(toIndentedString(propertyLabelKey)).append("\n");
    sb.append("    projection: ").append(toIndentedString(projection)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    extentsJsonUrl: ").append(toIndentedString(extentsJsonUrl)).append("\n");
    sb.append("    maxZoomLevel: ").append(toIndentedString(maxZoomLevel)).append("\n");
    sb.append("    minZoomLevel: ").append(toIndentedString(minZoomLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

