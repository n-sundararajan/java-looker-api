/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Dashboard;
import io.swagger.client.model.DashboardBase;
import io.swagger.client.model.Error;
import io.swagger.client.model.Prefetch;
import io.swagger.client.model.PrefetchDashboardFilterValue;
import io.swagger.client.model.PrefetchDashboardRequest;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DashboardApi {
    private ApiClient apiClient;

    public DashboardApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DashboardApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for allDashboards
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allDashboardsCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allDashboardsValidateBeforeCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = allDashboardsCall(fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All Dashboards
     * Get information about all dashboards.
     * @param fields Requested fields. (optional)
     * @return List&lt;DashboardBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DashboardBase> allDashboards(String fields) throws ApiException {
        ApiResponse<List<DashboardBase>> resp = allDashboardsWithHttpInfo(fields);
        return resp.getData();
    }

    /**
     * Get All Dashboards
     * Get information about all dashboards.
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;DashboardBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DashboardBase>> allDashboardsWithHttpInfo(String fields) throws ApiException {
        com.squareup.okhttp.Call call = allDashboardsValidateBeforeCall(fields, null, null);
        Type localVarReturnType = new TypeToken<List<DashboardBase>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Dashboards (asynchronously)
     * Get information about all dashboards.
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allDashboardsAsync(String fields, final ApiCallback<List<DashboardBase>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allDashboardsValidateBeforeCall(fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DashboardBase>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDashboard
     * @param body Dashboard (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDashboardCall(Dashboard body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDashboardValidateBeforeCall(Dashboard body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createDashboardCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Dashboard
     * ### Create a dashboard with specified information.
     * @param body Dashboard (optional)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Dashboard createDashboard(Dashboard body) throws ApiException {
        ApiResponse<Dashboard> resp = createDashboardWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create Dashboard
     * ### Create a dashboard with specified information.
     * @param body Dashboard (optional)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Dashboard> createDashboardWithHttpInfo(Dashboard body) throws ApiException {
        com.squareup.okhttp.Call call = createDashboardValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Dashboard (asynchronously)
     * ### Create a dashboard with specified information.
     * @param body Dashboard (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDashboardAsync(Dashboard body, final ApiCallback<Dashboard> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDashboardValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDashboardPrefetch
     * @param dashboardId Id of dashboard (required)
     * @param body Parameters for prefetch request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDashboardPrefetchCall(String dashboardId, PrefetchDashboardRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboard_id}/prefetch"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDashboardPrefetchValidateBeforeCall(String dashboardId, PrefetchDashboardRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling createDashboardPrefetch(Async)");
        }
        

        com.squareup.okhttp.Call call = createDashboardPrefetchCall(dashboardId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Dashboard Prefetch
     * ### Create a prefetch for a dashboard with the specified information. 
     * @param dashboardId Id of dashboard (required)
     * @param body Parameters for prefetch request (optional)
     * @return PrefetchDashboardRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PrefetchDashboardRequest createDashboardPrefetch(String dashboardId, PrefetchDashboardRequest body) throws ApiException {
        ApiResponse<PrefetchDashboardRequest> resp = createDashboardPrefetchWithHttpInfo(dashboardId, body);
        return resp.getData();
    }

    /**
     * Create Dashboard Prefetch
     * ### Create a prefetch for a dashboard with the specified information. 
     * @param dashboardId Id of dashboard (required)
     * @param body Parameters for prefetch request (optional)
     * @return ApiResponse&lt;PrefetchDashboardRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PrefetchDashboardRequest> createDashboardPrefetchWithHttpInfo(String dashboardId, PrefetchDashboardRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createDashboardPrefetchValidateBeforeCall(dashboardId, body, null, null);
        Type localVarReturnType = new TypeToken<PrefetchDashboardRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Dashboard Prefetch (asynchronously)
     * ### Create a prefetch for a dashboard with the specified information. 
     * @param dashboardId Id of dashboard (required)
     * @param body Parameters for prefetch request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDashboardPrefetchAsync(String dashboardId, PrefetchDashboardRequest body, final ApiCallback<PrefetchDashboardRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDashboardPrefetchValidateBeforeCall(dashboardId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PrefetchDashboardRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dashboard
     * @param dashboardId Id of dashboard (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dashboardCall(String dashboardId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboard_id}"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dashboardValidateBeforeCall(String dashboardId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling dashboard(Async)");
        }
        

        com.squareup.okhttp.Call call = dashboardCall(dashboardId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Dashboard
     * ### Get information about the dashboard with a specific id.
     * @param dashboardId Id of dashboard (required)
     * @param fields Requested fields. (optional)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Dashboard dashboard(String dashboardId, String fields) throws ApiException {
        ApiResponse<Dashboard> resp = dashboardWithHttpInfo(dashboardId, fields);
        return resp.getData();
    }

    /**
     * Get Dashboard
     * ### Get information about the dashboard with a specific id.
     * @param dashboardId Id of dashboard (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Dashboard> dashboardWithHttpInfo(String dashboardId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = dashboardValidateBeforeCall(dashboardId, fields, null, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Dashboard (asynchronously)
     * ### Get information about the dashboard with a specific id.
     * @param dashboardId Id of dashboard (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dashboardAsync(String dashboardId, String fields, final ApiCallback<Dashboard> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dashboardValidateBeforeCall(dashboardId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dashboardPrefetch
     * @param dashboardId Id of dashboard (required)
     * @param dashboardFilters JSON encoded string of Dashboard filters that were applied to prefetch (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dashboardPrefetchCall(String dashboardId, List<PrefetchDashboardFilterValue> dashboardFilters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboard_id}/prefetch"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dashboardFilters != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "dashboard_filters", dashboardFilters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dashboardPrefetchValidateBeforeCall(String dashboardId, List<PrefetchDashboardFilterValue> dashboardFilters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling dashboardPrefetch(Async)");
        }
        

        com.squareup.okhttp.Call call = dashboardPrefetchCall(dashboardId, dashboardFilters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Dashboard Prefetch
     * ### Get a prefetch for a dashboard with the specified information. 
     * @param dashboardId Id of dashboard (required)
     * @param dashboardFilters JSON encoded string of Dashboard filters that were applied to prefetch (optional)
     * @return Prefetch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Prefetch dashboardPrefetch(String dashboardId, List<PrefetchDashboardFilterValue> dashboardFilters) throws ApiException {
        ApiResponse<Prefetch> resp = dashboardPrefetchWithHttpInfo(dashboardId, dashboardFilters);
        return resp.getData();
    }

    /**
     * Get Dashboard Prefetch
     * ### Get a prefetch for a dashboard with the specified information. 
     * @param dashboardId Id of dashboard (required)
     * @param dashboardFilters JSON encoded string of Dashboard filters that were applied to prefetch (optional)
     * @return ApiResponse&lt;Prefetch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Prefetch> dashboardPrefetchWithHttpInfo(String dashboardId, List<PrefetchDashboardFilterValue> dashboardFilters) throws ApiException {
        com.squareup.okhttp.Call call = dashboardPrefetchValidateBeforeCall(dashboardId, dashboardFilters, null, null);
        Type localVarReturnType = new TypeToken<Prefetch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Dashboard Prefetch (asynchronously)
     * ### Get a prefetch for a dashboard with the specified information. 
     * @param dashboardId Id of dashboard (required)
     * @param dashboardFilters JSON encoded string of Dashboard filters that were applied to prefetch (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dashboardPrefetchAsync(String dashboardId, List<PrefetchDashboardFilterValue> dashboardFilters, final ApiCallback<Prefetch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dashboardPrefetchValidateBeforeCall(dashboardId, dashboardFilters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Prefetch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDashboard
     * @param dashboardId Id of dashboard (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDashboardCall(String dashboardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboard_id}"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDashboardValidateBeforeCall(String dashboardId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling deleteDashboard(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteDashboardCall(dashboardId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Dashboard
     * ### Delete the dashboard with a specific id.
     * @param dashboardId Id of dashboard (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteDashboard(String dashboardId) throws ApiException {
        ApiResponse<String> resp = deleteDashboardWithHttpInfo(dashboardId);
        return resp.getData();
    }

    /**
     * Delete Dashboard
     * ### Delete the dashboard with a specific id.
     * @param dashboardId Id of dashboard (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteDashboardWithHttpInfo(String dashboardId) throws ApiException {
        com.squareup.okhttp.Call call = deleteDashboardValidateBeforeCall(dashboardId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Dashboard (asynchronously)
     * ### Delete the dashboard with a specific id.
     * @param dashboardId Id of dashboard (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDashboardAsync(String dashboardId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDashboardValidateBeforeCall(dashboardId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchDashboards
     * @param fields Requested fields. (optional)
     * @param id Match dashboard id. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param title Match Dashboard title. (optional)
     * @param description Match Dashboard description. (optional)
     * @param contentFavoriteId Filter on a content favorite id. (optional)
     * @param spaceId Filter on a particular space. (optional)
     * @param deleted Filter on dashboards deleted status. (optional)
     * @param userId Filter on dashboards created by a particular user. (optional)
     * @param viewCount Filter on a particular value of view_count (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchDashboardsCall(String fields, Long id, Long page, Long perPage, Long limit, Long offset, String sorts, String title, String description, Long contentFavoriteId, String spaceId, String deleted, String userId, String viewCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dashboards/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));
        if (title != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("title", title));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (contentFavoriteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("content_favorite_id", contentFavoriteId));
        if (spaceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("space_id", spaceId));
        if (deleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deleted", deleted));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (viewCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("view_count", viewCount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchDashboardsValidateBeforeCall(String fields, Long id, Long page, Long perPage, Long limit, Long offset, String sorts, String title, String description, Long contentFavoriteId, String spaceId, String deleted, String userId, String viewCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchDashboardsCall(fields, id, page, perPage, limit, offset, sorts, title, description, contentFavoriteId, spaceId, deleted, userId, viewCount, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Dashboards
     * Get information about all dashboards.
     * @param fields Requested fields. (optional)
     * @param id Match dashboard id. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param title Match Dashboard title. (optional)
     * @param description Match Dashboard description. (optional)
     * @param contentFavoriteId Filter on a content favorite id. (optional)
     * @param spaceId Filter on a particular space. (optional)
     * @param deleted Filter on dashboards deleted status. (optional)
     * @param userId Filter on dashboards created by a particular user. (optional)
     * @param viewCount Filter on a particular value of view_count (optional)
     * @return List&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Dashboard> searchDashboards(String fields, Long id, Long page, Long perPage, Long limit, Long offset, String sorts, String title, String description, Long contentFavoriteId, String spaceId, String deleted, String userId, String viewCount) throws ApiException {
        ApiResponse<List<Dashboard>> resp = searchDashboardsWithHttpInfo(fields, id, page, perPage, limit, offset, sorts, title, description, contentFavoriteId, spaceId, deleted, userId, viewCount);
        return resp.getData();
    }

    /**
     * Search Dashboards
     * Get information about all dashboards.
     * @param fields Requested fields. (optional)
     * @param id Match dashboard id. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param title Match Dashboard title. (optional)
     * @param description Match Dashboard description. (optional)
     * @param contentFavoriteId Filter on a content favorite id. (optional)
     * @param spaceId Filter on a particular space. (optional)
     * @param deleted Filter on dashboards deleted status. (optional)
     * @param userId Filter on dashboards created by a particular user. (optional)
     * @param viewCount Filter on a particular value of view_count (optional)
     * @return ApiResponse&lt;List&lt;Dashboard&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Dashboard>> searchDashboardsWithHttpInfo(String fields, Long id, Long page, Long perPage, Long limit, Long offset, String sorts, String title, String description, Long contentFavoriteId, String spaceId, String deleted, String userId, String viewCount) throws ApiException {
        com.squareup.okhttp.Call call = searchDashboardsValidateBeforeCall(fields, id, page, perPage, limit, offset, sorts, title, description, contentFavoriteId, spaceId, deleted, userId, viewCount, null, null);
        Type localVarReturnType = new TypeToken<List<Dashboard>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Dashboards (asynchronously)
     * Get information about all dashboards.
     * @param fields Requested fields. (optional)
     * @param id Match dashboard id. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param title Match Dashboard title. (optional)
     * @param description Match Dashboard description. (optional)
     * @param contentFavoriteId Filter on a content favorite id. (optional)
     * @param spaceId Filter on a particular space. (optional)
     * @param deleted Filter on dashboards deleted status. (optional)
     * @param userId Filter on dashboards created by a particular user. (optional)
     * @param viewCount Filter on a particular value of view_count (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchDashboardsAsync(String fields, Long id, Long page, Long perPage, Long limit, Long offset, String sorts, String title, String description, Long contentFavoriteId, String spaceId, String deleted, String userId, String viewCount, final ApiCallback<List<Dashboard>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchDashboardsValidateBeforeCall(fields, id, page, perPage, limit, offset, sorts, title, description, contentFavoriteId, spaceId, deleted, userId, viewCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Dashboard>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDashboard
     * @param dashboardId Id of dashboard (required)
     * @param body Dashboard (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDashboardCall(String dashboardId, Dashboard body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/dashboards/{dashboard_id}"
            .replaceAll("\\{" + "dashboard_id" + "\\}", apiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDashboardValidateBeforeCall(String dashboardId, Dashboard body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling updateDashboard(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDashboard(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDashboardCall(dashboardId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Dashboard
     * ### Update the dashboard with a specific id.
     * @param dashboardId Id of dashboard (required)
     * @param body Dashboard (required)
     * @return Dashboard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Dashboard updateDashboard(String dashboardId, Dashboard body) throws ApiException {
        ApiResponse<Dashboard> resp = updateDashboardWithHttpInfo(dashboardId, body);
        return resp.getData();
    }

    /**
     * Update Dashboard
     * ### Update the dashboard with a specific id.
     * @param dashboardId Id of dashboard (required)
     * @param body Dashboard (required)
     * @return ApiResponse&lt;Dashboard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Dashboard> updateDashboardWithHttpInfo(String dashboardId, Dashboard body) throws ApiException {
        com.squareup.okhttp.Call call = updateDashboardValidateBeforeCall(dashboardId, body, null, null);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Dashboard (asynchronously)
     * ### Update the dashboard with a specific id.
     * @param dashboardId Id of dashboard (required)
     * @param body Dashboard (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDashboardAsync(String dashboardId, Dashboard body, final ApiCallback<Dashboard> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDashboardValidateBeforeCall(dashboardId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Dashboard>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
