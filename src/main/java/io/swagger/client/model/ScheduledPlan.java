/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ScheduledPlanDestination;
import io.swagger.client.model.UserPublic;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * ScheduledPlan
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class ScheduledPlan {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("user_id")
  private Long userId = null;

  @SerializedName("user")
  private UserPublic user = null;

  @SerializedName("run_as_recipient")
  private Boolean runAsRecipient = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("next_run_at")
  private OffsetDateTime nextRunAt = null;

  @SerializedName("last_run_at")
  private OffsetDateTime lastRunAt = null;

  @SerializedName("look_id")
  private Long lookId = null;

  @SerializedName("dashboard_id")
  private Long dashboardId = null;

  @SerializedName("lookml_dashboard_id")
  private String lookmlDashboardId = null;

  @SerializedName("filters_string")
  private String filtersString = null;

  @SerializedName("dashboard_filters")
  private String dashboardFilters = null;

  @SerializedName("require_results")
  private Boolean requireResults = null;

  @SerializedName("require_no_results")
  private Boolean requireNoResults = null;

  @SerializedName("require_change")
  private Boolean requireChange = null;

  @SerializedName("send_all_results")
  private Boolean sendAllResults = null;

  @SerializedName("crontab")
  private String crontab = null;

  @SerializedName("datagroup")
  private String datagroup = null;

  @SerializedName("timezone")
  private String timezone = null;

  @SerializedName("query_id")
  private String queryId = null;

  @SerializedName("scheduled_plan_destination")
  private List<ScheduledPlanDestination> scheduledPlanDestination = null;

  @SerializedName("run_once")
  private Boolean runOnce = null;

  @SerializedName("include_links")
  private Boolean includeLinks = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Unique Id
   * @return id
  **/
  @ApiModelProperty(value = "Unique Id")
  public Long getId() {
    return id;
  }

  public ScheduledPlan name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name
   * @return name
  **/
  @ApiModelProperty(value = "Name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * Date and time when ScheduledPlan was created
   * @return createdAt
  **/
  @ApiModelProperty(value = "Date and time when ScheduledPlan was created")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * Date and time when ScheduledPlan was last updated
   * @return updatedAt
  **/
  @ApiModelProperty(value = "Date and time when ScheduledPlan was last updated")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

   /**
   * Title
   * @return title
  **/
  @ApiModelProperty(value = "Title")
  public String getTitle() {
    return title;
  }

  public ScheduledPlan userId(Long userId) {
    this.userId = userId;
    return this;
  }

   /**
   * User Id which owns this ScheduledPlan
   * @return userId
  **/
  @ApiModelProperty(value = "User Id which owns this ScheduledPlan")
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }

  public ScheduledPlan user(UserPublic user) {
    this.user = user;
    return this;
  }

   /**
   * User who owns this ScheduledPlan
   * @return user
  **/
  @ApiModelProperty(value = "User who owns this ScheduledPlan")
  public UserPublic getUser() {
    return user;
  }

  public void setUser(UserPublic user) {
    this.user = user;
  }

  public ScheduledPlan runAsRecipient(Boolean runAsRecipient) {
    this.runAsRecipient = runAsRecipient;
    return this;
  }

   /**
   * Whether schedule is ran as recipient (only applicable for email recipients)
   * @return runAsRecipient
  **/
  @ApiModelProperty(value = "Whether schedule is ran as recipient (only applicable for email recipients)")
  public Boolean isRunAsRecipient() {
    return runAsRecipient;
  }

  public void setRunAsRecipient(Boolean runAsRecipient) {
    this.runAsRecipient = runAsRecipient;
  }

  public ScheduledPlan enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether the ScheduledPlan is enabled
   * @return enabled
  **/
  @ApiModelProperty(value = "Whether the ScheduledPlan is enabled")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

   /**
   * When the ScheduledPlan will next run (null if running once)
   * @return nextRunAt
  **/
  @ApiModelProperty(value = "When the ScheduledPlan will next run (null if running once)")
  public OffsetDateTime getNextRunAt() {
    return nextRunAt;
  }

   /**
   * When the ScheduledPlan was last run
   * @return lastRunAt
  **/
  @ApiModelProperty(value = "When the ScheduledPlan was last run")
  public OffsetDateTime getLastRunAt() {
    return lastRunAt;
  }

  public ScheduledPlan lookId(Long lookId) {
    this.lookId = lookId;
    return this;
  }

   /**
   * Id of a look
   * @return lookId
  **/
  @ApiModelProperty(value = "Id of a look")
  public Long getLookId() {
    return lookId;
  }

  public void setLookId(Long lookId) {
    this.lookId = lookId;
  }

  public ScheduledPlan dashboardId(Long dashboardId) {
    this.dashboardId = dashboardId;
    return this;
  }

   /**
   * Id of a dashboard
   * @return dashboardId
  **/
  @ApiModelProperty(value = "Id of a dashboard")
  public Long getDashboardId() {
    return dashboardId;
  }

  public void setDashboardId(Long dashboardId) {
    this.dashboardId = dashboardId;
  }

  public ScheduledPlan lookmlDashboardId(String lookmlDashboardId) {
    this.lookmlDashboardId = lookmlDashboardId;
    return this;
  }

   /**
   * Id of a LookML dashboard
   * @return lookmlDashboardId
  **/
  @ApiModelProperty(value = "Id of a LookML dashboard")
  public String getLookmlDashboardId() {
    return lookmlDashboardId;
  }

  public void setLookmlDashboardId(String lookmlDashboardId) {
    this.lookmlDashboardId = lookmlDashboardId;
  }

  public ScheduledPlan filtersString(String filtersString) {
    this.filtersString = filtersString;
    return this;
  }

   /**
   * Query string to run look or dashboard with
   * @return filtersString
  **/
  @ApiModelProperty(value = "Query string to run look or dashboard with")
  public String getFiltersString() {
    return filtersString;
  }

  public void setFiltersString(String filtersString) {
    this.filtersString = filtersString;
  }

  public ScheduledPlan dashboardFilters(String dashboardFilters) {
    this.dashboardFilters = dashboardFilters;
    return this;
  }

   /**
   * Alias for filters_string field
   * @return dashboardFilters
  **/
  @ApiModelProperty(value = "Alias for filters_string field")
  public String getDashboardFilters() {
    return dashboardFilters;
  }

  public void setDashboardFilters(String dashboardFilters) {
    this.dashboardFilters = dashboardFilters;
  }

  public ScheduledPlan requireResults(Boolean requireResults) {
    this.requireResults = requireResults;
    return this;
  }

   /**
   * Delivery should occur if running the dashboard or look returns results
   * @return requireResults
  **/
  @ApiModelProperty(value = "Delivery should occur if running the dashboard or look returns results")
  public Boolean isRequireResults() {
    return requireResults;
  }

  public void setRequireResults(Boolean requireResults) {
    this.requireResults = requireResults;
  }

  public ScheduledPlan requireNoResults(Boolean requireNoResults) {
    this.requireNoResults = requireNoResults;
    return this;
  }

   /**
   * Delivery should occur if the dashboard look does not return results
   * @return requireNoResults
  **/
  @ApiModelProperty(value = "Delivery should occur if the dashboard look does not return results")
  public Boolean isRequireNoResults() {
    return requireNoResults;
  }

  public void setRequireNoResults(Boolean requireNoResults) {
    this.requireNoResults = requireNoResults;
  }

  public ScheduledPlan requireChange(Boolean requireChange) {
    this.requireChange = requireChange;
    return this;
  }

   /**
   * Delivery should occur if data have changed since the last run
   * @return requireChange
  **/
  @ApiModelProperty(value = "Delivery should occur if data have changed since the last run")
  public Boolean isRequireChange() {
    return requireChange;
  }

  public void setRequireChange(Boolean requireChange) {
    this.requireChange = requireChange;
  }

  public ScheduledPlan sendAllResults(Boolean sendAllResults) {
    this.sendAllResults = sendAllResults;
    return this;
  }

   /**
   * Will run an unlimited query and send all results.
   * @return sendAllResults
  **/
  @ApiModelProperty(value = "Will run an unlimited query and send all results.")
  public Boolean isSendAllResults() {
    return sendAllResults;
  }

  public void setSendAllResults(Boolean sendAllResults) {
    this.sendAllResults = sendAllResults;
  }

  public ScheduledPlan crontab(String crontab) {
    this.crontab = crontab;
    return this;
  }

   /**
   * Vixie-Style crontab specification when to run
   * @return crontab
  **/
  @ApiModelProperty(value = "Vixie-Style crontab specification when to run")
  public String getCrontab() {
    return crontab;
  }

  public void setCrontab(String crontab) {
    this.crontab = crontab;
  }

  public ScheduledPlan datagroup(String datagroup) {
    this.datagroup = datagroup;
    return this;
  }

   /**
   * Name of a datagroup; if specified will run when datagroup triggered (can&#39;t be used with cron string)
   * @return datagroup
  **/
  @ApiModelProperty(value = "Name of a datagroup; if specified will run when datagroup triggered (can't be used with cron string)")
  public String getDatagroup() {
    return datagroup;
  }

  public void setDatagroup(String datagroup) {
    this.datagroup = datagroup;
  }

  public ScheduledPlan timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Timezone for interpreting the specified crontab (default is Looker instance timezone)
   * @return timezone
  **/
  @ApiModelProperty(value = "Timezone for interpreting the specified crontab (default is Looker instance timezone)")
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }

  public ScheduledPlan queryId(String queryId) {
    this.queryId = queryId;
    return this;
  }

   /**
   * Query id
   * @return queryId
  **/
  @ApiModelProperty(value = "Query id")
  public String getQueryId() {
    return queryId;
  }

  public void setQueryId(String queryId) {
    this.queryId = queryId;
  }

  public ScheduledPlan scheduledPlanDestination(List<ScheduledPlanDestination> scheduledPlanDestination) {
    this.scheduledPlanDestination = scheduledPlanDestination;
    return this;
  }

  public ScheduledPlan addScheduledPlanDestinationItem(ScheduledPlanDestination scheduledPlanDestinationItem) {
    if (this.scheduledPlanDestination == null) {
      this.scheduledPlanDestination = new ArrayList<ScheduledPlanDestination>();
    }
    this.scheduledPlanDestination.add(scheduledPlanDestinationItem);
    return this;
  }

   /**
   * Scheduled plan destinations
   * @return scheduledPlanDestination
  **/
  @ApiModelProperty(value = "Scheduled plan destinations")
  public List<ScheduledPlanDestination> getScheduledPlanDestination() {
    return scheduledPlanDestination;
  }

  public void setScheduledPlanDestination(List<ScheduledPlanDestination> scheduledPlanDestination) {
    this.scheduledPlanDestination = scheduledPlanDestination;
  }

  public ScheduledPlan runOnce(Boolean runOnce) {
    this.runOnce = runOnce;
    return this;
  }

   /**
   * Whether the plan in question should only be run once (usually for testing)
   * @return runOnce
  **/
  @ApiModelProperty(value = "Whether the plan in question should only be run once (usually for testing)")
  public Boolean isRunOnce() {
    return runOnce;
  }

  public void setRunOnce(Boolean runOnce) {
    this.runOnce = runOnce;
  }

  public ScheduledPlan includeLinks(Boolean includeLinks) {
    this.includeLinks = includeLinks;
    return this;
  }

   /**
   * Whether links back to Looker should be included in this ScheduledPlan
   * @return includeLinks
  **/
  @ApiModelProperty(value = "Whether links back to Looker should be included in this ScheduledPlan")
  public Boolean isIncludeLinks() {
    return includeLinks;
  }

  public void setIncludeLinks(Boolean includeLinks) {
    this.includeLinks = includeLinks;
  }

  public ScheduledPlan can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public ScheduledPlan putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduledPlan scheduledPlan = (ScheduledPlan) o;
    return Objects.equals(this.id, scheduledPlan.id) &&
        Objects.equals(this.name, scheduledPlan.name) &&
        Objects.equals(this.createdAt, scheduledPlan.createdAt) &&
        Objects.equals(this.updatedAt, scheduledPlan.updatedAt) &&
        Objects.equals(this.title, scheduledPlan.title) &&
        Objects.equals(this.userId, scheduledPlan.userId) &&
        Objects.equals(this.user, scheduledPlan.user) &&
        Objects.equals(this.runAsRecipient, scheduledPlan.runAsRecipient) &&
        Objects.equals(this.enabled, scheduledPlan.enabled) &&
        Objects.equals(this.nextRunAt, scheduledPlan.nextRunAt) &&
        Objects.equals(this.lastRunAt, scheduledPlan.lastRunAt) &&
        Objects.equals(this.lookId, scheduledPlan.lookId) &&
        Objects.equals(this.dashboardId, scheduledPlan.dashboardId) &&
        Objects.equals(this.lookmlDashboardId, scheduledPlan.lookmlDashboardId) &&
        Objects.equals(this.filtersString, scheduledPlan.filtersString) &&
        Objects.equals(this.dashboardFilters, scheduledPlan.dashboardFilters) &&
        Objects.equals(this.requireResults, scheduledPlan.requireResults) &&
        Objects.equals(this.requireNoResults, scheduledPlan.requireNoResults) &&
        Objects.equals(this.requireChange, scheduledPlan.requireChange) &&
        Objects.equals(this.sendAllResults, scheduledPlan.sendAllResults) &&
        Objects.equals(this.crontab, scheduledPlan.crontab) &&
        Objects.equals(this.datagroup, scheduledPlan.datagroup) &&
        Objects.equals(this.timezone, scheduledPlan.timezone) &&
        Objects.equals(this.queryId, scheduledPlan.queryId) &&
        Objects.equals(this.scheduledPlanDestination, scheduledPlan.scheduledPlanDestination) &&
        Objects.equals(this.runOnce, scheduledPlan.runOnce) &&
        Objects.equals(this.includeLinks, scheduledPlan.includeLinks) &&
        Objects.equals(this.can, scheduledPlan.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, createdAt, updatedAt, title, userId, user, runAsRecipient, enabled, nextRunAt, lastRunAt, lookId, dashboardId, lookmlDashboardId, filtersString, dashboardFilters, requireResults, requireNoResults, requireChange, sendAllResults, crontab, datagroup, timezone, queryId, scheduledPlanDestination, runOnce, includeLinks, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduledPlan {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    runAsRecipient: ").append(toIndentedString(runAsRecipient)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    nextRunAt: ").append(toIndentedString(nextRunAt)).append("\n");
    sb.append("    lastRunAt: ").append(toIndentedString(lastRunAt)).append("\n");
    sb.append("    lookId: ").append(toIndentedString(lookId)).append("\n");
    sb.append("    dashboardId: ").append(toIndentedString(dashboardId)).append("\n");
    sb.append("    lookmlDashboardId: ").append(toIndentedString(lookmlDashboardId)).append("\n");
    sb.append("    filtersString: ").append(toIndentedString(filtersString)).append("\n");
    sb.append("    dashboardFilters: ").append(toIndentedString(dashboardFilters)).append("\n");
    sb.append("    requireResults: ").append(toIndentedString(requireResults)).append("\n");
    sb.append("    requireNoResults: ").append(toIndentedString(requireNoResults)).append("\n");
    sb.append("    requireChange: ").append(toIndentedString(requireChange)).append("\n");
    sb.append("    sendAllResults: ").append(toIndentedString(sendAllResults)).append("\n");
    sb.append("    crontab: ").append(toIndentedString(crontab)).append("\n");
    sb.append("    datagroup: ").append(toIndentedString(datagroup)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    scheduledPlanDestination: ").append(toIndentedString(scheduledPlanDestination)).append("\n");
    sb.append("    runOnce: ").append(toIndentedString(runOnce)).append("\n");
    sb.append("    includeLinks: ").append(toIndentedString(includeLinks)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

