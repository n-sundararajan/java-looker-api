/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Project
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class Project {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("uses_git")
  private Boolean usesGit = null;

  @SerializedName("git_remote_url")
  private String gitRemoteUrl = null;

  @SerializedName("git_service_name")
  private String gitServiceName = null;

  @SerializedName("pull_request_mode")
  private String pullRequestMode = null;

  @SerializedName("validation_required")
  private Boolean validationRequired = null;

  @SerializedName("is_example")
  private Boolean isExample = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Project Id
   * @return id
  **/
  @ApiModelProperty(value = "Project Id")
  public String getId() {
    return id;
  }

  public Project name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Project display name
   * @return name
  **/
  @ApiModelProperty(value = "Project display name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * If true the project is configured with a git repository
   * @return usesGit
  **/
  @ApiModelProperty(value = "If true the project is configured with a git repository")
  public Boolean isUsesGit() {
    return usesGit;
  }

  public Project gitRemoteUrl(String gitRemoteUrl) {
    this.gitRemoteUrl = gitRemoteUrl;
    return this;
  }

   /**
   * Git remote repository url
   * @return gitRemoteUrl
  **/
  @ApiModelProperty(value = "Git remote repository url")
  public String getGitRemoteUrl() {
    return gitRemoteUrl;
  }

  public void setGitRemoteUrl(String gitRemoteUrl) {
    this.gitRemoteUrl = gitRemoteUrl;
  }

  public Project gitServiceName(String gitServiceName) {
    this.gitServiceName = gitServiceName;
    return this;
  }

   /**
   * Name of the git service provider
   * @return gitServiceName
  **/
  @ApiModelProperty(value = "Name of the git service provider")
  public String getGitServiceName() {
    return gitServiceName;
  }

  public void setGitServiceName(String gitServiceName) {
    this.gitServiceName = gitServiceName;
  }

  public Project pullRequestMode(String pullRequestMode) {
    this.pullRequestMode = pullRequestMode;
    return this;
  }

   /**
   * The git pull request policy for this project. Valid values are: \&quot;off\&quot;, \&quot;links\&quot;, \&quot;recommended\&quot;, \&quot;required\&quot;.
   * @return pullRequestMode
  **/
  @ApiModelProperty(value = "The git pull request policy for this project. Valid values are: \"off\", \"links\", \"recommended\", \"required\".")
  public String getPullRequestMode() {
    return pullRequestMode;
  }

  public void setPullRequestMode(String pullRequestMode) {
    this.pullRequestMode = pullRequestMode;
  }

  public Project validationRequired(Boolean validationRequired) {
    this.validationRequired = validationRequired;
    return this;
  }

   /**
   * Validation policy: If true, the project must pass all validation checks before project changes can be committed to the git repository
   * @return validationRequired
  **/
  @ApiModelProperty(value = "Validation policy: If true, the project must pass all validation checks before project changes can be committed to the git repository")
  public Boolean isValidationRequired() {
    return validationRequired;
  }

  public void setValidationRequired(Boolean validationRequired) {
    this.validationRequired = validationRequired;
  }

   /**
   * If true the project is an example project and cannot be modified
   * @return isExample
  **/
  @ApiModelProperty(value = "If true the project is an example project and cannot be modified")
  public Boolean isIsExample() {
    return isExample;
  }

  public Project can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public Project putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.id, project.id) &&
        Objects.equals(this.name, project.name) &&
        Objects.equals(this.usesGit, project.usesGit) &&
        Objects.equals(this.gitRemoteUrl, project.gitRemoteUrl) &&
        Objects.equals(this.gitServiceName, project.gitServiceName) &&
        Objects.equals(this.pullRequestMode, project.pullRequestMode) &&
        Objects.equals(this.validationRequired, project.validationRequired) &&
        Objects.equals(this.isExample, project.isExample) &&
        Objects.equals(this.can, project.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, usesGit, gitRemoteUrl, gitServiceName, pullRequestMode, validationRequired, isExample, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    usesGit: ").append(toIndentedString(usesGit)).append("\n");
    sb.append("    gitRemoteUrl: ").append(toIndentedString(gitRemoteUrl)).append("\n");
    sb.append("    gitServiceName: ").append(toIndentedString(gitServiceName)).append("\n");
    sb.append("    pullRequestMode: ").append(toIndentedString(pullRequestMode)).append("\n");
    sb.append("    validationRequired: ").append(toIndentedString(validationRequired)).append("\n");
    sb.append("    isExample: ").append(toIndentedString(isExample)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

