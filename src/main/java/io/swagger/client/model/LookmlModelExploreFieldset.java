/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.LookmlModelExploreField;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * LookmlModelExploreFieldset
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class LookmlModelExploreFieldset {
  @SerializedName("dimensions")
  private List<LookmlModelExploreField> dimensions = null;

  @SerializedName("measures")
  private List<LookmlModelExploreField> measures = null;

  @SerializedName("filters")
  private List<LookmlModelExploreField> filters = null;

  @SerializedName("parameters")
  private List<LookmlModelExploreField> parameters = null;

  public LookmlModelExploreFieldset dimensions(List<LookmlModelExploreField> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public LookmlModelExploreFieldset addDimensionsItem(LookmlModelExploreField dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<LookmlModelExploreField>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

   /**
   * Array of dimensions
   * @return dimensions
  **/
  @ApiModelProperty(value = "Array of dimensions")
  public List<LookmlModelExploreField> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<LookmlModelExploreField> dimensions) {
    this.dimensions = dimensions;
  }

  public LookmlModelExploreFieldset measures(List<LookmlModelExploreField> measures) {
    this.measures = measures;
    return this;
  }

  public LookmlModelExploreFieldset addMeasuresItem(LookmlModelExploreField measuresItem) {
    if (this.measures == null) {
      this.measures = new ArrayList<LookmlModelExploreField>();
    }
    this.measures.add(measuresItem);
    return this;
  }

   /**
   * Array of measures
   * @return measures
  **/
  @ApiModelProperty(value = "Array of measures")
  public List<LookmlModelExploreField> getMeasures() {
    return measures;
  }

  public void setMeasures(List<LookmlModelExploreField> measures) {
    this.measures = measures;
  }

  public LookmlModelExploreFieldset filters(List<LookmlModelExploreField> filters) {
    this.filters = filters;
    return this;
  }

  public LookmlModelExploreFieldset addFiltersItem(LookmlModelExploreField filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<LookmlModelExploreField>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Array of filters
   * @return filters
  **/
  @ApiModelProperty(value = "Array of filters")
  public List<LookmlModelExploreField> getFilters() {
    return filters;
  }

  public void setFilters(List<LookmlModelExploreField> filters) {
    this.filters = filters;
  }

  public LookmlModelExploreFieldset parameters(List<LookmlModelExploreField> parameters) {
    this.parameters = parameters;
    return this;
  }

  public LookmlModelExploreFieldset addParametersItem(LookmlModelExploreField parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<LookmlModelExploreField>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * Array of parameters
   * @return parameters
  **/
  @ApiModelProperty(value = "Array of parameters")
  public List<LookmlModelExploreField> getParameters() {
    return parameters;
  }

  public void setParameters(List<LookmlModelExploreField> parameters) {
    this.parameters = parameters;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookmlModelExploreFieldset lookmlModelExploreFieldset = (LookmlModelExploreFieldset) o;
    return Objects.equals(this.dimensions, lookmlModelExploreFieldset.dimensions) &&
        Objects.equals(this.measures, lookmlModelExploreFieldset.measures) &&
        Objects.equals(this.filters, lookmlModelExploreFieldset.filters) &&
        Objects.equals(this.parameters, lookmlModelExploreFieldset.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensions, measures, filters, parameters);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookmlModelExploreFieldset {\n");
    
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    measures: ").append(toIndentedString(measures)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

