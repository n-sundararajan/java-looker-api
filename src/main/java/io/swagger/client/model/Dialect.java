/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Dialect
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class Dialect {
  @SerializedName("name")
  private String name = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("supports_cost_estimate")
  private Boolean supportsCostEstimate = null;

  @SerializedName("supports_upload_tables")
  private Boolean supportsUploadTables = null;

  @SerializedName("persistent_table_indexes")
  private String persistentTableIndexes = null;

  @SerializedName("persistent_table_sortkeys")
  private String persistentTableSortkeys = null;

  @SerializedName("persistent_table_distkey")
  private String persistentTableDistkey = null;

  @SerializedName("supports_streaming")
  private Boolean supportsStreaming = null;

  @SerializedName("automatically_run_sql_runner_snippets")
  private Boolean automaticallyRunSqlRunnerSnippets = null;

  @SerializedName("connection_tests")
  private List<String> connectionTests = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * The name of the dialect
   * @return name
  **/
  @ApiModelProperty(value = "The name of the dialect")
  public String getName() {
    return name;
  }

   /**
   * The human-readable label of the connection
   * @return label
  **/
  @ApiModelProperty(value = "The human-readable label of the connection")
  public String getLabel() {
    return label;
  }

   /**
   * Whether the dialect supports query cost estimates
   * @return supportsCostEstimate
  **/
  @ApiModelProperty(value = "Whether the dialect supports query cost estimates")
  public Boolean isSupportsCostEstimate() {
    return supportsCostEstimate;
  }

   /**
   * Whether the dialect supports uploading tables
   * @return supportsUploadTables
  **/
  @ApiModelProperty(value = "Whether the dialect supports uploading tables")
  public Boolean isSupportsUploadTables() {
    return supportsUploadTables;
  }

   /**
   * PDT index columns
   * @return persistentTableIndexes
  **/
  @ApiModelProperty(value = "PDT index columns")
  public String getPersistentTableIndexes() {
    return persistentTableIndexes;
  }

   /**
   * PDT sortkey columns
   * @return persistentTableSortkeys
  **/
  @ApiModelProperty(value = "PDT sortkey columns")
  public String getPersistentTableSortkeys() {
    return persistentTableSortkeys;
  }

   /**
   * PDT distkey column
   * @return persistentTableDistkey
  **/
  @ApiModelProperty(value = "PDT distkey column")
  public String getPersistentTableDistkey() {
    return persistentTableDistkey;
  }

   /**
   * Suports streaming results
   * @return supportsStreaming
  **/
  @ApiModelProperty(value = "Suports streaming results")
  public Boolean isSupportsStreaming() {
    return supportsStreaming;
  }

   /**
   * Should SQL Runner snippets automatically be run
   * @return automaticallyRunSqlRunnerSnippets
  **/
  @ApiModelProperty(value = "Should SQL Runner snippets automatically be run")
  public Boolean isAutomaticallyRunSqlRunnerSnippets() {
    return automaticallyRunSqlRunnerSnippets;
  }

  public Dialect connectionTests(List<String> connectionTests) {
    this.connectionTests = connectionTests;
    return this;
  }

  public Dialect addConnectionTestsItem(String connectionTestsItem) {
    if (this.connectionTests == null) {
      this.connectionTests = new ArrayList<String>();
    }
    this.connectionTests.add(connectionTestsItem);
    return this;
  }

   /**
   * Array of names of the tests that can be run on a connection using this dialect
   * @return connectionTests
  **/
  @ApiModelProperty(value = "Array of names of the tests that can be run on a connection using this dialect")
  public List<String> getConnectionTests() {
    return connectionTests;
  }

  public void setConnectionTests(List<String> connectionTests) {
    this.connectionTests = connectionTests;
  }

  public Dialect can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public Dialect putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dialect dialect = (Dialect) o;
    return Objects.equals(this.name, dialect.name) &&
        Objects.equals(this.label, dialect.label) &&
        Objects.equals(this.supportsCostEstimate, dialect.supportsCostEstimate) &&
        Objects.equals(this.supportsUploadTables, dialect.supportsUploadTables) &&
        Objects.equals(this.persistentTableIndexes, dialect.persistentTableIndexes) &&
        Objects.equals(this.persistentTableSortkeys, dialect.persistentTableSortkeys) &&
        Objects.equals(this.persistentTableDistkey, dialect.persistentTableDistkey) &&
        Objects.equals(this.supportsStreaming, dialect.supportsStreaming) &&
        Objects.equals(this.automaticallyRunSqlRunnerSnippets, dialect.automaticallyRunSqlRunnerSnippets) &&
        Objects.equals(this.connectionTests, dialect.connectionTests) &&
        Objects.equals(this.can, dialect.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, label, supportsCostEstimate, supportsUploadTables, persistentTableIndexes, persistentTableSortkeys, persistentTableDistkey, supportsStreaming, automaticallyRunSqlRunnerSnippets, connectionTests, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dialect {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    supportsCostEstimate: ").append(toIndentedString(supportsCostEstimate)).append("\n");
    sb.append("    supportsUploadTables: ").append(toIndentedString(supportsUploadTables)).append("\n");
    sb.append("    persistentTableIndexes: ").append(toIndentedString(persistentTableIndexes)).append("\n");
    sb.append("    persistentTableSortkeys: ").append(toIndentedString(persistentTableSortkeys)).append("\n");
    sb.append("    persistentTableDistkey: ").append(toIndentedString(persistentTableDistkey)).append("\n");
    sb.append("    supportsStreaming: ").append(toIndentedString(supportsStreaming)).append("\n");
    sb.append("    automaticallyRunSqlRunnerSnippets: ").append(toIndentedString(automaticallyRunSqlRunnerSnippets)).append("\n");
    sb.append("    connectionTests: ").append(toIndentedString(connectionTests)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

