/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.Look;
import io.swagger.client.model.LookWithQuery;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LookApi {
    private ApiClient apiClient;

    public LookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LookApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for allLooks
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allLooksCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/looks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allLooksValidateBeforeCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = allLooksCall(fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All Looks
     * ### Get all the looks.
     * @param fields Requested fields. (optional)
     * @return List&lt;Look&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Look> allLooks(String fields) throws ApiException {
        ApiResponse<List<Look>> resp = allLooksWithHttpInfo(fields);
        return resp.getData();
    }

    /**
     * Get All Looks
     * ### Get all the looks.
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;Look&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Look>> allLooksWithHttpInfo(String fields) throws ApiException {
        com.squareup.okhttp.Call call = allLooksValidateBeforeCall(fields, null, null);
        Type localVarReturnType = new TypeToken<List<Look>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Looks (asynchronously)
     * ### Get all the looks.
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allLooksAsync(String fields, final ApiCallback<List<Look>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allLooksValidateBeforeCall(fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Look>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLook
     * @param body Look (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLookCall(LookWithQuery body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/looks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLookValidateBeforeCall(LookWithQuery body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createLookCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Look
     * ### Create a Look with specified information.
     * @param body Look (optional)
     * @param fields Requested fields. (optional)
     * @return LookWithQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LookWithQuery createLook(LookWithQuery body, String fields) throws ApiException {
        ApiResponse<LookWithQuery> resp = createLookWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * Create Look
     * ### Create a Look with specified information.
     * @param body Look (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;LookWithQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LookWithQuery> createLookWithHttpInfo(LookWithQuery body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createLookValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<LookWithQuery>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Look (asynchronously)
     * ### Create a Look with specified information.
     * @param body Look (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLookAsync(LookWithQuery body, String fields, final ApiCallback<LookWithQuery> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLookValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LookWithQuery>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLook
     * @param lookId Id of look (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLookCall(Long lookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/looks/{look_id}"
            .replaceAll("\\{" + "look_id" + "\\}", apiClient.escapeString(lookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLookValidateBeforeCall(Long lookId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookId' is set
        if (lookId == null) {
            throw new ApiException("Missing the required parameter 'lookId' when calling deleteLook(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLookCall(lookId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Look
     * ### Delete the look with a specific id.
     * @param lookId Id of look (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteLook(Long lookId) throws ApiException {
        ApiResponse<String> resp = deleteLookWithHttpInfo(lookId);
        return resp.getData();
    }

    /**
     * Delete Look
     * ### Delete the look with a specific id.
     * @param lookId Id of look (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteLookWithHttpInfo(Long lookId) throws ApiException {
        com.squareup.okhttp.Call call = deleteLookValidateBeforeCall(lookId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Look (asynchronously)
     * ### Delete the look with a specific id.
     * @param lookId Id of look (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLookAsync(Long lookId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLookValidateBeforeCall(lookId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for look
     * @param lookId Id of look (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lookCall(Long lookId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/looks/{look_id}"
            .replaceAll("\\{" + "look_id" + "\\}", apiClient.escapeString(lookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lookValidateBeforeCall(Long lookId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookId' is set
        if (lookId == null) {
            throw new ApiException("Missing the required parameter 'lookId' when calling look(Async)");
        }
        

        com.squareup.okhttp.Call call = lookCall(lookId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Look
     * ### Get a Look.  Return detailed information about the Look and its associated Query.  
     * @param lookId Id of look (required)
     * @param fields Requested fields. (optional)
     * @return LookWithQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LookWithQuery look(Long lookId, String fields) throws ApiException {
        ApiResponse<LookWithQuery> resp = lookWithHttpInfo(lookId, fields);
        return resp.getData();
    }

    /**
     * Get Look
     * ### Get a Look.  Return detailed information about the Look and its associated Query.  
     * @param lookId Id of look (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;LookWithQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LookWithQuery> lookWithHttpInfo(Long lookId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = lookValidateBeforeCall(lookId, fields, null, null);
        Type localVarReturnType = new TypeToken<LookWithQuery>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Look (asynchronously)
     * ### Get a Look.  Return detailed information about the Look and its associated Query.  
     * @param lookId Id of look (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookAsync(Long lookId, String fields, final ApiCallback<LookWithQuery> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookValidateBeforeCall(lookId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LookWithQuery>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runLook
     * @param lookId Id of look (required)
     * @param resultFormat Format of result (required)
     * @param limit Row limit (may override the limit in the saved query). (optional)
     * @param applyFormatting Apply model-specified formatting to each result. (optional)
     * @param applyVis Apply visualization options to results. (optional)
     * @param cache Get results from cache if available. (optional)
     * @param imageWidth Render width for image formats. (optional)
     * @param imageHeight Render height for image formats. (optional)
     * @param generateDrillLinks Generate drill links (only applicable to &#39;json_detail&#39; format. (optional)
     * @param forceProduction Force use of production models even if the user is in development mode. (optional)
     * @param cacheOnly Retrieve any results from cache even if the results have expired. (optional)
     * @param pathPrefix Prefix to use for drill links (url encoded). (optional)
     * @param rebuildPdts Rebuild PDTS used in query. (optional)
     * @param serverTableCalcs Perform table calculations on query results (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runLookCall(Long lookId, String resultFormat, Long limit, Boolean applyFormatting, Boolean applyVis, Boolean cache, Long imageWidth, Long imageHeight, Boolean generateDrillLinks, Boolean forceProduction, Boolean cacheOnly, String pathPrefix, Boolean rebuildPdts, Boolean serverTableCalcs, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/looks/{look_id}/run/{result_format}"
            .replaceAll("\\{" + "look_id" + "\\}", apiClient.escapeString(lookId.toString()))
            .replaceAll("\\{" + "result_format" + "\\}", apiClient.escapeString(resultFormat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (applyFormatting != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apply_formatting", applyFormatting));
        if (applyVis != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("apply_vis", applyVis));
        if (cache != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cache", cache));
        if (imageWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("image_width", imageWidth));
        if (imageHeight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("image_height", imageHeight));
        if (generateDrillLinks != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("generate_drill_links", generateDrillLinks));
        if (forceProduction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("force_production", forceProduction));
        if (cacheOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cache_only", cacheOnly));
        if (pathPrefix != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path_prefix", pathPrefix));
        if (rebuildPdts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rebuild_pdts", rebuildPdts));
        if (serverTableCalcs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("server_table_calcs", serverTableCalcs));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text", "application/json", "image/png", "image/jpg"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runLookValidateBeforeCall(Long lookId, String resultFormat, Long limit, Boolean applyFormatting, Boolean applyVis, Boolean cache, Long imageWidth, Long imageHeight, Boolean generateDrillLinks, Boolean forceProduction, Boolean cacheOnly, String pathPrefix, Boolean rebuildPdts, Boolean serverTableCalcs, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookId' is set
        if (lookId == null) {
            throw new ApiException("Missing the required parameter 'lookId' when calling runLook(Async)");
        }
        
        // verify the required parameter 'resultFormat' is set
        if (resultFormat == null) {
            throw new ApiException("Missing the required parameter 'resultFormat' when calling runLook(Async)");
        }
        

        com.squareup.okhttp.Call call = runLookCall(lookId, resultFormat, limit, applyFormatting, applyVis, cache, imageWidth, imageHeight, generateDrillLinks, forceProduction, cacheOnly, pathPrefix, rebuildPdts, serverTableCalcs, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Run Look
     * ### Run a Look.  Runs a given look&#39;s query and returns the results in the requested format.  Suported formats:  | result_format | Description | :-----------: | :--- | | json | Plain json | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | md | Simple markdown | xlsx | MS Excel spreadsheet | sql | Returns the generated SQL rather than running the query | png | A PNG image of the visualization of the query | jpg | A JPG image of the visualization of the query   
     * @param lookId Id of look (required)
     * @param resultFormat Format of result (required)
     * @param limit Row limit (may override the limit in the saved query). (optional)
     * @param applyFormatting Apply model-specified formatting to each result. (optional)
     * @param applyVis Apply visualization options to results. (optional)
     * @param cache Get results from cache if available. (optional)
     * @param imageWidth Render width for image formats. (optional)
     * @param imageHeight Render height for image formats. (optional)
     * @param generateDrillLinks Generate drill links (only applicable to &#39;json_detail&#39; format. (optional)
     * @param forceProduction Force use of production models even if the user is in development mode. (optional)
     * @param cacheOnly Retrieve any results from cache even if the results have expired. (optional)
     * @param pathPrefix Prefix to use for drill links (url encoded). (optional)
     * @param rebuildPdts Rebuild PDTS used in query. (optional)
     * @param serverTableCalcs Perform table calculations on query results (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String runLook(Long lookId, String resultFormat, Long limit, Boolean applyFormatting, Boolean applyVis, Boolean cache, Long imageWidth, Long imageHeight, Boolean generateDrillLinks, Boolean forceProduction, Boolean cacheOnly, String pathPrefix, Boolean rebuildPdts, Boolean serverTableCalcs) throws ApiException {
        ApiResponse<String> resp = runLookWithHttpInfo(lookId, resultFormat, limit, applyFormatting, applyVis, cache, imageWidth, imageHeight, generateDrillLinks, forceProduction, cacheOnly, pathPrefix, rebuildPdts, serverTableCalcs);
        return resp.getData();
    }

    /**
     * Run Look
     * ### Run a Look.  Runs a given look&#39;s query and returns the results in the requested format.  Suported formats:  | result_format | Description | :-----------: | :--- | | json | Plain json | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | md | Simple markdown | xlsx | MS Excel spreadsheet | sql | Returns the generated SQL rather than running the query | png | A PNG image of the visualization of the query | jpg | A JPG image of the visualization of the query   
     * @param lookId Id of look (required)
     * @param resultFormat Format of result (required)
     * @param limit Row limit (may override the limit in the saved query). (optional)
     * @param applyFormatting Apply model-specified formatting to each result. (optional)
     * @param applyVis Apply visualization options to results. (optional)
     * @param cache Get results from cache if available. (optional)
     * @param imageWidth Render width for image formats. (optional)
     * @param imageHeight Render height for image formats. (optional)
     * @param generateDrillLinks Generate drill links (only applicable to &#39;json_detail&#39; format. (optional)
     * @param forceProduction Force use of production models even if the user is in development mode. (optional)
     * @param cacheOnly Retrieve any results from cache even if the results have expired. (optional)
     * @param pathPrefix Prefix to use for drill links (url encoded). (optional)
     * @param rebuildPdts Rebuild PDTS used in query. (optional)
     * @param serverTableCalcs Perform table calculations on query results (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> runLookWithHttpInfo(Long lookId, String resultFormat, Long limit, Boolean applyFormatting, Boolean applyVis, Boolean cache, Long imageWidth, Long imageHeight, Boolean generateDrillLinks, Boolean forceProduction, Boolean cacheOnly, String pathPrefix, Boolean rebuildPdts, Boolean serverTableCalcs) throws ApiException {
        com.squareup.okhttp.Call call = runLookValidateBeforeCall(lookId, resultFormat, limit, applyFormatting, applyVis, cache, imageWidth, imageHeight, generateDrillLinks, forceProduction, cacheOnly, pathPrefix, rebuildPdts, serverTableCalcs, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Run Look (asynchronously)
     * ### Run a Look.  Runs a given look&#39;s query and returns the results in the requested format.  Suported formats:  | result_format | Description | :-----------: | :--- | | json | Plain json | json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query | csv | Comma separated values with a header | txt | Tab separated values with a header | html | Simple html | md | Simple markdown | xlsx | MS Excel spreadsheet | sql | Returns the generated SQL rather than running the query | png | A PNG image of the visualization of the query | jpg | A JPG image of the visualization of the query   
     * @param lookId Id of look (required)
     * @param resultFormat Format of result (required)
     * @param limit Row limit (may override the limit in the saved query). (optional)
     * @param applyFormatting Apply model-specified formatting to each result. (optional)
     * @param applyVis Apply visualization options to results. (optional)
     * @param cache Get results from cache if available. (optional)
     * @param imageWidth Render width for image formats. (optional)
     * @param imageHeight Render height for image formats. (optional)
     * @param generateDrillLinks Generate drill links (only applicable to &#39;json_detail&#39; format. (optional)
     * @param forceProduction Force use of production models even if the user is in development mode. (optional)
     * @param cacheOnly Retrieve any results from cache even if the results have expired. (optional)
     * @param pathPrefix Prefix to use for drill links (url encoded). (optional)
     * @param rebuildPdts Rebuild PDTS used in query. (optional)
     * @param serverTableCalcs Perform table calculations on query results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runLookAsync(Long lookId, String resultFormat, Long limit, Boolean applyFormatting, Boolean applyVis, Boolean cache, Long imageWidth, Long imageHeight, Boolean generateDrillLinks, Boolean forceProduction, Boolean cacheOnly, String pathPrefix, Boolean rebuildPdts, Boolean serverTableCalcs, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runLookValidateBeforeCall(lookId, resultFormat, limit, applyFormatting, applyVis, cache, imageWidth, imageHeight, generateDrillLinks, forceProduction, cacheOnly, pathPrefix, rebuildPdts, serverTableCalcs, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchLooks
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param title Match Look title. (optional)
     * @param description Match Look description. (optional)
     * @param contentFavoriteId Match content favorite id (optional)
     * @param spaceId Filter on a particular space. (optional)
     * @param userId Filter on dashboards created by a particular user. (optional)
     * @param viewCount Filter on a particular value of view_count (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchLooksCall(String fields, Long page, Long perPage, Long limit, Long offset, String sorts, String title, String description, Long contentFavoriteId, String spaceId, String userId, String viewCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/looks/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));
        if (title != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("title", title));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (contentFavoriteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("content_favorite_id", contentFavoriteId));
        if (spaceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("space_id", spaceId));
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        if (viewCount != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("view_count", viewCount));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchLooksValidateBeforeCall(String fields, Long page, Long perPage, Long limit, Long offset, String sorts, String title, String description, Long contentFavoriteId, String spaceId, String userId, String viewCount, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = searchLooksCall(fields, page, perPage, limit, offset, sorts, title, description, contentFavoriteId, spaceId, userId, viewCount, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Looks
     * Search looks.
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param title Match Look title. (optional)
     * @param description Match Look description. (optional)
     * @param contentFavoriteId Match content favorite id (optional)
     * @param spaceId Filter on a particular space. (optional)
     * @param userId Filter on dashboards created by a particular user. (optional)
     * @param viewCount Filter on a particular value of view_count (optional)
     * @return List&lt;Look&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Look> searchLooks(String fields, Long page, Long perPage, Long limit, Long offset, String sorts, String title, String description, Long contentFavoriteId, String spaceId, String userId, String viewCount) throws ApiException {
        ApiResponse<List<Look>> resp = searchLooksWithHttpInfo(fields, page, perPage, limit, offset, sorts, title, description, contentFavoriteId, spaceId, userId, viewCount);
        return resp.getData();
    }

    /**
     * Search Looks
     * Search looks.
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param title Match Look title. (optional)
     * @param description Match Look description. (optional)
     * @param contentFavoriteId Match content favorite id (optional)
     * @param spaceId Filter on a particular space. (optional)
     * @param userId Filter on dashboards created by a particular user. (optional)
     * @param viewCount Filter on a particular value of view_count (optional)
     * @return ApiResponse&lt;List&lt;Look&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Look>> searchLooksWithHttpInfo(String fields, Long page, Long perPage, Long limit, Long offset, String sorts, String title, String description, Long contentFavoriteId, String spaceId, String userId, String viewCount) throws ApiException {
        com.squareup.okhttp.Call call = searchLooksValidateBeforeCall(fields, page, perPage, limit, offset, sorts, title, description, contentFavoriteId, spaceId, userId, viewCount, null, null);
        Type localVarReturnType = new TypeToken<List<Look>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Looks (asynchronously)
     * Search looks.
     * @param fields Requested fields. (optional)
     * @param page Requested page. (optional)
     * @param perPage Results per page. (optional)
     * @param limit Number of results to return. (used with offset and takes priority over page and per_page) (optional)
     * @param offset Number of results to skip before returning any. (used with limit and takes priority over page and per_page) (optional)
     * @param sorts Fields to sort by. (optional)
     * @param title Match Look title. (optional)
     * @param description Match Look description. (optional)
     * @param contentFavoriteId Match content favorite id (optional)
     * @param spaceId Filter on a particular space. (optional)
     * @param userId Filter on dashboards created by a particular user. (optional)
     * @param viewCount Filter on a particular value of view_count (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchLooksAsync(String fields, Long page, Long perPage, Long limit, Long offset, String sorts, String title, String description, Long contentFavoriteId, String spaceId, String userId, String viewCount, final ApiCallback<List<Look>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchLooksValidateBeforeCall(fields, page, perPage, limit, offset, sorts, title, description, contentFavoriteId, spaceId, userId, viewCount, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Look>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLook
     * @param lookId Id of look (required)
     * @param body Look (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLookCall(Long lookId, LookWithQuery body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/looks/{look_id}"
            .replaceAll("\\{" + "look_id" + "\\}", apiClient.escapeString(lookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLookValidateBeforeCall(Long lookId, LookWithQuery body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookId' is set
        if (lookId == null) {
            throw new ApiException("Missing the required parameter 'lookId' when calling updateLook(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLook(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLookCall(lookId, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Look
     * ### Update the Look with a specific id.
     * @param lookId Id of look (required)
     * @param body Look (required)
     * @param fields Requested fields. (optional)
     * @return LookWithQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LookWithQuery updateLook(Long lookId, LookWithQuery body, String fields) throws ApiException {
        ApiResponse<LookWithQuery> resp = updateLookWithHttpInfo(lookId, body, fields);
        return resp.getData();
    }

    /**
     * Update Look
     * ### Update the Look with a specific id.
     * @param lookId Id of look (required)
     * @param body Look (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;LookWithQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LookWithQuery> updateLookWithHttpInfo(Long lookId, LookWithQuery body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateLookValidateBeforeCall(lookId, body, fields, null, null);
        Type localVarReturnType = new TypeToken<LookWithQuery>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Look (asynchronously)
     * ### Update the Look with a specific id.
     * @param lookId Id of look (required)
     * @param body Look (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLookAsync(Long lookId, LookWithQuery body, String fields, final ApiCallback<LookWithQuery> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLookValidateBeforeCall(lookId, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LookWithQuery>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
