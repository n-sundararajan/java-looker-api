/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.HomepageItem;
import io.swagger.client.model.HomepageSection;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HomepageApi {
    private ApiClient apiClient;

    public HomepageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HomepageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for allHomepageItems
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param homepageSectionId Filter to a specific homepage section (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allHomepageItemsCall(String fields, String sorts, String homepageSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homepage_items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));
        if (homepageSectionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("homepage_section_id", homepageSectionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allHomepageItemsValidateBeforeCall(String fields, String sorts, String homepageSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = allHomepageItemsCall(fields, sorts, homepageSectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All Homepage Items
     * ### Get information about all homepage items. 
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param homepageSectionId Filter to a specific homepage section (optional)
     * @return List&lt;HomepageItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<HomepageItem> allHomepageItems(String fields, String sorts, String homepageSectionId) throws ApiException {
        ApiResponse<List<HomepageItem>> resp = allHomepageItemsWithHttpInfo(fields, sorts, homepageSectionId);
        return resp.getData();
    }

    /**
     * Get All Homepage Items
     * ### Get information about all homepage items. 
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param homepageSectionId Filter to a specific homepage section (optional)
     * @return ApiResponse&lt;List&lt;HomepageItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<HomepageItem>> allHomepageItemsWithHttpInfo(String fields, String sorts, String homepageSectionId) throws ApiException {
        com.squareup.okhttp.Call call = allHomepageItemsValidateBeforeCall(fields, sorts, homepageSectionId, null, null);
        Type localVarReturnType = new TypeToken<List<HomepageItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Homepage Items (asynchronously)
     * ### Get information about all homepage items. 
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param homepageSectionId Filter to a specific homepage section (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allHomepageItemsAsync(String fields, String sorts, String homepageSectionId, final ApiCallback<List<HomepageItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allHomepageItemsValidateBeforeCall(fields, sorts, homepageSectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<HomepageItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allHomepageSections
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allHomepageSectionsCall(String fields, String sorts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homepage_sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (sorts != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorts", sorts));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allHomepageSectionsValidateBeforeCall(String fields, String sorts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = allHomepageSectionsCall(fields, sorts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All Homepage sections
     * ### Get information about all homepage sections. 
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @return List&lt;HomepageSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<HomepageSection> allHomepageSections(String fields, String sorts) throws ApiException {
        ApiResponse<List<HomepageSection>> resp = allHomepageSectionsWithHttpInfo(fields, sorts);
        return resp.getData();
    }

    /**
     * Get All Homepage sections
     * ### Get information about all homepage sections. 
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @return ApiResponse&lt;List&lt;HomepageSection&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<HomepageSection>> allHomepageSectionsWithHttpInfo(String fields, String sorts) throws ApiException {
        com.squareup.okhttp.Call call = allHomepageSectionsValidateBeforeCall(fields, sorts, null, null);
        Type localVarReturnType = new TypeToken<List<HomepageSection>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Homepage sections (asynchronously)
     * ### Get information about all homepage sections. 
     * @param fields Requested fields. (optional)
     * @param sorts Fields to sort by. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allHomepageSectionsAsync(String fields, String sorts, final ApiCallback<List<HomepageSection>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allHomepageSectionsValidateBeforeCall(fields, sorts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<HomepageSection>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createHomepageItem
     * @param body Homepage Item (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHomepageItemCall(HomepageItem body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/homepage_items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHomepageItemValidateBeforeCall(HomepageItem body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createHomepageItemCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Homepage Item
     * ### Create a new homepage item. 
     * @param body Homepage Item (optional)
     * @param fields Requested fields. (optional)
     * @return HomepageItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HomepageItem createHomepageItem(HomepageItem body, String fields) throws ApiException {
        ApiResponse<HomepageItem> resp = createHomepageItemWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * Create Homepage Item
     * ### Create a new homepage item. 
     * @param body Homepage Item (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;HomepageItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HomepageItem> createHomepageItemWithHttpInfo(HomepageItem body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createHomepageItemValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<HomepageItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Homepage Item (asynchronously)
     * ### Create a new homepage item. 
     * @param body Homepage Item (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHomepageItemAsync(HomepageItem body, String fields, final ApiCallback<HomepageItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHomepageItemValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HomepageItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createHomepageSection
     * @param body Homepage section (optional)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createHomepageSectionCall(HomepageSection body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/homepage_sections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createHomepageSectionValidateBeforeCall(HomepageSection body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createHomepageSectionCall(body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Homepage section
     * ### Create a new homepage section. 
     * @param body Homepage section (optional)
     * @param fields Requested fields. (optional)
     * @return HomepageSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HomepageSection createHomepageSection(HomepageSection body, String fields) throws ApiException {
        ApiResponse<HomepageSection> resp = createHomepageSectionWithHttpInfo(body, fields);
        return resp.getData();
    }

    /**
     * Create Homepage section
     * ### Create a new homepage section. 
     * @param body Homepage section (optional)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;HomepageSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HomepageSection> createHomepageSectionWithHttpInfo(HomepageSection body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = createHomepageSectionValidateBeforeCall(body, fields, null, null);
        Type localVarReturnType = new TypeToken<HomepageSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Homepage section (asynchronously)
     * ### Create a new homepage section. 
     * @param body Homepage section (optional)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createHomepageSectionAsync(HomepageSection body, String fields, final ApiCallback<HomepageSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createHomepageSectionValidateBeforeCall(body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HomepageSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteHomepageItem
     * @param homepageItemId Id of homepage_item (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHomepageItemCall(Long homepageItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homepage_items/{homepage_item_id}"
            .replaceAll("\\{" + "homepage_item_id" + "\\}", apiClient.escapeString(homepageItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHomepageItemValidateBeforeCall(Long homepageItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'homepageItemId' is set
        if (homepageItemId == null) {
            throw new ApiException("Missing the required parameter 'homepageItemId' when calling deleteHomepageItem(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteHomepageItemCall(homepageItemId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Homepage Item
     * ### Delete a homepage item. 
     * @param homepageItemId Id of homepage_item (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteHomepageItem(Long homepageItemId) throws ApiException {
        ApiResponse<String> resp = deleteHomepageItemWithHttpInfo(homepageItemId);
        return resp.getData();
    }

    /**
     * Delete Homepage Item
     * ### Delete a homepage item. 
     * @param homepageItemId Id of homepage_item (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteHomepageItemWithHttpInfo(Long homepageItemId) throws ApiException {
        com.squareup.okhttp.Call call = deleteHomepageItemValidateBeforeCall(homepageItemId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Homepage Item (asynchronously)
     * ### Delete a homepage item. 
     * @param homepageItemId Id of homepage_item (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteHomepageItemAsync(Long homepageItemId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHomepageItemValidateBeforeCall(homepageItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteHomepageSection
     * @param homepageSectionId Id of homepage_section (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteHomepageSectionCall(Long homepageSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homepage_sections/{homepage_section_id}"
            .replaceAll("\\{" + "homepage_section_id" + "\\}", apiClient.escapeString(homepageSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteHomepageSectionValidateBeforeCall(Long homepageSectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'homepageSectionId' is set
        if (homepageSectionId == null) {
            throw new ApiException("Missing the required parameter 'homepageSectionId' when calling deleteHomepageSection(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteHomepageSectionCall(homepageSectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Homepage section
     * ### Delete a homepage section. 
     * @param homepageSectionId Id of homepage_section (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteHomepageSection(Long homepageSectionId) throws ApiException {
        ApiResponse<String> resp = deleteHomepageSectionWithHttpInfo(homepageSectionId);
        return resp.getData();
    }

    /**
     * Delete Homepage section
     * ### Delete a homepage section. 
     * @param homepageSectionId Id of homepage_section (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteHomepageSectionWithHttpInfo(Long homepageSectionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteHomepageSectionValidateBeforeCall(homepageSectionId, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Homepage section (asynchronously)
     * ### Delete a homepage section. 
     * @param homepageSectionId Id of homepage_section (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteHomepageSectionAsync(Long homepageSectionId, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteHomepageSectionValidateBeforeCall(homepageSectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for homepageItem
     * @param homepageItemId Id of homepage item (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call homepageItemCall(Long homepageItemId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homepage_items/{homepage_item_id}"
            .replaceAll("\\{" + "homepage_item_id" + "\\}", apiClient.escapeString(homepageItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call homepageItemValidateBeforeCall(Long homepageItemId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'homepageItemId' is set
        if (homepageItemId == null) {
            throw new ApiException("Missing the required parameter 'homepageItemId' when calling homepageItem(Async)");
        }
        

        com.squareup.okhttp.Call call = homepageItemCall(homepageItemId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Homepage Item
     * ### Get information about a homepage item. 
     * @param homepageItemId Id of homepage item (required)
     * @param fields Requested fields. (optional)
     * @return HomepageItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HomepageItem homepageItem(Long homepageItemId, String fields) throws ApiException {
        ApiResponse<HomepageItem> resp = homepageItemWithHttpInfo(homepageItemId, fields);
        return resp.getData();
    }

    /**
     * Get Homepage Item
     * ### Get information about a homepage item. 
     * @param homepageItemId Id of homepage item (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;HomepageItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HomepageItem> homepageItemWithHttpInfo(Long homepageItemId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = homepageItemValidateBeforeCall(homepageItemId, fields, null, null);
        Type localVarReturnType = new TypeToken<HomepageItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Homepage Item (asynchronously)
     * ### Get information about a homepage item. 
     * @param homepageItemId Id of homepage item (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call homepageItemAsync(Long homepageItemId, String fields, final ApiCallback<HomepageItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = homepageItemValidateBeforeCall(homepageItemId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HomepageItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for homepageSection
     * @param homepageSectionId Id of homepage section (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call homepageSectionCall(Long homepageSectionId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/homepage_sections/{homepage_section_id}"
            .replaceAll("\\{" + "homepage_section_id" + "\\}", apiClient.escapeString(homepageSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call homepageSectionValidateBeforeCall(Long homepageSectionId, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'homepageSectionId' is set
        if (homepageSectionId == null) {
            throw new ApiException("Missing the required parameter 'homepageSectionId' when calling homepageSection(Async)");
        }
        

        com.squareup.okhttp.Call call = homepageSectionCall(homepageSectionId, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Homepage section
     * ### Get information about a homepage section. 
     * @param homepageSectionId Id of homepage section (required)
     * @param fields Requested fields. (optional)
     * @return HomepageSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HomepageSection homepageSection(Long homepageSectionId, String fields) throws ApiException {
        ApiResponse<HomepageSection> resp = homepageSectionWithHttpInfo(homepageSectionId, fields);
        return resp.getData();
    }

    /**
     * Get Homepage section
     * ### Get information about a homepage section. 
     * @param homepageSectionId Id of homepage section (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;HomepageSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HomepageSection> homepageSectionWithHttpInfo(Long homepageSectionId, String fields) throws ApiException {
        com.squareup.okhttp.Call call = homepageSectionValidateBeforeCall(homepageSectionId, fields, null, null);
        Type localVarReturnType = new TypeToken<HomepageSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Homepage section (asynchronously)
     * ### Get information about a homepage section. 
     * @param homepageSectionId Id of homepage section (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call homepageSectionAsync(Long homepageSectionId, String fields, final ApiCallback<HomepageSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = homepageSectionValidateBeforeCall(homepageSectionId, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HomepageSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateHomepageItem
     * @param homepageItemId Id of homepage item (required)
     * @param body Homepage Item (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHomepageItemCall(Long homepageItemId, HomepageItem body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/homepage_items/{homepage_item_id}"
            .replaceAll("\\{" + "homepage_item_id" + "\\}", apiClient.escapeString(homepageItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHomepageItemValidateBeforeCall(Long homepageItemId, HomepageItem body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'homepageItemId' is set
        if (homepageItemId == null) {
            throw new ApiException("Missing the required parameter 'homepageItemId' when calling updateHomepageItem(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateHomepageItem(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHomepageItemCall(homepageItemId, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Homepage Item
     * ### Update a homepage item definition. 
     * @param homepageItemId Id of homepage item (required)
     * @param body Homepage Item (required)
     * @param fields Requested fields. (optional)
     * @return HomepageItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HomepageItem updateHomepageItem(Long homepageItemId, HomepageItem body, String fields) throws ApiException {
        ApiResponse<HomepageItem> resp = updateHomepageItemWithHttpInfo(homepageItemId, body, fields);
        return resp.getData();
    }

    /**
     * Update Homepage Item
     * ### Update a homepage item definition. 
     * @param homepageItemId Id of homepage item (required)
     * @param body Homepage Item (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;HomepageItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HomepageItem> updateHomepageItemWithHttpInfo(Long homepageItemId, HomepageItem body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateHomepageItemValidateBeforeCall(homepageItemId, body, fields, null, null);
        Type localVarReturnType = new TypeToken<HomepageItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Homepage Item (asynchronously)
     * ### Update a homepage item definition. 
     * @param homepageItemId Id of homepage item (required)
     * @param body Homepage Item (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHomepageItemAsync(Long homepageItemId, HomepageItem body, String fields, final ApiCallback<HomepageItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHomepageItemValidateBeforeCall(homepageItemId, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HomepageItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateHomepageSection
     * @param homepageSectionId Id of homepage section (required)
     * @param body Homepage section (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateHomepageSectionCall(Long homepageSectionId, HomepageSection body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/homepage_sections/{homepage_section_id}"
            .replaceAll("\\{" + "homepage_section_id" + "\\}", apiClient.escapeString(homepageSectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateHomepageSectionValidateBeforeCall(Long homepageSectionId, HomepageSection body, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'homepageSectionId' is set
        if (homepageSectionId == null) {
            throw new ApiException("Missing the required parameter 'homepageSectionId' when calling updateHomepageSection(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateHomepageSection(Async)");
        }
        

        com.squareup.okhttp.Call call = updateHomepageSectionCall(homepageSectionId, body, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Homepage section
     * ### Update a homepage section definition. 
     * @param homepageSectionId Id of homepage section (required)
     * @param body Homepage section (required)
     * @param fields Requested fields. (optional)
     * @return HomepageSection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HomepageSection updateHomepageSection(Long homepageSectionId, HomepageSection body, String fields) throws ApiException {
        ApiResponse<HomepageSection> resp = updateHomepageSectionWithHttpInfo(homepageSectionId, body, fields);
        return resp.getData();
    }

    /**
     * Update Homepage section
     * ### Update a homepage section definition. 
     * @param homepageSectionId Id of homepage section (required)
     * @param body Homepage section (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;HomepageSection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HomepageSection> updateHomepageSectionWithHttpInfo(Long homepageSectionId, HomepageSection body, String fields) throws ApiException {
        com.squareup.okhttp.Call call = updateHomepageSectionValidateBeforeCall(homepageSectionId, body, fields, null, null);
        Type localVarReturnType = new TypeToken<HomepageSection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Homepage section (asynchronously)
     * ### Update a homepage section definition. 
     * @param homepageSectionId Id of homepage section (required)
     * @param body Homepage section (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateHomepageSectionAsync(Long homepageSectionId, HomepageSection body, String fields, final ApiCallback<HomepageSection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateHomepageSectionValidateBeforeCall(homepageSectionId, body, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HomepageSection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
