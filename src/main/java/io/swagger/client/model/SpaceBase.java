/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * SpaceBase
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class SpaceBase {
  @SerializedName("id")
  private String id = null;

  @SerializedName("content_metadata_id")
  private Long contentMetadataId = null;

  @SerializedName("creator_id")
  private Long creatorId = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("is_personal")
  private Boolean isPersonal = null;

  @SerializedName("is_personal_descendant")
  private Boolean isPersonalDescendant = null;

  @SerializedName("is_shared_root")
  private Boolean isSharedRoot = null;

  @SerializedName("is_users_root")
  private Boolean isUsersRoot = null;

  @SerializedName("is_root")
  private Boolean isRoot = null;

  @SerializedName("is_user_root")
  private Boolean isUserRoot = null;

  @SerializedName("is_embed")
  private Boolean isEmbed = null;

  @SerializedName("is_embed_shared_root")
  private Boolean isEmbedSharedRoot = null;

  @SerializedName("is_embed_users_root")
  private Boolean isEmbedUsersRoot = null;

  @SerializedName("external_id")
  private String externalId = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Unique Id
   * @return id
  **/
  @ApiModelProperty(value = "Unique Id")
  public String getId() {
    return id;
  }

   /**
   * Id of content metadata
   * @return contentMetadataId
  **/
  @ApiModelProperty(value = "Id of content metadata")
  public Long getContentMetadataId() {
    return contentMetadataId;
  }

   /**
   * User Id of Creator
   * @return creatorId
  **/
  @ApiModelProperty(value = "User Id of Creator")
  public Long getCreatorId() {
    return creatorId;
  }

   /**
   * Unique Name
   * @return name
  **/
  @ApiModelProperty(value = "Unique Name")
  public String getName() {
    return name;
  }

   /**
   * Space is a user&#39;s personal space
   * @return isPersonal
  **/
  @ApiModelProperty(value = "Space is a user's personal space")
  public Boolean isIsPersonal() {
    return isPersonal;
  }

   /**
   * Space is descendant of a user&#39;s personal space
   * @return isPersonalDescendant
  **/
  @ApiModelProperty(value = "Space is descendant of a user's personal space")
  public Boolean isIsPersonalDescendant() {
    return isPersonalDescendant;
  }

   /**
   * Space is the root shared space
   * @return isSharedRoot
  **/
  @ApiModelProperty(value = "Space is the root shared space")
  public Boolean isIsSharedRoot() {
    return isSharedRoot;
  }

   /**
   * Space is the root user space
   * @return isUsersRoot
  **/
  @ApiModelProperty(value = "Space is the root user space")
  public Boolean isIsUsersRoot() {
    return isUsersRoot;
  }

   /**
   * (DEPRECATED) Space is the root shared space (alias of is_shared_root)
   * @return isRoot
  **/
  @ApiModelProperty(value = "(DEPRECATED) Space is the root shared space (alias of is_shared_root)")
  public Boolean isIsRoot() {
    return isRoot;
  }

   /**
   * (DEPRECATED) Space is the root user space (alias of is_users_root
   * @return isUserRoot
  **/
  @ApiModelProperty(value = "(DEPRECATED) Space is the root user space (alias of is_users_root")
  public Boolean isIsUserRoot() {
    return isUserRoot;
  }

   /**
   * Space is an embed space
   * @return isEmbed
  **/
  @ApiModelProperty(value = "Space is an embed space")
  public Boolean isIsEmbed() {
    return isEmbed;
  }

   /**
   * Space is the root embed shared space
   * @return isEmbedSharedRoot
  **/
  @ApiModelProperty(value = "Space is the root embed shared space")
  public Boolean isIsEmbedSharedRoot() {
    return isEmbedSharedRoot;
  }

   /**
   * Space is the root embed users space
   * @return isEmbedUsersRoot
  **/
  @ApiModelProperty(value = "Space is the root embed users space")
  public Boolean isIsEmbedUsersRoot() {
    return isEmbedUsersRoot;
  }

   /**
   * Embedder&#39;s Id if this space was autogenerated as an embedding shared space via &#39;external_group_id&#39; in an SSO embed login
   * @return externalId
  **/
  @ApiModelProperty(value = "Embedder's Id if this space was autogenerated as an embedding shared space via 'external_group_id' in an SSO embed login")
  public String getExternalId() {
    return externalId;
  }

  public SpaceBase can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public SpaceBase putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpaceBase spaceBase = (SpaceBase) o;
    return Objects.equals(this.id, spaceBase.id) &&
        Objects.equals(this.contentMetadataId, spaceBase.contentMetadataId) &&
        Objects.equals(this.creatorId, spaceBase.creatorId) &&
        Objects.equals(this.name, spaceBase.name) &&
        Objects.equals(this.isPersonal, spaceBase.isPersonal) &&
        Objects.equals(this.isPersonalDescendant, spaceBase.isPersonalDescendant) &&
        Objects.equals(this.isSharedRoot, spaceBase.isSharedRoot) &&
        Objects.equals(this.isUsersRoot, spaceBase.isUsersRoot) &&
        Objects.equals(this.isRoot, spaceBase.isRoot) &&
        Objects.equals(this.isUserRoot, spaceBase.isUserRoot) &&
        Objects.equals(this.isEmbed, spaceBase.isEmbed) &&
        Objects.equals(this.isEmbedSharedRoot, spaceBase.isEmbedSharedRoot) &&
        Objects.equals(this.isEmbedUsersRoot, spaceBase.isEmbedUsersRoot) &&
        Objects.equals(this.externalId, spaceBase.externalId) &&
        Objects.equals(this.can, spaceBase.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, contentMetadataId, creatorId, name, isPersonal, isPersonalDescendant, isSharedRoot, isUsersRoot, isRoot, isUserRoot, isEmbed, isEmbedSharedRoot, isEmbedUsersRoot, externalId, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpaceBase {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    contentMetadataId: ").append(toIndentedString(contentMetadataId)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isPersonal: ").append(toIndentedString(isPersonal)).append("\n");
    sb.append("    isPersonalDescendant: ").append(toIndentedString(isPersonalDescendant)).append("\n");
    sb.append("    isSharedRoot: ").append(toIndentedString(isSharedRoot)).append("\n");
    sb.append("    isUsersRoot: ").append(toIndentedString(isUsersRoot)).append("\n");
    sb.append("    isRoot: ").append(toIndentedString(isRoot)).append("\n");
    sb.append("    isUserRoot: ").append(toIndentedString(isUserRoot)).append("\n");
    sb.append("    isEmbed: ").append(toIndentedString(isEmbed)).append("\n");
    sb.append("    isEmbedSharedRoot: ").append(toIndentedString(isEmbedSharedRoot)).append("\n");
    sb.append("    isEmbedUsersRoot: ").append(toIndentedString(isEmbedUsersRoot)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

