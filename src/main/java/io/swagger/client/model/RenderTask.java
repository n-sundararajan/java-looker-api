/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * RenderTask
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class RenderTask {
  @SerializedName("id")
  private String id = null;

  @SerializedName("created_at")
  private String createdAt = null;

  @SerializedName("finalized_at")
  private String finalizedAt = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("status_detail")
  private String statusDetail = null;

  @SerializedName("user_id")
  private Long userId = null;

  @SerializedName("runtime")
  private Double runtime = null;

  @SerializedName("query_runtime")
  private Double queryRuntime = null;

  @SerializedName("render_runtime")
  private Double renderRuntime = null;

  @SerializedName("result_format")
  private String resultFormat = null;

  @SerializedName("look_id")
  private Long lookId = null;

  @SerializedName("dashboard_id")
  private Long dashboardId = null;

  @SerializedName("lookml_dashboard_id")
  private String lookmlDashboardId = null;

  @SerializedName("query_id")
  private Long queryId = null;

  @SerializedName("width")
  private Long width = null;

  @SerializedName("height")
  private Long height = null;

  @SerializedName("dashboard_style")
  private String dashboardStyle = null;

  @SerializedName("dashboard_filters")
  private String dashboardFilters = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Id of this render task
   * @return id
  **/
  @ApiModelProperty(value = "Id of this render task")
  public String getId() {
    return id;
  }

   /**
   * Date/Time render task was created
   * @return createdAt
  **/
  @ApiModelProperty(value = "Date/Time render task was created")
  public String getCreatedAt() {
    return createdAt;
  }

   /**
   * Date/Time render task was completed
   * @return finalizedAt
  **/
  @ApiModelProperty(value = "Date/Time render task was completed")
  public String getFinalizedAt() {
    return finalizedAt;
  }

   /**
   * Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure
   * @return status
  **/
  @ApiModelProperty(value = "Render task status: enqueued_for_query, querying, enqueued_for_render, rendering, success, failure")
  public String getStatus() {
    return status;
  }

   /**
   * Additional information about the current status
   * @return statusDetail
  **/
  @ApiModelProperty(value = "Additional information about the current status")
  public String getStatusDetail() {
    return statusDetail;
  }

   /**
   * The user account permissions in which the render task will execute
   * @return userId
  **/
  @ApiModelProperty(value = "The user account permissions in which the render task will execute")
  public Long getUserId() {
    return userId;
  }

   /**
   * Total seconds elapsed for render task
   * @return runtime
  **/
  @ApiModelProperty(value = "Total seconds elapsed for render task")
  public Double getRuntime() {
    return runtime;
  }

   /**
   * Number of seconds elapsed running queries
   * @return queryRuntime
  **/
  @ApiModelProperty(value = "Number of seconds elapsed running queries")
  public Double getQueryRuntime() {
    return queryRuntime;
  }

   /**
   * Number of seconds elapsed rendering data
   * @return renderRuntime
  **/
  @ApiModelProperty(value = "Number of seconds elapsed rendering data")
  public Double getRenderRuntime() {
    return renderRuntime;
  }

   /**
   * Output format: pdf, png, or jpg
   * @return resultFormat
  **/
  @ApiModelProperty(value = "Output format: pdf, png, or jpg")
  public String getResultFormat() {
    return resultFormat;
  }

   /**
   * Id of look to render
   * @return lookId
  **/
  @ApiModelProperty(value = "Id of look to render")
  public Long getLookId() {
    return lookId;
  }

   /**
   * Id of dashboard to render
   * @return dashboardId
  **/
  @ApiModelProperty(value = "Id of dashboard to render")
  public Long getDashboardId() {
    return dashboardId;
  }

   /**
   * Id of lookml dashboard to render
   * @return lookmlDashboardId
  **/
  @ApiModelProperty(value = "Id of lookml dashboard to render")
  public String getLookmlDashboardId() {
    return lookmlDashboardId;
  }

   /**
   * Id of query to render
   * @return queryId
  **/
  @ApiModelProperty(value = "Id of query to render")
  public Long getQueryId() {
    return queryId;
  }

   /**
   * Output width in pixels
   * @return width
  **/
  @ApiModelProperty(value = "Output width in pixels")
  public Long getWidth() {
    return width;
  }

   /**
   * Output height in pixels. Flowed layouts may ignore this value.
   * @return height
  **/
  @ApiModelProperty(value = "Output height in pixels. Flowed layouts may ignore this value.")
  public Long getHeight() {
    return height;
  }

   /**
   * Dashboard layout style: single_column or tiled
   * @return dashboardStyle
  **/
  @ApiModelProperty(value = "Dashboard layout style: single_column or tiled")
  public String getDashboardStyle() {
    return dashboardStyle;
  }

   /**
   * Filter values to apply to the dashboard queries, in URL query format
   * @return dashboardFilters
  **/
  @ApiModelProperty(value = "Filter values to apply to the dashboard queries, in URL query format")
  public String getDashboardFilters() {
    return dashboardFilters;
  }

  public RenderTask can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public RenderTask putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RenderTask renderTask = (RenderTask) o;
    return Objects.equals(this.id, renderTask.id) &&
        Objects.equals(this.createdAt, renderTask.createdAt) &&
        Objects.equals(this.finalizedAt, renderTask.finalizedAt) &&
        Objects.equals(this.status, renderTask.status) &&
        Objects.equals(this.statusDetail, renderTask.statusDetail) &&
        Objects.equals(this.userId, renderTask.userId) &&
        Objects.equals(this.runtime, renderTask.runtime) &&
        Objects.equals(this.queryRuntime, renderTask.queryRuntime) &&
        Objects.equals(this.renderRuntime, renderTask.renderRuntime) &&
        Objects.equals(this.resultFormat, renderTask.resultFormat) &&
        Objects.equals(this.lookId, renderTask.lookId) &&
        Objects.equals(this.dashboardId, renderTask.dashboardId) &&
        Objects.equals(this.lookmlDashboardId, renderTask.lookmlDashboardId) &&
        Objects.equals(this.queryId, renderTask.queryId) &&
        Objects.equals(this.width, renderTask.width) &&
        Objects.equals(this.height, renderTask.height) &&
        Objects.equals(this.dashboardStyle, renderTask.dashboardStyle) &&
        Objects.equals(this.dashboardFilters, renderTask.dashboardFilters) &&
        Objects.equals(this.can, renderTask.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, finalizedAt, status, statusDetail, userId, runtime, queryRuntime, renderRuntime, resultFormat, lookId, dashboardId, lookmlDashboardId, queryId, width, height, dashboardStyle, dashboardFilters, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RenderTask {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    finalizedAt: ").append(toIndentedString(finalizedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetail: ").append(toIndentedString(statusDetail)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    queryRuntime: ").append(toIndentedString(queryRuntime)).append("\n");
    sb.append("    renderRuntime: ").append(toIndentedString(renderRuntime)).append("\n");
    sb.append("    resultFormat: ").append(toIndentedString(resultFormat)).append("\n");
    sb.append("    lookId: ").append(toIndentedString(lookId)).append("\n");
    sb.append("    dashboardId: ").append(toIndentedString(dashboardId)).append("\n");
    sb.append("    lookmlDashboardId: ").append(toIndentedString(lookmlDashboardId)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    dashboardStyle: ").append(toIndentedString(dashboardStyle)).append("\n");
    sb.append("    dashboardFilters: ").append(toIndentedString(dashboardFilters)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

