/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.DashboardBase;
import io.swagger.client.model.LookBasic;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ContentFavorite
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class ContentFavorite {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("user_id")
  private Long userId = null;

  @SerializedName("content_metadata_id")
  private Long contentMetadataId = null;

  @SerializedName("look_id")
  private Long lookId = null;

  @SerializedName("dashboard_id")
  private Long dashboardId = null;

  @SerializedName("look")
  private LookBasic look = null;

  @SerializedName("dashboard")
  private DashboardBase dashboard = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Unique Id
   * @return id
  **/
  @ApiModelProperty(value = "Unique Id")
  public Long getId() {
    return id;
  }

  public ContentFavorite userId(Long userId) {
    this.userId = userId;
    return this;
  }

   /**
   * User Id which owns this ContentFavorite
   * @return userId
  **/
  @ApiModelProperty(value = "User Id which owns this ContentFavorite")
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }

  public ContentFavorite contentMetadataId(Long contentMetadataId) {
    this.contentMetadataId = contentMetadataId;
    return this;
  }

   /**
   * Content Metadata Id associated with this ContentFavorite
   * @return contentMetadataId
  **/
  @ApiModelProperty(value = "Content Metadata Id associated with this ContentFavorite")
  public Long getContentMetadataId() {
    return contentMetadataId;
  }

  public void setContentMetadataId(Long contentMetadataId) {
    this.contentMetadataId = contentMetadataId;
  }

   /**
   * Id of a look
   * @return lookId
  **/
  @ApiModelProperty(value = "Id of a look")
  public Long getLookId() {
    return lookId;
  }

   /**
   * Id of a dashboard
   * @return dashboardId
  **/
  @ApiModelProperty(value = "Id of a dashboard")
  public Long getDashboardId() {
    return dashboardId;
  }

  public ContentFavorite look(LookBasic look) {
    this.look = look;
    return this;
  }

   /**
   * Associated Look
   * @return look
  **/
  @ApiModelProperty(value = "Associated Look")
  public LookBasic getLook() {
    return look;
  }

  public void setLook(LookBasic look) {
    this.look = look;
  }

  public ContentFavorite dashboard(DashboardBase dashboard) {
    this.dashboard = dashboard;
    return this;
  }

   /**
   * Associated Dashboard
   * @return dashboard
  **/
  @ApiModelProperty(value = "Associated Dashboard")
  public DashboardBase getDashboard() {
    return dashboard;
  }

  public void setDashboard(DashboardBase dashboard) {
    this.dashboard = dashboard;
  }

  public ContentFavorite can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public ContentFavorite putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentFavorite contentFavorite = (ContentFavorite) o;
    return Objects.equals(this.id, contentFavorite.id) &&
        Objects.equals(this.userId, contentFavorite.userId) &&
        Objects.equals(this.contentMetadataId, contentFavorite.contentMetadataId) &&
        Objects.equals(this.lookId, contentFavorite.lookId) &&
        Objects.equals(this.dashboardId, contentFavorite.dashboardId) &&
        Objects.equals(this.look, contentFavorite.look) &&
        Objects.equals(this.dashboard, contentFavorite.dashboard) &&
        Objects.equals(this.can, contentFavorite.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, contentMetadataId, lookId, dashboardId, look, dashboard, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentFavorite {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    contentMetadataId: ").append(toIndentedString(contentMetadataId)).append("\n");
    sb.append("    lookId: ").append(toIndentedString(lookId)).append("\n");
    sb.append("    dashboardId: ").append(toIndentedString(dashboardId)).append("\n");
    sb.append("    look: ").append(toIndentedString(look)).append("\n");
    sb.append("    dashboard: ").append(toIndentedString(dashboard)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

