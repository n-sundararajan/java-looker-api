/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.LookmlModel;
import io.swagger.client.model.LookmlModelExplore;
import io.swagger.client.model.ValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LookmlModelApi {
    private ApiClient apiClient;

    public LookmlModelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LookmlModelApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for allLookmlModels
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allLookmlModelsCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookml_models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allLookmlModelsValidateBeforeCall(String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = allLookmlModelsCall(fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All LookML Models
     * ### Get information about all lookml models. 
     * @param fields Requested fields. (optional)
     * @return List&lt;LookmlModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LookmlModel> allLookmlModels(String fields) throws ApiException {
        ApiResponse<List<LookmlModel>> resp = allLookmlModelsWithHttpInfo(fields);
        return resp.getData();
    }

    /**
     * Get All LookML Models
     * ### Get information about all lookml models. 
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;List&lt;LookmlModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LookmlModel>> allLookmlModelsWithHttpInfo(String fields) throws ApiException {
        com.squareup.okhttp.Call call = allLookmlModelsValidateBeforeCall(fields, null, null);
        Type localVarReturnType = new TypeToken<List<LookmlModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All LookML Models (asynchronously)
     * ### Get information about all lookml models. 
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allLookmlModelsAsync(String fields, final ApiCallback<List<LookmlModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allLookmlModelsValidateBeforeCall(fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LookmlModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createLookmlModel
     * @param body LookML Model (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLookmlModelCall(LookmlModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/lookml_models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLookmlModelValidateBeforeCall(LookmlModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createLookmlModelCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create LookML Model
     * ### Create a lookml model using the specified configuration. 
     * @param body LookML Model (optional)
     * @return LookmlModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LookmlModel createLookmlModel(LookmlModel body) throws ApiException {
        ApiResponse<LookmlModel> resp = createLookmlModelWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create LookML Model
     * ### Create a lookml model using the specified configuration. 
     * @param body LookML Model (optional)
     * @return ApiResponse&lt;LookmlModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LookmlModel> createLookmlModelWithHttpInfo(LookmlModel body) throws ApiException {
        com.squareup.okhttp.Call call = createLookmlModelValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LookmlModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create LookML Model (asynchronously)
     * ### Create a lookml model using the specified configuration. 
     * @param body LookML Model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLookmlModelAsync(LookmlModel body, final ApiCallback<LookmlModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLookmlModelValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LookmlModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLookmlModel
     * @param lookmlModelName Name of lookml model. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLookmlModelCall(String lookmlModelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookml_models/{lookml_model_name}"
            .replaceAll("\\{" + "lookml_model_name" + "\\}", apiClient.escapeString(lookmlModelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLookmlModelValidateBeforeCall(String lookmlModelName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookmlModelName' is set
        if (lookmlModelName == null) {
            throw new ApiException("Missing the required parameter 'lookmlModelName' when calling deleteLookmlModel(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLookmlModelCall(lookmlModelName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete LookML Model
     * ### Delete a lookml model. 
     * @param lookmlModelName Name of lookml model. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String deleteLookmlModel(String lookmlModelName) throws ApiException {
        ApiResponse<String> resp = deleteLookmlModelWithHttpInfo(lookmlModelName);
        return resp.getData();
    }

    /**
     * Delete LookML Model
     * ### Delete a lookml model. 
     * @param lookmlModelName Name of lookml model. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> deleteLookmlModelWithHttpInfo(String lookmlModelName) throws ApiException {
        com.squareup.okhttp.Call call = deleteLookmlModelValidateBeforeCall(lookmlModelName, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete LookML Model (asynchronously)
     * ### Delete a lookml model. 
     * @param lookmlModelName Name of lookml model. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLookmlModelAsync(String lookmlModelName, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLookmlModelValidateBeforeCall(lookmlModelName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lookmlModel
     * @param lookmlModelName Name of lookml model. (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lookmlModelCall(String lookmlModelName, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookml_models/{lookml_model_name}"
            .replaceAll("\\{" + "lookml_model_name" + "\\}", apiClient.escapeString(lookmlModelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lookmlModelValidateBeforeCall(String lookmlModelName, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookmlModelName' is set
        if (lookmlModelName == null) {
            throw new ApiException("Missing the required parameter 'lookmlModelName' when calling lookmlModel(Async)");
        }
        

        com.squareup.okhttp.Call call = lookmlModelCall(lookmlModelName, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get LookML Model
     * ### Get information about a lookml model. 
     * @param lookmlModelName Name of lookml model. (required)
     * @param fields Requested fields. (optional)
     * @return LookmlModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LookmlModel lookmlModel(String lookmlModelName, String fields) throws ApiException {
        ApiResponse<LookmlModel> resp = lookmlModelWithHttpInfo(lookmlModelName, fields);
        return resp.getData();
    }

    /**
     * Get LookML Model
     * ### Get information about a lookml model. 
     * @param lookmlModelName Name of lookml model. (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;LookmlModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LookmlModel> lookmlModelWithHttpInfo(String lookmlModelName, String fields) throws ApiException {
        com.squareup.okhttp.Call call = lookmlModelValidateBeforeCall(lookmlModelName, fields, null, null);
        Type localVarReturnType = new TypeToken<LookmlModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get LookML Model (asynchronously)
     * ### Get information about a lookml model. 
     * @param lookmlModelName Name of lookml model. (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookmlModelAsync(String lookmlModelName, String fields, final ApiCallback<LookmlModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookmlModelValidateBeforeCall(lookmlModelName, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LookmlModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for lookmlModelExplore
     * @param lookmlModelName Name of lookml model. (required)
     * @param exploreName Name of explore. (required)
     * @param fields Requested fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call lookmlModelExploreCall(String lookmlModelName, String exploreName, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lookml_models/{lookml_model_name}/explores/{explore_name}"
            .replaceAll("\\{" + "lookml_model_name" + "\\}", apiClient.escapeString(lookmlModelName.toString()))
            .replaceAll("\\{" + "explore_name" + "\\}", apiClient.escapeString(exploreName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call lookmlModelExploreValidateBeforeCall(String lookmlModelName, String exploreName, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookmlModelName' is set
        if (lookmlModelName == null) {
            throw new ApiException("Missing the required parameter 'lookmlModelName' when calling lookmlModelExplore(Async)");
        }
        
        // verify the required parameter 'exploreName' is set
        if (exploreName == null) {
            throw new ApiException("Missing the required parameter 'exploreName' when calling lookmlModelExplore(Async)");
        }
        

        com.squareup.okhttp.Call call = lookmlModelExploreCall(lookmlModelName, exploreName, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get LookML Model Explore
     * ### Get information about a lookml model explore. 
     * @param lookmlModelName Name of lookml model. (required)
     * @param exploreName Name of explore. (required)
     * @param fields Requested fields. (optional)
     * @return LookmlModelExplore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LookmlModelExplore lookmlModelExplore(String lookmlModelName, String exploreName, String fields) throws ApiException {
        ApiResponse<LookmlModelExplore> resp = lookmlModelExploreWithHttpInfo(lookmlModelName, exploreName, fields);
        return resp.getData();
    }

    /**
     * Get LookML Model Explore
     * ### Get information about a lookml model explore. 
     * @param lookmlModelName Name of lookml model. (required)
     * @param exploreName Name of explore. (required)
     * @param fields Requested fields. (optional)
     * @return ApiResponse&lt;LookmlModelExplore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LookmlModelExplore> lookmlModelExploreWithHttpInfo(String lookmlModelName, String exploreName, String fields) throws ApiException {
        com.squareup.okhttp.Call call = lookmlModelExploreValidateBeforeCall(lookmlModelName, exploreName, fields, null, null);
        Type localVarReturnType = new TypeToken<LookmlModelExplore>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get LookML Model Explore (asynchronously)
     * ### Get information about a lookml model explore. 
     * @param lookmlModelName Name of lookml model. (required)
     * @param exploreName Name of explore. (required)
     * @param fields Requested fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call lookmlModelExploreAsync(String lookmlModelName, String exploreName, String fields, final ApiCallback<LookmlModelExplore> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = lookmlModelExploreValidateBeforeCall(lookmlModelName, exploreName, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LookmlModelExplore>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLookmlModel
     * @param lookmlModelName Name of lookml model. (required)
     * @param body LookML Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLookmlModelCall(String lookmlModelName, LookmlModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/lookml_models/{lookml_model_name}"
            .replaceAll("\\{" + "lookml_model_name" + "\\}", apiClient.escapeString(lookmlModelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLookmlModelValidateBeforeCall(String lookmlModelName, LookmlModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'lookmlModelName' is set
        if (lookmlModelName == null) {
            throw new ApiException("Missing the required parameter 'lookmlModelName' when calling updateLookmlModel(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateLookmlModel(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLookmlModelCall(lookmlModelName, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update LookML Model
     * ### Update a lookml model using the specified configuration. 
     * @param lookmlModelName Name of lookml model. (required)
     * @param body LookML Model (required)
     * @return LookmlModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LookmlModel updateLookmlModel(String lookmlModelName, LookmlModel body) throws ApiException {
        ApiResponse<LookmlModel> resp = updateLookmlModelWithHttpInfo(lookmlModelName, body);
        return resp.getData();
    }

    /**
     * Update LookML Model
     * ### Update a lookml model using the specified configuration. 
     * @param lookmlModelName Name of lookml model. (required)
     * @param body LookML Model (required)
     * @return ApiResponse&lt;LookmlModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LookmlModel> updateLookmlModelWithHttpInfo(String lookmlModelName, LookmlModel body) throws ApiException {
        com.squareup.okhttp.Call call = updateLookmlModelValidateBeforeCall(lookmlModelName, body, null, null);
        Type localVarReturnType = new TypeToken<LookmlModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update LookML Model (asynchronously)
     * ### Update a lookml model using the specified configuration. 
     * @param lookmlModelName Name of lookml model. (required)
     * @param body LookML Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLookmlModelAsync(String lookmlModelName, LookmlModel body, final ApiCallback<LookmlModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLookmlModelValidateBeforeCall(lookmlModelName, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LookmlModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
