/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ContentView
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class ContentView {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("look_id")
  private Long lookId = null;

  @SerializedName("dashboard_id")
  private Long dashboardId = null;

  @SerializedName("content_metadata_id")
  private Long contentMetadataId = null;

  @SerializedName("user_id")
  private Long userId = null;

  @SerializedName("group_id")
  private Long groupId = null;

  @SerializedName("view_count")
  private Long viewCount = null;

  @SerializedName("favorite_count")
  private Long favoriteCount = null;

  @SerializedName("last_viewed_at")
  private String lastViewedAt = null;

  @SerializedName("start_of_week_date")
  private String startOfWeekDate = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Unique Id
   * @return id
  **/
  @ApiModelProperty(value = "Unique Id")
  public Long getId() {
    return id;
  }

   /**
   * Id of viewed Look
   * @return lookId
  **/
  @ApiModelProperty(value = "Id of viewed Look")
  public Long getLookId() {
    return lookId;
  }

   /**
   * Id of the viewed Dashboard
   * @return dashboardId
  **/
  @ApiModelProperty(value = "Id of the viewed Dashboard")
  public Long getDashboardId() {
    return dashboardId;
  }

   /**
   * Content metadata id of the Look or Dashboard
   * @return contentMetadataId
  **/
  @ApiModelProperty(value = "Content metadata id of the Look or Dashboard")
  public Long getContentMetadataId() {
    return contentMetadataId;
  }

   /**
   * Id of user content was viewed by
   * @return userId
  **/
  @ApiModelProperty(value = "Id of user content was viewed by")
  public Long getUserId() {
    return userId;
  }

   /**
   * Id of group content was viewed by
   * @return groupId
  **/
  @ApiModelProperty(value = "Id of group content was viewed by")
  public Long getGroupId() {
    return groupId;
  }

   /**
   * Number of times piece of content was viewed
   * @return viewCount
  **/
  @ApiModelProperty(value = "Number of times piece of content was viewed")
  public Long getViewCount() {
    return viewCount;
  }

   /**
   * Number of times piece of content was favorited
   * @return favoriteCount
  **/
  @ApiModelProperty(value = "Number of times piece of content was favorited")
  public Long getFavoriteCount() {
    return favoriteCount;
  }

   /**
   * Date the piece of content was last viewed
   * @return lastViewedAt
  **/
  @ApiModelProperty(value = "Date the piece of content was last viewed")
  public String getLastViewedAt() {
    return lastViewedAt;
  }

   /**
   * Week start date for the view and favorite count during that given week
   * @return startOfWeekDate
  **/
  @ApiModelProperty(value = "Week start date for the view and favorite count during that given week")
  public String getStartOfWeekDate() {
    return startOfWeekDate;
  }

  public ContentView can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public ContentView putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentView contentView = (ContentView) o;
    return Objects.equals(this.id, contentView.id) &&
        Objects.equals(this.lookId, contentView.lookId) &&
        Objects.equals(this.dashboardId, contentView.dashboardId) &&
        Objects.equals(this.contentMetadataId, contentView.contentMetadataId) &&
        Objects.equals(this.userId, contentView.userId) &&
        Objects.equals(this.groupId, contentView.groupId) &&
        Objects.equals(this.viewCount, contentView.viewCount) &&
        Objects.equals(this.favoriteCount, contentView.favoriteCount) &&
        Objects.equals(this.lastViewedAt, contentView.lastViewedAt) &&
        Objects.equals(this.startOfWeekDate, contentView.startOfWeekDate) &&
        Objects.equals(this.can, contentView.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, lookId, dashboardId, contentMetadataId, userId, groupId, viewCount, favoriteCount, lastViewedAt, startOfWeekDate, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentView {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lookId: ").append(toIndentedString(lookId)).append("\n");
    sb.append("    dashboardId: ").append(toIndentedString(dashboardId)).append("\n");
    sb.append("    contentMetadataId: ").append(toIndentedString(contentMetadataId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    favoriteCount: ").append(toIndentedString(favoriteCount)).append("\n");
    sb.append("    lastViewedAt: ").append(toIndentedString(lastViewedAt)).append("\n");
    sb.append("    startOfWeekDate: ").append(toIndentedString(startOfWeekDate)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

