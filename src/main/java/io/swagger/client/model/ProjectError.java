/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * ProjectError
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class ProjectError {
  @SerializedName("code")
  private String code = null;

  @SerializedName("severity")
  private String severity = null;

  @SerializedName("kind")
  private String kind = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("field_name")
  private String fieldName = null;

  @SerializedName("file_path")
  private String filePath = null;

  @SerializedName("line_number")
  private Long lineNumber = null;

  @SerializedName("model_id")
  private String modelId = null;

  @SerializedName("explore")
  private String explore = null;

  @SerializedName("help_url")
  private String helpUrl = null;

  @SerializedName("params")
  private Map<String, String> params = null;

  @SerializedName("sanitized_message")
  private String sanitizedMessage = null;

   /**
   * A stable token that uniquely identifies this class of error, ignoring parameter values. Error message text may vary due to parameters or localization, but error codes do not. For example, a \&quot;File not found\&quot; error will have the same error code regardless of the filename in question or the user&#39;s display language
   * @return code
  **/
  @ApiModelProperty(value = "A stable token that uniquely identifies this class of error, ignoring parameter values. Error message text may vary due to parameters or localization, but error codes do not. For example, a \"File not found\" error will have the same error code regardless of the filename in question or the user's display language")
  public String getCode() {
    return code;
  }

   /**
   * Severity: fatal, error, warning, info, success
   * @return severity
  **/
  @ApiModelProperty(value = "Severity: fatal, error, warning, info, success")
  public String getSeverity() {
    return severity;
  }

   /**
   * Error classification: syntax, deprecation, model_configuration, etc
   * @return kind
  **/
  @ApiModelProperty(value = "Error classification: syntax, deprecation, model_configuration, etc")
  public String getKind() {
    return kind;
  }

   /**
   * Error message which may contain information such as dashboard or model names that may be considered sensitive in some use cases. Avoid storing or sending this message outside of Looker
   * @return message
  **/
  @ApiModelProperty(value = "Error message which may contain information such as dashboard or model names that may be considered sensitive in some use cases. Avoid storing or sending this message outside of Looker")
  public String getMessage() {
    return message;
  }

   /**
   * The field associated with this error
   * @return fieldName
  **/
  @ApiModelProperty(value = "The field associated with this error")
  public String getFieldName() {
    return fieldName;
  }

   /**
   * Name of the file containing this error
   * @return filePath
  **/
  @ApiModelProperty(value = "Name of the file containing this error")
  public String getFilePath() {
    return filePath;
  }

   /**
   * Line number in the file of this error
   * @return lineNumber
  **/
  @ApiModelProperty(value = "Line number in the file of this error")
  public Long getLineNumber() {
    return lineNumber;
  }

   /**
   * The model associated with this error
   * @return modelId
  **/
  @ApiModelProperty(value = "The model associated with this error")
  public String getModelId() {
    return modelId;
  }

   /**
   * The explore associated with this error
   * @return explore
  **/
  @ApiModelProperty(value = "The explore associated with this error")
  public String getExplore() {
    return explore;
  }

   /**
   * A link to Looker documentation about this error
   * @return helpUrl
  **/
  @ApiModelProperty(value = "A link to Looker documentation about this error")
  public String getHelpUrl() {
    return helpUrl;
  }

  public ProjectError params(Map<String, String> params) {
    this.params = params;
    return this;
  }

  public ProjectError putParamsItem(String key, String paramsItem) {
    if (this.params == null) {
      this.params = new HashMap<String, String>();
    }
    this.params.put(key, paramsItem);
    return this;
  }

   /**
   * Error parameters
   * @return params
  **/
  @ApiModelProperty(value = "Error parameters")
  public Map<String, String> getParams() {
    return params;
  }

  public void setParams(Map<String, String> params) {
    this.params = params;
  }

   /**
   * A version of the error message that does not contain potentially sensitive information. Suitable for situations in which messages are stored or sent to consumers outside of Looker, such as external logs. Sanitized messages will display \&quot;(?)\&quot; where sensitive information would appear in the corresponding non-sanitized message
   * @return sanitizedMessage
  **/
  @ApiModelProperty(value = "A version of the error message that does not contain potentially sensitive information. Suitable for situations in which messages are stored or sent to consumers outside of Looker, such as external logs. Sanitized messages will display \"(?)\" where sensitive information would appear in the corresponding non-sanitized message")
  public String getSanitizedMessage() {
    return sanitizedMessage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectError projectError = (ProjectError) o;
    return Objects.equals(this.code, projectError.code) &&
        Objects.equals(this.severity, projectError.severity) &&
        Objects.equals(this.kind, projectError.kind) &&
        Objects.equals(this.message, projectError.message) &&
        Objects.equals(this.fieldName, projectError.fieldName) &&
        Objects.equals(this.filePath, projectError.filePath) &&
        Objects.equals(this.lineNumber, projectError.lineNumber) &&
        Objects.equals(this.modelId, projectError.modelId) &&
        Objects.equals(this.explore, projectError.explore) &&
        Objects.equals(this.helpUrl, projectError.helpUrl) &&
        Objects.equals(this.params, projectError.params) &&
        Objects.equals(this.sanitizedMessage, projectError.sanitizedMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, severity, kind, message, fieldName, filePath, lineNumber, modelId, explore, helpUrl, params, sanitizedMessage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectError {\n");
    
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    explore: ").append(toIndentedString(explore)).append("\n");
    sb.append("    helpUrl: ").append(toIndentedString(helpUrl)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    sanitizedMessage: ").append(toIndentedString(sanitizedMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

