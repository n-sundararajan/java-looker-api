/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.LookModel;
import io.swagger.client.model.Query;
import io.swagger.client.model.SpaceBase;
import io.swagger.client.model.UserIdOnly;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * LookWithQuery
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class LookWithQuery {
  @SerializedName("id")
  private String id = null;

  @SerializedName("content_metadata_id")
  private Long contentMetadataId = null;

  @SerializedName("view_count")
  private Long viewCount = null;

  @SerializedName("favorite_count")
  private Long favoriteCount = null;

  @SerializedName("content_favorite_id")
  private Long contentFavoriteId = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("user")
  private UserIdOnly user = null;

  @SerializedName("query_id")
  private Long queryId = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("short_url")
  private String shortUrl = null;

  @SerializedName("space")
  private SpaceBase space = null;

  @SerializedName("public")
  private Boolean _public = null;

  @SerializedName("public_slug")
  private String publicSlug = null;

  @SerializedName("user_id")
  private Long userId = null;

  @SerializedName("space_id")
  private String spaceId = null;

  @SerializedName("model")
  private LookModel model = null;

  @SerializedName("public_url")
  private String publicUrl = null;

  @SerializedName("embed_url")
  private String embedUrl = null;

  @SerializedName("google_spreadsheet_formula")
  private String googleSpreadsheetFormula = null;

  @SerializedName("excel_file_url")
  private String excelFileUrl = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("query")
  private Query query = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("deleted_at")
  private OffsetDateTime deletedAt = null;

  @SerializedName("last_updater_id")
  private Long lastUpdaterId = null;

  @SerializedName("last_viewed_at")
  private OffsetDateTime lastViewedAt = null;

  @SerializedName("last_accessed_at")
  private OffsetDateTime lastAccessedAt = null;

  @SerializedName("deleter_id")
  private Long deleterId = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  @SerializedName("is_run_on_load")
  private Boolean isRunOnLoad = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Unique Id
   * @return id
  **/
  @ApiModelProperty(value = "Unique Id")
  public String getId() {
    return id;
  }

   /**
   * Id of content metadata
   * @return contentMetadataId
  **/
  @ApiModelProperty(value = "Id of content metadata")
  public Long getContentMetadataId() {
    return contentMetadataId;
  }

   /**
   * Number of times viewed in the Looker web UI
   * @return viewCount
  **/
  @ApiModelProperty(value = "Number of times viewed in the Looker web UI")
  public Long getViewCount() {
    return viewCount;
  }

   /**
   * Number of times favorited
   * @return favoriteCount
  **/
  @ApiModelProperty(value = "Number of times favorited")
  public Long getFavoriteCount() {
    return favoriteCount;
  }

   /**
   * Content Favorite Id
   * @return contentFavoriteId
  **/
  @ApiModelProperty(value = "Content Favorite Id")
  public Long getContentFavoriteId() {
    return contentFavoriteId;
  }

  public LookWithQuery title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Look Title
   * @return title
  **/
  @ApiModelProperty(value = "Look Title")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public LookWithQuery user(UserIdOnly user) {
    this.user = user;
    return this;
  }

   /**
   * User
   * @return user
  **/
  @ApiModelProperty(value = "User")
  public UserIdOnly getUser() {
    return user;
  }

  public void setUser(UserIdOnly user) {
    this.user = user;
  }

  public LookWithQuery queryId(Long queryId) {
    this.queryId = queryId;
    return this;
  }

   /**
   * Query Id
   * @return queryId
  **/
  @ApiModelProperty(value = "Query Id")
  public Long getQueryId() {
    return queryId;
  }

  public void setQueryId(Long queryId) {
    this.queryId = queryId;
  }

  public LookWithQuery description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @ApiModelProperty(value = "Description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

   /**
   * Short Url
   * @return shortUrl
  **/
  @ApiModelProperty(value = "Short Url")
  public String getShortUrl() {
    return shortUrl;
  }

  public LookWithQuery space(SpaceBase space) {
    this.space = space;
    return this;
  }

   /**
   * Space of this Look
   * @return space
  **/
  @ApiModelProperty(value = "Space of this Look")
  public SpaceBase getSpace() {
    return space;
  }

  public void setSpace(SpaceBase space) {
    this.space = space;
  }

   /**
   * Is Public
   * @return _public
  **/
  @ApiModelProperty(value = "Is Public")
  public Boolean isPublic() {
    return _public;
  }

   /**
   * Public Slug
   * @return publicSlug
  **/
  @ApiModelProperty(value = "Public Slug")
  public String getPublicSlug() {
    return publicSlug;
  }

  public LookWithQuery userId(Long userId) {
    this.userId = userId;
    return this;
  }

   /**
   * (Write-Only) User Id
   * @return userId
  **/
  @ApiModelProperty(value = "(Write-Only) User Id")
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }

  public LookWithQuery spaceId(String spaceId) {
    this.spaceId = spaceId;
    return this;
  }

   /**
   * (Write-Only) Space Id
   * @return spaceId
  **/
  @ApiModelProperty(value = "(Write-Only) Space Id")
  public String getSpaceId() {
    return spaceId;
  }

  public void setSpaceId(String spaceId) {
    this.spaceId = spaceId;
  }

  public LookWithQuery model(LookModel model) {
    this.model = model;
    return this;
  }

   /**
   * Model
   * @return model
  **/
  @ApiModelProperty(value = "Model")
  public LookModel getModel() {
    return model;
  }

  public void setModel(LookModel model) {
    this.model = model;
  }

   /**
   * Public Url
   * @return publicUrl
  **/
  @ApiModelProperty(value = "Public Url")
  public String getPublicUrl() {
    return publicUrl;
  }

   /**
   * Embed Url
   * @return embedUrl
  **/
  @ApiModelProperty(value = "Embed Url")
  public String getEmbedUrl() {
    return embedUrl;
  }

   /**
   * Google Spreadsheet Formula
   * @return googleSpreadsheetFormula
  **/
  @ApiModelProperty(value = "Google Spreadsheet Formula")
  public String getGoogleSpreadsheetFormula() {
    return googleSpreadsheetFormula;
  }

   /**
   * Excel File Url
   * @return excelFileUrl
  **/
  @ApiModelProperty(value = "Excel File Url")
  public String getExcelFileUrl() {
    return excelFileUrl;
  }

   /**
   * Url
   * @return url
  **/
  @ApiModelProperty(value = "Url")
  public String getUrl() {
    return url;
  }

  public LookWithQuery query(Query query) {
    this.query = query;
    return this;
  }

   /**
   * Query
   * @return query
  **/
  @ApiModelProperty(value = "Query")
  public Query getQuery() {
    return query;
  }

  public void setQuery(Query query) {
    this.query = query;
  }

   /**
   * Time that the Look was created.
   * @return createdAt
  **/
  @ApiModelProperty(value = "Time that the Look was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * Time that the Look was updated.
   * @return updatedAt
  **/
  @ApiModelProperty(value = "Time that the Look was updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

   /**
   * Time that the Look was deleted.
   * @return deletedAt
  **/
  @ApiModelProperty(value = "Time that the Look was deleted.")
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

   /**
   * Id of User that last updated the look.
   * @return lastUpdaterId
  **/
  @ApiModelProperty(value = "Id of User that last updated the look.")
  public Long getLastUpdaterId() {
    return lastUpdaterId;
  }

   /**
   * Time last viewed in the Looker web UI
   * @return lastViewedAt
  **/
  @ApiModelProperty(value = "Time last viewed in the Looker web UI")
  public OffsetDateTime getLastViewedAt() {
    return lastViewedAt;
  }

   /**
   * Time that the Look was last accessed by any user
   * @return lastAccessedAt
  **/
  @ApiModelProperty(value = "Time that the Look was last accessed by any user")
  public OffsetDateTime getLastAccessedAt() {
    return lastAccessedAt;
  }

   /**
   * Id of User that deleted the look.
   * @return deleterId
  **/
  @ApiModelProperty(value = "Id of User that deleted the look.")
  public Long getDeleterId() {
    return deleterId;
  }

  public LookWithQuery deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether or not the look is deleted
   * @return deleted
  **/
  @ApiModelProperty(value = "Whether or not the look is deleted")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  public LookWithQuery isRunOnLoad(Boolean isRunOnLoad) {
    this.isRunOnLoad = isRunOnLoad;
    return this;
  }

   /**
   * auto-run query when Look viewed
   * @return isRunOnLoad
  **/
  @ApiModelProperty(value = "auto-run query when Look viewed")
  public Boolean isIsRunOnLoad() {
    return isRunOnLoad;
  }

  public void setIsRunOnLoad(Boolean isRunOnLoad) {
    this.isRunOnLoad = isRunOnLoad;
  }

  public LookWithQuery can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public LookWithQuery putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LookWithQuery lookWithQuery = (LookWithQuery) o;
    return Objects.equals(this.id, lookWithQuery.id) &&
        Objects.equals(this.contentMetadataId, lookWithQuery.contentMetadataId) &&
        Objects.equals(this.viewCount, lookWithQuery.viewCount) &&
        Objects.equals(this.favoriteCount, lookWithQuery.favoriteCount) &&
        Objects.equals(this.contentFavoriteId, lookWithQuery.contentFavoriteId) &&
        Objects.equals(this.title, lookWithQuery.title) &&
        Objects.equals(this.user, lookWithQuery.user) &&
        Objects.equals(this.queryId, lookWithQuery.queryId) &&
        Objects.equals(this.description, lookWithQuery.description) &&
        Objects.equals(this.shortUrl, lookWithQuery.shortUrl) &&
        Objects.equals(this.space, lookWithQuery.space) &&
        Objects.equals(this._public, lookWithQuery._public) &&
        Objects.equals(this.publicSlug, lookWithQuery.publicSlug) &&
        Objects.equals(this.userId, lookWithQuery.userId) &&
        Objects.equals(this.spaceId, lookWithQuery.spaceId) &&
        Objects.equals(this.model, lookWithQuery.model) &&
        Objects.equals(this.publicUrl, lookWithQuery.publicUrl) &&
        Objects.equals(this.embedUrl, lookWithQuery.embedUrl) &&
        Objects.equals(this.googleSpreadsheetFormula, lookWithQuery.googleSpreadsheetFormula) &&
        Objects.equals(this.excelFileUrl, lookWithQuery.excelFileUrl) &&
        Objects.equals(this.url, lookWithQuery.url) &&
        Objects.equals(this.query, lookWithQuery.query) &&
        Objects.equals(this.createdAt, lookWithQuery.createdAt) &&
        Objects.equals(this.updatedAt, lookWithQuery.updatedAt) &&
        Objects.equals(this.deletedAt, lookWithQuery.deletedAt) &&
        Objects.equals(this.lastUpdaterId, lookWithQuery.lastUpdaterId) &&
        Objects.equals(this.lastViewedAt, lookWithQuery.lastViewedAt) &&
        Objects.equals(this.lastAccessedAt, lookWithQuery.lastAccessedAt) &&
        Objects.equals(this.deleterId, lookWithQuery.deleterId) &&
        Objects.equals(this.deleted, lookWithQuery.deleted) &&
        Objects.equals(this.isRunOnLoad, lookWithQuery.isRunOnLoad) &&
        Objects.equals(this.can, lookWithQuery.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, contentMetadataId, viewCount, favoriteCount, contentFavoriteId, title, user, queryId, description, shortUrl, space, _public, publicSlug, userId, spaceId, model, publicUrl, embedUrl, googleSpreadsheetFormula, excelFileUrl, url, query, createdAt, updatedAt, deletedAt, lastUpdaterId, lastViewedAt, lastAccessedAt, deleterId, deleted, isRunOnLoad, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LookWithQuery {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    contentMetadataId: ").append(toIndentedString(contentMetadataId)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    favoriteCount: ").append(toIndentedString(favoriteCount)).append("\n");
    sb.append("    contentFavoriteId: ").append(toIndentedString(contentFavoriteId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    queryId: ").append(toIndentedString(queryId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    shortUrl: ").append(toIndentedString(shortUrl)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    publicSlug: ").append(toIndentedString(publicSlug)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    publicUrl: ").append(toIndentedString(publicUrl)).append("\n");
    sb.append("    embedUrl: ").append(toIndentedString(embedUrl)).append("\n");
    sb.append("    googleSpreadsheetFormula: ").append(toIndentedString(googleSpreadsheetFormula)).append("\n");
    sb.append("    excelFileUrl: ").append(toIndentedString(excelFileUrl)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    lastUpdaterId: ").append(toIndentedString(lastUpdaterId)).append("\n");
    sb.append("    lastViewedAt: ").append(toIndentedString(lastViewedAt)).append("\n");
    sb.append("    lastAccessedAt: ").append(toIndentedString(lastAccessedAt)).append("\n");
    sb.append("    deleterId: ").append(toIndentedString(deleterId)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    isRunOnLoad: ").append(toIndentedString(isRunOnLoad)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

