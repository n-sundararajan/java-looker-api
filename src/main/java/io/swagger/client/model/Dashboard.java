/*
 * Looker API 3.0 Reference
 * ### Authorization  The Looker API uses Looker **API3** credentials for authorization and access control. Looker admins can create API3 credentials on Looker's **Admin/Users** page. Pass API3 credentials to the **_/login** endpoint to obtain a temporary access_token. Include that access_token in the Authorization header of Looker API requests. For details, see [Looker API Authorization](https://looker.com/docs/r/api/authorization)  ### Client SDKs  The Looker API is a RESTful system that should be usable by any programming language capable of making HTTPS requests. Client SDKs for a variety of programming languages can be generated from the Looker API's Swagger JSON metadata to streamline use of the Looker API in your applications. A client SDK for Ruby is available as an example. For more information, see [Looker API Client SDKs](https://looker.com/docs/r/api/client_sdks)  ### Try It Out!  The 'api-docs' page served by the Looker instance includes 'Try It Out!' buttons for each API method. After logging in with API3 credentials, you can use the \"Try It Out!\" buttons to call the API directly from the documentation page to interactively explore API features and responses.  ### Versioning  Future releases of Looker will expand this API release-by-release to securely expose more and more of the core power of Looker to API client applications. API endpoints marked as \"beta\" may receive breaking changes without warning. Stable (non-beta) API endpoints should not receive breaking changes in future releases. For more information, see [Looker API Versioning](https://looker.com/docs/r/api/versioning) 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.DashboardElement;
import io.swagger.client.model.DashboardFilter;
import io.swagger.client.model.DashboardLayout;
import io.swagger.client.model.LookModel;
import io.swagger.client.model.SpaceBase;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * Dashboard
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-06-08T15:12:41.902+05:30")
public class Dashboard {
  @SerializedName("id")
  private String id = null;

  @SerializedName("content_metadata_id")
  private Long contentMetadataId = null;

  @SerializedName("content_favorite_id")
  private Long contentFavoriteId = null;

  @SerializedName("view_count")
  private Long viewCount = null;

  @SerializedName("last_accessed_at")
  private OffsetDateTime lastAccessedAt = null;

  @SerializedName("favorite_count")
  private Long favoriteCount = null;

  @SerializedName("user_id")
  private Long userId = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("readonly")
  private Boolean readonly = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("refresh_interval")
  private String refreshInterval = null;

  @SerializedName("refresh_interval_to_i")
  private Long refreshIntervalToI = null;

  @SerializedName("space")
  private SpaceBase space = null;

  @SerializedName("load_configuration")
  private String loadConfiguration = null;

  @SerializedName("model")
  private LookModel model = null;

  @SerializedName("space_id")
  private String spaceId = null;

  @SerializedName("dashboard_elements")
  private List<DashboardElement> dashboardElements = null;

  @SerializedName("dashboard_layouts")
  private List<DashboardLayout> dashboardLayouts = null;

  @SerializedName("dashboard_filters")
  private List<DashboardFilter> dashboardFilters = null;

  @SerializedName("last_viewed_at")
  private OffsetDateTime lastViewedAt = null;

  @SerializedName("background_color")
  private String backgroundColor = null;

  @SerializedName("show_title")
  private Boolean showTitle = null;

  @SerializedName("title_color")
  private String titleColor = null;

  @SerializedName("show_filters_bar")
  private Boolean showFiltersBar = null;

  @SerializedName("tile_background_color")
  private String tileBackgroundColor = null;

  @SerializedName("tile_text_color")
  private String tileTextColor = null;

  @SerializedName("text_tile_text_color")
  private String textTileTextColor = null;

  @SerializedName("last_updater_id")
  private Long lastUpdaterId = null;

  @SerializedName("deleter_id")
  private Long deleterId = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("deleted_at")
  private OffsetDateTime deletedAt = null;

  @SerializedName("query_timezone")
  private String queryTimezone = null;

  @SerializedName("edit_uri")
  private String editUri = null;

  @SerializedName("can")
  private Map<String, Boolean> can = null;

   /**
   * Unique Id
   * @return id
  **/
  @ApiModelProperty(value = "Unique Id")
  public String getId() {
    return id;
  }

   /**
   * Id of content metadata
   * @return contentMetadataId
  **/
  @ApiModelProperty(value = "Id of content metadata")
  public Long getContentMetadataId() {
    return contentMetadataId;
  }

   /**
   * Content Favorite Id
   * @return contentFavoriteId
  **/
  @ApiModelProperty(value = "Content Favorite Id")
  public Long getContentFavoriteId() {
    return contentFavoriteId;
  }

   /**
   * Number of times viewed in the Looker web UI
   * @return viewCount
  **/
  @ApiModelProperty(value = "Number of times viewed in the Looker web UI")
  public Long getViewCount() {
    return viewCount;
  }

   /**
   * Time the dashboard was last accessed
   * @return lastAccessedAt
  **/
  @ApiModelProperty(value = "Time the dashboard was last accessed")
  public OffsetDateTime getLastAccessedAt() {
    return lastAccessedAt;
  }

   /**
   * Number of times favorited
   * @return favoriteCount
  **/
  @ApiModelProperty(value = "Number of times favorited")
  public Long getFavoriteCount() {
    return favoriteCount;
  }

   /**
   * Id of User
   * @return userId
  **/
  @ApiModelProperty(value = "Id of User")
  public Long getUserId() {
    return userId;
  }

  public Dashboard title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Look Title
   * @return title
  **/
  @ApiModelProperty(value = "Look Title")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Dashboard description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @ApiModelProperty(value = "Description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

   /**
   * Is Read-only
   * @return readonly
  **/
  @ApiModelProperty(value = "Is Read-only")
  public Boolean isReadonly() {
    return readonly;
  }

  public Dashboard hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Is Hidden
   * @return hidden
  **/
  @ApiModelProperty(value = "Is Hidden")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public Dashboard refreshInterval(String refreshInterval) {
    this.refreshInterval = refreshInterval;
    return this;
  }

   /**
   * Refresh Interval
   * @return refreshInterval
  **/
  @ApiModelProperty(value = "Refresh Interval")
  public String getRefreshInterval() {
    return refreshInterval;
  }

  public void setRefreshInterval(String refreshInterval) {
    this.refreshInterval = refreshInterval;
  }

   /**
   * Refresh Interval as Integer
   * @return refreshIntervalToI
  **/
  @ApiModelProperty(value = "Refresh Interval as Integer")
  public Long getRefreshIntervalToI() {
    return refreshIntervalToI;
  }

  public Dashboard space(SpaceBase space) {
    this.space = space;
    return this;
  }

   /**
   * Space
   * @return space
  **/
  @ApiModelProperty(value = "Space")
  public SpaceBase getSpace() {
    return space;
  }

  public void setSpace(SpaceBase space) {
    this.space = space;
  }

  public Dashboard loadConfiguration(String loadConfiguration) {
    this.loadConfiguration = loadConfiguration;
    return this;
  }

   /**
   * configuration option that governs how dashboard loading will happen.
   * @return loadConfiguration
  **/
  @ApiModelProperty(value = "configuration option that governs how dashboard loading will happen.")
  public String getLoadConfiguration() {
    return loadConfiguration;
  }

  public void setLoadConfiguration(String loadConfiguration) {
    this.loadConfiguration = loadConfiguration;
  }

  public Dashboard model(LookModel model) {
    this.model = model;
    return this;
  }

   /**
   * Model
   * @return model
  **/
  @ApiModelProperty(value = "Model")
  public LookModel getModel() {
    return model;
  }

  public void setModel(LookModel model) {
    this.model = model;
  }

  public Dashboard spaceId(String spaceId) {
    this.spaceId = spaceId;
    return this;
  }

   /**
   * Id of Space
   * @return spaceId
  **/
  @ApiModelProperty(value = "Id of Space")
  public String getSpaceId() {
    return spaceId;
  }

  public void setSpaceId(String spaceId) {
    this.spaceId = spaceId;
  }

  public Dashboard dashboardElements(List<DashboardElement> dashboardElements) {
    this.dashboardElements = dashboardElements;
    return this;
  }

  public Dashboard addDashboardElementsItem(DashboardElement dashboardElementsItem) {
    if (this.dashboardElements == null) {
      this.dashboardElements = new ArrayList<DashboardElement>();
    }
    this.dashboardElements.add(dashboardElementsItem);
    return this;
  }

   /**
   * Elements
   * @return dashboardElements
  **/
  @ApiModelProperty(value = "Elements")
  public List<DashboardElement> getDashboardElements() {
    return dashboardElements;
  }

  public void setDashboardElements(List<DashboardElement> dashboardElements) {
    this.dashboardElements = dashboardElements;
  }

  public Dashboard dashboardLayouts(List<DashboardLayout> dashboardLayouts) {
    this.dashboardLayouts = dashboardLayouts;
    return this;
  }

  public Dashboard addDashboardLayoutsItem(DashboardLayout dashboardLayoutsItem) {
    if (this.dashboardLayouts == null) {
      this.dashboardLayouts = new ArrayList<DashboardLayout>();
    }
    this.dashboardLayouts.add(dashboardLayoutsItem);
    return this;
  }

   /**
   * Layouts
   * @return dashboardLayouts
  **/
  @ApiModelProperty(value = "Layouts")
  public List<DashboardLayout> getDashboardLayouts() {
    return dashboardLayouts;
  }

  public void setDashboardLayouts(List<DashboardLayout> dashboardLayouts) {
    this.dashboardLayouts = dashboardLayouts;
  }

  public Dashboard dashboardFilters(List<DashboardFilter> dashboardFilters) {
    this.dashboardFilters = dashboardFilters;
    return this;
  }

  public Dashboard addDashboardFiltersItem(DashboardFilter dashboardFiltersItem) {
    if (this.dashboardFilters == null) {
      this.dashboardFilters = new ArrayList<DashboardFilter>();
    }
    this.dashboardFilters.add(dashboardFiltersItem);
    return this;
  }

   /**
   * Filters
   * @return dashboardFilters
  **/
  @ApiModelProperty(value = "Filters")
  public List<DashboardFilter> getDashboardFilters() {
    return dashboardFilters;
  }

  public void setDashboardFilters(List<DashboardFilter> dashboardFilters) {
    this.dashboardFilters = dashboardFilters;
  }

   /**
   * Time last viewed in the Looker web UI
   * @return lastViewedAt
  **/
  @ApiModelProperty(value = "Time last viewed in the Looker web UI")
  public OffsetDateTime getLastViewedAt() {
    return lastViewedAt;
  }

  public Dashboard backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * Background color
   * @return backgroundColor
  **/
  @ApiModelProperty(value = "Background color")
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }

  public Dashboard showTitle(Boolean showTitle) {
    this.showTitle = showTitle;
    return this;
  }

   /**
   * Show title
   * @return showTitle
  **/
  @ApiModelProperty(value = "Show title")
  public Boolean isShowTitle() {
    return showTitle;
  }

  public void setShowTitle(Boolean showTitle) {
    this.showTitle = showTitle;
  }

  public Dashboard titleColor(String titleColor) {
    this.titleColor = titleColor;
    return this;
  }

   /**
   * Title color
   * @return titleColor
  **/
  @ApiModelProperty(value = "Title color")
  public String getTitleColor() {
    return titleColor;
  }

  public void setTitleColor(String titleColor) {
    this.titleColor = titleColor;
  }

  public Dashboard showFiltersBar(Boolean showFiltersBar) {
    this.showFiltersBar = showFiltersBar;
    return this;
  }

   /**
   * Show filters bar
   * @return showFiltersBar
  **/
  @ApiModelProperty(value = "Show filters bar")
  public Boolean isShowFiltersBar() {
    return showFiltersBar;
  }

  public void setShowFiltersBar(Boolean showFiltersBar) {
    this.showFiltersBar = showFiltersBar;
  }

  public Dashboard tileBackgroundColor(String tileBackgroundColor) {
    this.tileBackgroundColor = tileBackgroundColor;
    return this;
  }

   /**
   * Tile background color
   * @return tileBackgroundColor
  **/
  @ApiModelProperty(value = "Tile background color")
  public String getTileBackgroundColor() {
    return tileBackgroundColor;
  }

  public void setTileBackgroundColor(String tileBackgroundColor) {
    this.tileBackgroundColor = tileBackgroundColor;
  }

  public Dashboard tileTextColor(String tileTextColor) {
    this.tileTextColor = tileTextColor;
    return this;
  }

   /**
   * Tile text color
   * @return tileTextColor
  **/
  @ApiModelProperty(value = "Tile text color")
  public String getTileTextColor() {
    return tileTextColor;
  }

  public void setTileTextColor(String tileTextColor) {
    this.tileTextColor = tileTextColor;
  }

  public Dashboard textTileTextColor(String textTileTextColor) {
    this.textTileTextColor = textTileTextColor;
    return this;
  }

   /**
   * Color of text on text tiles
   * @return textTileTextColor
  **/
  @ApiModelProperty(value = "Color of text on text tiles")
  public String getTextTileTextColor() {
    return textTileTextColor;
  }

  public void setTextTileTextColor(String textTileTextColor) {
    this.textTileTextColor = textTileTextColor;
  }

   /**
   * Id of User that last updated the dashboard.
   * @return lastUpdaterId
  **/
  @ApiModelProperty(value = "Id of User that last updated the dashboard.")
  public Long getLastUpdaterId() {
    return lastUpdaterId;
  }

   /**
   * Id of User that deleted the dashboard.
   * @return deleterId
  **/
  @ApiModelProperty(value = "Id of User that deleted the dashboard.")
  public Long getDeleterId() {
    return deleterId;
  }

  public Dashboard deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether or not a dashboard is deleted.
   * @return deleted
  **/
  @ApiModelProperty(value = "Whether or not a dashboard is deleted.")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

   /**
   * Time that the Dashboard was created.
   * @return createdAt
  **/
  @ApiModelProperty(value = "Time that the Dashboard was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * Time that the Dashboard was deleted.
   * @return deletedAt
  **/
  @ApiModelProperty(value = "Time that the Dashboard was deleted.")
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public Dashboard queryTimezone(String queryTimezone) {
    this.queryTimezone = queryTimezone;
    return this;
  }

   /**
   * Timezone in which the Dashboard will run by default.
   * @return queryTimezone
  **/
  @ApiModelProperty(value = "Timezone in which the Dashboard will run by default.")
  public String getQueryTimezone() {
    return queryTimezone;
  }

  public void setQueryTimezone(String queryTimezone) {
    this.queryTimezone = queryTimezone;
  }

   /**
   * Relative path of URI of LookML file to edit the dashboard (LookML dashboard only).
   * @return editUri
  **/
  @ApiModelProperty(value = "Relative path of URI of LookML file to edit the dashboard (LookML dashboard only).")
  public String getEditUri() {
    return editUri;
  }

  public Dashboard can(Map<String, Boolean> can) {
    this.can = can;
    return this;
  }

  public Dashboard putCanItem(String key, Boolean canItem) {
    if (this.can == null) {
      this.can = new HashMap<String, Boolean>();
    }
    this.can.put(key, canItem);
    return this;
  }

   /**
   * Operations the current user is able to perform on this object
   * @return can
  **/
  @ApiModelProperty(value = "Operations the current user is able to perform on this object")
  public Map<String, Boolean> getCan() {
    return can;
  }

  public void setCan(Map<String, Boolean> can) {
    this.can = can;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dashboard dashboard = (Dashboard) o;
    return Objects.equals(this.id, dashboard.id) &&
        Objects.equals(this.contentMetadataId, dashboard.contentMetadataId) &&
        Objects.equals(this.contentFavoriteId, dashboard.contentFavoriteId) &&
        Objects.equals(this.viewCount, dashboard.viewCount) &&
        Objects.equals(this.lastAccessedAt, dashboard.lastAccessedAt) &&
        Objects.equals(this.favoriteCount, dashboard.favoriteCount) &&
        Objects.equals(this.userId, dashboard.userId) &&
        Objects.equals(this.title, dashboard.title) &&
        Objects.equals(this.description, dashboard.description) &&
        Objects.equals(this.readonly, dashboard.readonly) &&
        Objects.equals(this.hidden, dashboard.hidden) &&
        Objects.equals(this.refreshInterval, dashboard.refreshInterval) &&
        Objects.equals(this.refreshIntervalToI, dashboard.refreshIntervalToI) &&
        Objects.equals(this.space, dashboard.space) &&
        Objects.equals(this.loadConfiguration, dashboard.loadConfiguration) &&
        Objects.equals(this.model, dashboard.model) &&
        Objects.equals(this.spaceId, dashboard.spaceId) &&
        Objects.equals(this.dashboardElements, dashboard.dashboardElements) &&
        Objects.equals(this.dashboardLayouts, dashboard.dashboardLayouts) &&
        Objects.equals(this.dashboardFilters, dashboard.dashboardFilters) &&
        Objects.equals(this.lastViewedAt, dashboard.lastViewedAt) &&
        Objects.equals(this.backgroundColor, dashboard.backgroundColor) &&
        Objects.equals(this.showTitle, dashboard.showTitle) &&
        Objects.equals(this.titleColor, dashboard.titleColor) &&
        Objects.equals(this.showFiltersBar, dashboard.showFiltersBar) &&
        Objects.equals(this.tileBackgroundColor, dashboard.tileBackgroundColor) &&
        Objects.equals(this.tileTextColor, dashboard.tileTextColor) &&
        Objects.equals(this.textTileTextColor, dashboard.textTileTextColor) &&
        Objects.equals(this.lastUpdaterId, dashboard.lastUpdaterId) &&
        Objects.equals(this.deleterId, dashboard.deleterId) &&
        Objects.equals(this.deleted, dashboard.deleted) &&
        Objects.equals(this.createdAt, dashboard.createdAt) &&
        Objects.equals(this.deletedAt, dashboard.deletedAt) &&
        Objects.equals(this.queryTimezone, dashboard.queryTimezone) &&
        Objects.equals(this.editUri, dashboard.editUri) &&
        Objects.equals(this.can, dashboard.can);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, contentMetadataId, contentFavoriteId, viewCount, lastAccessedAt, favoriteCount, userId, title, description, readonly, hidden, refreshInterval, refreshIntervalToI, space, loadConfiguration, model, spaceId, dashboardElements, dashboardLayouts, dashboardFilters, lastViewedAt, backgroundColor, showTitle, titleColor, showFiltersBar, tileBackgroundColor, tileTextColor, textTileTextColor, lastUpdaterId, deleterId, deleted, createdAt, deletedAt, queryTimezone, editUri, can);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dashboard {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    contentMetadataId: ").append(toIndentedString(contentMetadataId)).append("\n");
    sb.append("    contentFavoriteId: ").append(toIndentedString(contentFavoriteId)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("    lastAccessedAt: ").append(toIndentedString(lastAccessedAt)).append("\n");
    sb.append("    favoriteCount: ").append(toIndentedString(favoriteCount)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    refreshInterval: ").append(toIndentedString(refreshInterval)).append("\n");
    sb.append("    refreshIntervalToI: ").append(toIndentedString(refreshIntervalToI)).append("\n");
    sb.append("    space: ").append(toIndentedString(space)).append("\n");
    sb.append("    loadConfiguration: ").append(toIndentedString(loadConfiguration)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
    sb.append("    dashboardElements: ").append(toIndentedString(dashboardElements)).append("\n");
    sb.append("    dashboardLayouts: ").append(toIndentedString(dashboardLayouts)).append("\n");
    sb.append("    dashboardFilters: ").append(toIndentedString(dashboardFilters)).append("\n");
    sb.append("    lastViewedAt: ").append(toIndentedString(lastViewedAt)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    showTitle: ").append(toIndentedString(showTitle)).append("\n");
    sb.append("    titleColor: ").append(toIndentedString(titleColor)).append("\n");
    sb.append("    showFiltersBar: ").append(toIndentedString(showFiltersBar)).append("\n");
    sb.append("    tileBackgroundColor: ").append(toIndentedString(tileBackgroundColor)).append("\n");
    sb.append("    tileTextColor: ").append(toIndentedString(tileTextColor)).append("\n");
    sb.append("    textTileTextColor: ").append(toIndentedString(textTileTextColor)).append("\n");
    sb.append("    lastUpdaterId: ").append(toIndentedString(lastUpdaterId)).append("\n");
    sb.append("    deleterId: ").append(toIndentedString(deleterId)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    queryTimezone: ").append(toIndentedString(queryTimezone)).append("\n");
    sb.append("    editUri: ").append(toIndentedString(editUri)).append("\n");
    sb.append("    can: ").append(toIndentedString(can)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

